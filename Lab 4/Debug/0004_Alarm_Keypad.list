
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000625c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed8  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007304  08007304  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800730c  0800730c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004638  2000006c  08007380  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046a4  08007380  000246a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160e2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ae  00000000  00000000  000361c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00039570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001076  00000000  00000000  0003aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a00  00000000  00000000  0003bae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2ef  00000000  00000000  000604e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc5a8  00000000  00000000  0007a7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d50  00000000  00000000  00156d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0015cad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006414 	.word	0x08006414

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08006414 	.word	0x08006414

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	int done=1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
	while(done)
 80005c6:	e19b      	b.n	8000900 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	48b3      	ldr	r0, [pc, #716]	; (800089c <Get_Key+0x2e0>)
 80005d0:	f001 fd62 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	48b0      	ldr	r0, [pc, #704]	; (800089c <Get_Key+0x2e0>)
 80005da:	f001 fd5d 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	48ae      	ldr	r0, [pc, #696]	; (800089c <Get_Key+0x2e0>)
 80005e4:	f001 fd58 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	48ab      	ldr	r0, [pc, #684]	; (800089c <Get_Key+0x2e0>)
 80005ee:	f001 fd53 	bl	8002098 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	48a9      	ldr	r0, [pc, #676]	; (800089c <Get_Key+0x2e0>)
 80005f6:	f001 fd37 	bl	8002068 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00b      	beq.n	8000618 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000600:	bf00      	nop
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	48a5      	ldr	r0, [pc, #660]	; (800089c <Get_Key+0x2e0>)
 8000606:	f001 fd2f 	bl	8002068 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f8      	bne.n	8000602 <Get_Key+0x46>
		key='1';
 8000610:	4ba3      	ldr	r3, [pc, #652]	; (80008a0 <Get_Key+0x2e4>)
 8000612:	2231      	movs	r2, #49	; 0x31
 8000614:	701a      	strb	r2, [r3, #0]
		break;
 8000616:	e177      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	48a2      	ldr	r0, [pc, #648]	; (80008a4 <Get_Key+0x2e8>)
 800061c:	f001 fd24 	bl	8002068 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00b      	beq.n	800063e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000626:	bf00      	nop
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	489e      	ldr	r0, [pc, #632]	; (80008a4 <Get_Key+0x2e8>)
 800062c:	f001 fd1c 	bl	8002068 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f8      	bne.n	8000628 <Get_Key+0x6c>
		key='4';
 8000636:	4b9a      	ldr	r3, [pc, #616]	; (80008a0 <Get_Key+0x2e4>)
 8000638:	2234      	movs	r2, #52	; 0x34
 800063a:	701a      	strb	r2, [r3, #0]
		break;
 800063c:	e164      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4899      	ldr	r0, [pc, #612]	; (80008a8 <Get_Key+0x2ec>)
 8000644:	f001 fd10 	bl	8002068 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00c      	beq.n	8000668 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800064e:	bf00      	nop
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4894      	ldr	r0, [pc, #592]	; (80008a8 <Get_Key+0x2ec>)
 8000656:	f001 fd07 	bl	8002068 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f7      	bne.n	8000650 <Get_Key+0x94>
		key='7';
 8000660:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <Get_Key+0x2e4>)
 8000662:	2237      	movs	r2, #55	; 0x37
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e14f      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	488e      	ldr	r0, [pc, #568]	; (80008a8 <Get_Key+0x2ec>)
 800066e:	f001 fcfb 	bl	8002068 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00c      	beq.n	8000692 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000678:	bf00      	nop
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	488a      	ldr	r0, [pc, #552]	; (80008a8 <Get_Key+0x2ec>)
 8000680:	f001 fcf2 	bl	8002068 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <Get_Key+0xbe>
		key='*';
 800068a:	4b85      	ldr	r3, [pc, #532]	; (80008a0 <Get_Key+0x2e4>)
 800068c:	222a      	movs	r2, #42	; 0x2a
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e13a      	b.n	8000908 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4880      	ldr	r0, [pc, #512]	; (800089c <Get_Key+0x2e0>)
 800069a:	f001 fcfd 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	487e      	ldr	r0, [pc, #504]	; (800089c <Get_Key+0x2e0>)
 80006a4:	f001 fcf8 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	487b      	ldr	r0, [pc, #492]	; (800089c <Get_Key+0x2e0>)
 80006ae:	f001 fcf3 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4879      	ldr	r0, [pc, #484]	; (800089c <Get_Key+0x2e0>)
 80006b8:	f001 fcee 	bl	8002098 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4877      	ldr	r0, [pc, #476]	; (800089c <Get_Key+0x2e0>)
 80006c0:	f001 fcd2 	bl	8002068 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00b      	beq.n	80006e2 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ca:	bf00      	nop
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4873      	ldr	r0, [pc, #460]	; (800089c <Get_Key+0x2e0>)
 80006d0:	f001 fcca 	bl	8002068 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f8      	bne.n	80006cc <Get_Key+0x110>
		key='2';
 80006da:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <Get_Key+0x2e4>)
 80006dc:	2232      	movs	r2, #50	; 0x32
 80006de:	701a      	strb	r2, [r3, #0]
		break;
 80006e0:	e112      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	486f      	ldr	r0, [pc, #444]	; (80008a4 <Get_Key+0x2e8>)
 80006e6:	f001 fcbf 	bl	8002068 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00b      	beq.n	8000708 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006f0:	bf00      	nop
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	486b      	ldr	r0, [pc, #428]	; (80008a4 <Get_Key+0x2e8>)
 80006f6:	f001 fcb7 	bl	8002068 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f8      	bne.n	80006f2 <Get_Key+0x136>
		key='5';
 8000700:	4b67      	ldr	r3, [pc, #412]	; (80008a0 <Get_Key+0x2e4>)
 8000702:	2235      	movs	r2, #53	; 0x35
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	e0ff      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	4866      	ldr	r0, [pc, #408]	; (80008a8 <Get_Key+0x2ec>)
 800070e:	f001 fcab 	bl	8002068 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00c      	beq.n	8000732 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000718:	bf00      	nop
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4862      	ldr	r0, [pc, #392]	; (80008a8 <Get_Key+0x2ec>)
 8000720:	f001 fca2 	bl	8002068 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f7      	bne.n	800071a <Get_Key+0x15e>
		key='8';
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <Get_Key+0x2e4>)
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	701a      	strb	r2, [r3, #0]
		break;
 8000730:	e0ea      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	485c      	ldr	r0, [pc, #368]	; (80008a8 <Get_Key+0x2ec>)
 8000738:	f001 fc96 	bl	8002068 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00c      	beq.n	800075c <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000742:	bf00      	nop
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4857      	ldr	r0, [pc, #348]	; (80008a8 <Get_Key+0x2ec>)
 800074a:	f001 fc8d 	bl	8002068 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f7      	bne.n	8000744 <Get_Key+0x188>
		key='0';
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <Get_Key+0x2e4>)
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	701a      	strb	r2, [r3, #0]
		break;
 800075a:	e0d5      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	484e      	ldr	r0, [pc, #312]	; (800089c <Get_Key+0x2e0>)
 8000764:	f001 fc98 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	484b      	ldr	r0, [pc, #300]	; (800089c <Get_Key+0x2e0>)
 800076e:	f001 fc93 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	4849      	ldr	r0, [pc, #292]	; (800089c <Get_Key+0x2e0>)
 8000778:	f001 fc8e 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	4846      	ldr	r0, [pc, #280]	; (800089c <Get_Key+0x2e0>)
 8000782:	f001 fc89 	bl	8002098 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4844      	ldr	r0, [pc, #272]	; (800089c <Get_Key+0x2e0>)
 800078a:	f001 fc6d 	bl	8002068 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00b      	beq.n	80007ac <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000794:	bf00      	nop
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4840      	ldr	r0, [pc, #256]	; (800089c <Get_Key+0x2e0>)
 800079a:	f001 fc65 	bl	8002068 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f8      	bne.n	8000796 <Get_Key+0x1da>
		key='3';
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <Get_Key+0x2e4>)
 80007a6:	2233      	movs	r2, #51	; 0x33
 80007a8:	701a      	strb	r2, [r3, #0]
		break;
 80007aa:	e0ad      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	483d      	ldr	r0, [pc, #244]	; (80008a4 <Get_Key+0x2e8>)
 80007b0:	f001 fc5a 	bl	8002068 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ba:	bf00      	nop
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <Get_Key+0x2e8>)
 80007c0:	f001 fc52 	bl	8002068 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <Get_Key+0x200>
		key='6';
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <Get_Key+0x2e4>)
 80007cc:	2236      	movs	r2, #54	; 0x36
 80007ce:	701a      	strb	r2, [r3, #0]
		break;
 80007d0:	e09a      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4834      	ldr	r0, [pc, #208]	; (80008a8 <Get_Key+0x2ec>)
 80007d8:	f001 fc46 	bl	8002068 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00c      	beq.n	80007fc <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007e2:	bf00      	nop
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <Get_Key+0x2ec>)
 80007ea:	f001 fc3d 	bl	8002068 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f7      	bne.n	80007e4 <Get_Key+0x228>
		key='9';
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <Get_Key+0x2e4>)
 80007f6:	2239      	movs	r2, #57	; 0x39
 80007f8:	701a      	strb	r2, [r3, #0]
		break;
 80007fa:	e085      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <Get_Key+0x2ec>)
 8000802:	f001 fc31 	bl	8002068 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	4825      	ldr	r0, [pc, #148]	; (80008a8 <Get_Key+0x2ec>)
 8000814:	f001 fc28 	bl	8002068 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x252>
		key='#';
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <Get_Key+0x2e4>)
 8000820:	2223      	movs	r2, #35	; 0x23
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e070      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <Get_Key+0x2e0>)
 800082e:	f001 fc33 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <Get_Key+0x2e0>)
 8000838:	f001 fc2e 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <Get_Key+0x2e0>)
 8000842:	f001 fc29 	bl	8002098 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <Get_Key+0x2e0>)
 800084c:	f001 fc24 	bl	8002098 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <Get_Key+0x2e0>)
 8000854:	f001 fc08 	bl	8002068 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800085e:	bf00      	nop
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <Get_Key+0x2e0>)
 8000864:	f001 fc00 	bl	8002068 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f8      	bne.n	8000860 <Get_Key+0x2a4>
		key='A';
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <Get_Key+0x2e4>)
 8000870:	2241      	movs	r2, #65	; 0x41
 8000872:	701a      	strb	r2, [r3, #0]
		break;
 8000874:	e048      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <Get_Key+0x2e8>)
 800087a:	f001 fbf5 	bl	8002068 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000884:	bf00      	nop
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <Get_Key+0x2e8>)
 800088a:	f001 fbed 	bl	8002068 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f8      	bne.n	8000886 <Get_Key+0x2ca>
		key='B';
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <Get_Key+0x2e4>)
 8000896:	2242      	movs	r2, #66	; 0x42
 8000898:	701a      	strb	r2, [r3, #0]
		break;
 800089a:	e035      	b.n	8000908 <Get_Key+0x34c>
 800089c:	40020400 	.word	0x40020400
 80008a0:	20000088 	.word	0x20000088
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <Get_Key+0x360>)
 80008b2:	f001 fbd9 	bl	8002068 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008bc:	bf00      	nop
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <Get_Key+0x360>)
 80008c4:	f001 fbd0 	bl	8002068 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f7      	bne.n	80008be <Get_Key+0x302>
		key='C';
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <Get_Key+0x364>)
 80008d0:	2243      	movs	r2, #67	; 0x43
 80008d2:	701a      	strb	r2, [r3, #0]
		break;
 80008d4:	e018      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <Get_Key+0x360>)
 80008dc:	f001 fbc4 	bl	8002068 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00c      	beq.n	8000900 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008e6:	bf00      	nop
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <Get_Key+0x360>)
 80008ee:	f001 fbbb 	bl	8002068 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f7      	bne.n	80008e8 <Get_Key+0x32c>
		key='D';
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Get_Key+0x364>)
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	701a      	strb	r2, [r3, #0]
		break;
 80008fe:	e003      	b.n	8000908 <Get_Key+0x34c>
	while(done)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f47f ae60 	bne.w	80005c8 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000908:	2120      	movs	r1, #32
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <Get_Key+0x360>)
 800090c:	f001 fbdd 	bl	80020ca <HAL_GPIO_TogglePin>
	return(key);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Get_Key+0x364>)
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020000 	.word	0x40020000
 8000920:	20000088 	.word	0x20000088

08000924 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <vApplicationGetIdleTaskMemory+0x2c>)
 8000934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <vApplicationGetIdleTaskMemory+0x30>)
 800093a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2000008c 	.word	0x2000008c
 8000954:	200000e0 	.word	0x200000e0

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b0aa      	sub	sp, #168	; 0xa8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f001 f8a7 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f8c1 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 f985 	bl	8000c74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096a:	f000 f959 	bl	8000c20 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800096e:	f000 f929 	bl	8000bc4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000972:	f000 fc13 	bl	800119c <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fd79 	bl	8001470 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("NOT ARMED", &Font_11x18, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	494a      	ldr	r1, [pc, #296]	; (8000aac <main+0x154>)
 8000982:	484b      	ldr	r0, [pc, #300]	; (8000ab0 <main+0x158>)
 8000984:	f000 fe0a 	bl	800159c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000988:	f000 fccc 	bl	8001324 <SSD1306_UpdateScreen>
    HAL_Delay (5000);
 800098c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000990:	f001 f8d0 	bl	8001b34 <HAL_Delay>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000994:	2000      	movs	r0, #0
 8000996:	f000 fcf3 	bl	8001380 <SSD1306_Fill>
    SSD1306_GotoXY (0,0);
 800099a:	2100      	movs	r1, #0
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fd67 	bl	8001470 <SSD1306_GotoXY>
    SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	4941      	ldr	r1, [pc, #260]	; (8000aac <main+0x154>)
 80009a6:	4843      	ldr	r0, [pc, #268]	; (8000ab4 <main+0x15c>)
 80009a8:	f000 fdf8 	bl	800159c <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 80009ac:	211e      	movs	r1, #30
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fd5e 	bl	8001470 <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 80009b4:	f000 fcb6 	bl	8001324 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 80009b8:	f000 fcb4 	bl	8001324 <SSD1306_UpdateScreen>
    HAL_Delay (500);
 80009bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c0:	f001 f8b8 	bl	8001b34 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <main+0x160>)
 80009c6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80009ca:	461d      	mov	r5, r3
 80009cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fe41 	bl	8004666 <osThreadCreate>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a35      	ldr	r2, [pc, #212]	; (8000abc <main+0x164>)
 80009e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of NumberpadTask */
  osThreadDef(NumberpadTask, Numberpad, osPriorityNormal, 0, 128);
 80009ea:	4b35      	ldr	r3, [pc, #212]	; (8000ac0 <main+0x168>)
 80009ec:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009f0:	461d      	mov	r5, r3
 80009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NumberpadTaskHandle = osThreadCreate(osThread(NumberpadTask), NULL);
 80009fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fe2e 	bl	8004666 <osThreadCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a2d      	ldr	r2, [pc, #180]	; (8000ac4 <main+0x16c>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCDTask */
  osThreadDef(LCDTask, LCDDisplay, osPriorityNormal, 0, 128);
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <main+0x170>)
 8000a12:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a16:	461d      	mov	r5, r3
 8000a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDTaskHandle = osThreadCreate(osThread(LCDTask), NULL);
 8000a24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 fe1b 	bl	8004666 <osThreadCreate>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <main+0x174>)
 8000a34:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDTask */
  osThreadDef(LEDTask, RedGreenLED, osPriorityNormal, 0, 128);
 8000a36:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <main+0x178>)
 8000a38:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTaskHandle = osThreadCreate(osThread(LEDTask), NULL);
 8000a4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fe08 	bl	8004666 <osThreadCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <main+0x17c>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Buzzer */
  osThreadDef(Buzzer, StartBuzzer, osPriorityNormal, 0, 128);
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <main+0x180>)
 8000a5e:	f107 041c 	add.w	r4, r7, #28
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BuzzerHandle = osThreadCreate(osThread(Buzzer), NULL);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fdf5 	bl	8004666 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <main+0x184>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotionDetector */
  osThreadDef(MotionDetector, StartMotionDetector, osPriorityNormal, 0, 128);
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <main+0x188>)
 8000a84:	463c      	mov	r4, r7
 8000a86:	461d      	mov	r5, r3
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotionDetectorHandle = osThreadCreate(osThread(MotionDetector), NULL);
 8000a94:	463b      	mov	r3, r7
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f003 fde4 	bl	8004666 <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <main+0x18c>)
 8000aa2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000aa4:	f003 fdd8 	bl	8004658 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x150>
 8000aaa:	bf00      	nop
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	0800642c 	.word	0x0800642c
 8000ab4:	08006438 	.word	0x08006438
 8000ab8:	08006450 	.word	0x08006450
 8000abc:	2000037c 	.word	0x2000037c
 8000ac0:	0800647c 	.word	0x0800647c
 8000ac4:	20000380 	.word	0x20000380
 8000ac8:	080064a0 	.word	0x080064a0
 8000acc:	20000384 	.word	0x20000384
 8000ad0:	080064c4 	.word	0x080064c4
 8000ad4:	20000388 	.word	0x20000388
 8000ad8:	080064e8 	.word	0x080064e8
 8000adc:	2000038c 	.word	0x2000038c
 8000ae0:	08006514 	.word	0x08006514
 8000ae4:	20000390 	.word	0x20000390

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	; 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2234      	movs	r2, #52	; 0x34
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f005 f800 	bl	8005afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <SystemClock_Config+0xd4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a29      	ldr	r2, [pc, #164]	; (8000bbc <SystemClock_Config+0xd4>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <SystemClock_Config+0xd4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <SystemClock_Config+0xd8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b34:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <SystemClock_Config+0xd8>)
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <SystemClock_Config+0xd8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b50:	2310      	movs	r3, #16
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b54:	2302      	movs	r3, #2
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b66:	2304      	movs	r3, #4
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fc0a 	bl	8003390 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b82:	f000 fb05 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 f878 	bl	8002c98 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bae:	f000 faef 	bl	8001190 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	; 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <MX_I2C1_Init+0x54>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <MX_I2C1_Init+0x58>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_I2C1_Init+0x50>)
 8000c02:	f001 fa7d 	bl	8002100 <HAL_I2C_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c0c:	f000 fac0 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200002e0 	.word	0x200002e0
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	00061a80 	.word	0x00061a80

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f003 f8da 	bl	8003e10 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 fa95 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000334 	.word	0x20000334
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a42      	ldr	r2, [pc, #264]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a3b      	ldr	r2, [pc, #236]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a34      	ldr	r2, [pc, #208]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <MX_GPIO_Init+0x128>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4828      	ldr	r0, [pc, #160]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000d00:	f001 f9ca 	bl	8002098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|KC0_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000d04:	2200      	movs	r2, #0
 8000d06:	f24e 413a 	movw	r1, #58426	; 0xe43a
 8000d0a:	4826      	ldr	r0, [pc, #152]	; (8000da4 <MX_GPIO_Init+0x130>)
 8000d0c:	f001 f9c4 	bl	8002098 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d10:	2320      	movs	r3, #32
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	481e      	ldr	r0, [pc, #120]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000d28:	f001 f80a 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 KC0_Pin PB13 PB14
                           PB15 KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|KC0_Pin|GPIO_PIN_13|GPIO_PIN_14
 8000d2c:	f24e 433a 	movw	r3, #58426	; 0xe43a
 8000d30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|KC3_Pin|KC1_Pin|KC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4817      	ldr	r0, [pc, #92]	; (8000da4 <MX_GPIO_Init+0x130>)
 8000d46:	f000 fffb 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4812      	ldr	r0, [pc, #72]	; (8000da8 <MX_GPIO_Init+0x134>)
 8000d5e:	f000 ffef 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000d62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480a      	ldr	r0, [pc, #40]	; (8000da0 <MX_GPIO_Init+0x12c>)
 8000d78:	f000 ffe2 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000d7c:	2340      	movs	r3, #64	; 0x40
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_GPIO_Init+0x130>)
 8000d90:	f000 ffd6 	bl	8001d40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40020800 	.word	0x40020800

08000dac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f003 fca2 	bl	80046fe <osDelay>
 8000dba:	e7fb      	b.n	8000db4 <StartDefaultTask+0x8>

08000dbc <Numberpad>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Numberpad */
void Numberpad(void const * argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Numberpad */
  /* Infinite loop */
  for(;;)
  {
	  key = Get_Key();
 8000dc4:	f7ff fbfa 	bl	80005bc <Get_Key>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b74      	ldr	r3, [pc, #464]	; (8000fa0 <Numberpad+0x1e4>)
 8000dce:	701a      	strb	r2, [r3, #0]
	  sprintf(hold, "%c", key);
 8000dd0:	4b73      	ldr	r3, [pc, #460]	; (8000fa0 <Numberpad+0x1e4>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4973      	ldr	r1, [pc, #460]	; (8000fa4 <Numberpad+0x1e8>)
 8000dd8:	4873      	ldr	r0, [pc, #460]	; (8000fa8 <Numberpad+0x1ec>)
 8000dda:	f004 fe6f 	bl	8005abc <siprintf>
	  //HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100);

	  password[idx] = key;
 8000dde:	4b73      	ldr	r3, [pc, #460]	; (8000fac <Numberpad+0x1f0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a6f      	ldr	r2, [pc, #444]	; (8000fa0 <Numberpad+0x1e4>)
 8000de4:	7811      	ldrb	r1, [r2, #0]
 8000de6:	4a72      	ldr	r2, [pc, #456]	; (8000fb0 <Numberpad+0x1f4>)
 8000de8:	54d1      	strb	r1, [r2, r3]
	  idx++;
 8000dea:	4b70      	ldr	r3, [pc, #448]	; (8000fac <Numberpad+0x1f0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4a6e      	ldr	r2, [pc, #440]	; (8000fac <Numberpad+0x1f0>)
 8000df2:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)idx, idx, 100);
 8000df4:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <Numberpad+0x1f0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4b6c      	ldr	r3, [pc, #432]	; (8000fac <Numberpad+0x1f0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	486c      	ldr	r0, [pc, #432]	; (8000fb4 <Numberpad+0x1f8>)
 8000e04:	f003 f854 	bl	8003eb0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)password, strlen(password), 100);
 8000e08:	4869      	ldr	r0, [pc, #420]	; (8000fb0 <Numberpad+0x1f4>)
 8000e0a:	f7ff fa01 	bl	8000210 <strlen>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	4966      	ldr	r1, [pc, #408]	; (8000fb0 <Numberpad+0x1f4>)
 8000e16:	4867      	ldr	r0, [pc, #412]	; (8000fb4 <Numberpad+0x1f8>)
 8000e18:	f003 f84a 	bl	8003eb0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)space, strlen(space), 100);
 8000e1c:	4866      	ldr	r0, [pc, #408]	; (8000fb8 <Numberpad+0x1fc>)
 8000e1e:	f7ff f9f7 	bl	8000210 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	2364      	movs	r3, #100	; 0x64
 8000e28:	4963      	ldr	r1, [pc, #396]	; (8000fb8 <Numberpad+0x1fc>)
 8000e2a:	4862      	ldr	r0, [pc, #392]	; (8000fb4 <Numberpad+0x1f8>)
 8000e2c:	f003 f840 	bl	8003eb0 <HAL_UART_Transmit>

	  if (!isArmed) {
 8000e30:	4b62      	ldr	r3, [pc, #392]	; (8000fbc <Numberpad+0x200>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d02e      	beq.n	8000e9c <Numberpad+0xe0>
		  if (idx == 6) {
 8000e3e:	4b5b      	ldr	r3, [pc, #364]	; (8000fac <Numberpad+0x1f0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d1be      	bne.n	8000dc4 <Numberpad+0x8>
			  char out[] = "success";
 8000e46:	4a5e      	ldr	r2, [pc, #376]	; (8000fc0 <Numberpad+0x204>)
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e50:	e883 0003 	stmia.w	r3, {r0, r1}
			  HAL_UART_Transmit(&huart2, (uint8_t *)out, strlen(out), 100);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff f9d9 	bl	8000210 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	f107 0110 	add.w	r1, r7, #16
 8000e66:	2364      	movs	r3, #100	; 0x64
 8000e68:	4852      	ldr	r0, [pc, #328]	; (8000fb4 <Numberpad+0x1f8>)
 8000e6a:	f003 f821 	bl	8003eb0 <HAL_UART_Transmit>
			  strcpy(storedPassword, password);
 8000e6e:	4950      	ldr	r1, [pc, #320]	; (8000fb0 <Numberpad+0x1f4>)
 8000e70:	4854      	ldr	r0, [pc, #336]	; (8000fc4 <Numberpad+0x208>)
 8000e72:	f004 fe77 	bl	8005b64 <strcpy>
			  memset(password, 0, sizeof(password));
 8000e76:	2206      	movs	r2, #6
 8000e78:	2100      	movs	r1, #0
 8000e7a:	484d      	ldr	r0, [pc, #308]	; (8000fb0 <Numberpad+0x1f4>)
 8000e7c:	f004 fe3e 	bl	8005afc <memset>
			  stateDisplayed = false;
 8000e80:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <Numberpad+0x20c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
			  isArmed = true;
 8000e86:	4b4d      	ldr	r3, [pc, #308]	; (8000fbc <Numberpad+0x200>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
			  HAL_Delay (500);
 8000e8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e90:	f000 fe50 	bl	8001b34 <HAL_Delay>
			  idx = 0;
 8000e94:	4b45      	ldr	r3, [pc, #276]	; (8000fac <Numberpad+0x1f0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e793      	b.n	8000dc4 <Numberpad+0x8>
		  }
	  } else {
		  isArmed = true;
 8000e9c:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <Numberpad+0x200>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
		  if (idx == 6) {
 8000ea2:	4b42      	ldr	r3, [pc, #264]	; (8000fac <Numberpad+0x1f0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d16d      	bne.n	8000f86 <Numberpad+0x1ca>
			  HAL_UART_Transmit(&huart2, (uint8_t *)storedPassword, strlen(storedPassword), 100);
 8000eaa:	4846      	ldr	r0, [pc, #280]	; (8000fc4 <Numberpad+0x208>)
 8000eac:	f7ff f9b0 	bl	8000210 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	2364      	movs	r3, #100	; 0x64
 8000eb6:	4943      	ldr	r1, [pc, #268]	; (8000fc4 <Numberpad+0x208>)
 8000eb8:	483e      	ldr	r0, [pc, #248]	; (8000fb4 <Numberpad+0x1f8>)
 8000eba:	f002 fff9 	bl	8003eb0 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t *)space, strlen(space), 100);
 8000ebe:	483e      	ldr	r0, [pc, #248]	; (8000fb8 <Numberpad+0x1fc>)
 8000ec0:	f7ff f9a6 	bl	8000210 <strlen>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	493b      	ldr	r1, [pc, #236]	; (8000fb8 <Numberpad+0x1fc>)
 8000ecc:	4839      	ldr	r0, [pc, #228]	; (8000fb4 <Numberpad+0x1f8>)
 8000ece:	f002 ffef 	bl	8003eb0 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (uint8_t *)password, strlen(password), 100);
 8000ed2:	4837      	ldr	r0, [pc, #220]	; (8000fb0 <Numberpad+0x1f4>)
 8000ed4:	f7ff f99c 	bl	8000210 <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	4934      	ldr	r1, [pc, #208]	; (8000fb0 <Numberpad+0x1f4>)
 8000ee0:	4834      	ldr	r0, [pc, #208]	; (8000fb4 <Numberpad+0x1f8>)
 8000ee2:	f002 ffe5 	bl	8003eb0 <HAL_UART_Transmit>

			  bool same = true;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	77fb      	strb	r3, [r7, #31]
			  for (int i = 0; i < 6; i++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	e00f      	b.n	8000f10 <Numberpad+0x154>
				  if (password[i] != storedPassword[i]) {
 8000ef0:	4a2f      	ldr	r2, [pc, #188]	; (8000fb0 <Numberpad+0x1f4>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	4932      	ldr	r1, [pc, #200]	; (8000fc4 <Numberpad+0x208>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	440b      	add	r3, r1
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d002      	beq.n	8000f0a <Numberpad+0x14e>
					  same = false;
 8000f04:	2300      	movs	r3, #0
 8000f06:	77fb      	strb	r3, [r7, #31]
					  break;
 8000f08:	e005      	b.n	8000f16 <Numberpad+0x15a>
			  for (int i = 0; i < 6; i++) {
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	ddec      	ble.n	8000ef0 <Numberpad+0x134>
				  }
			  }

			  if (same) {
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d02b      	beq.n	8000f74 <Numberpad+0x1b8>
				  char out[] = "success";
 8000f1c:	4a28      	ldr	r2, [pc, #160]	; (8000fc0 <Numberpad+0x204>)
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f26:	e883 0003 	stmia.w	r3, {r0, r1}
				  HAL_UART_Transmit(&huart2, (uint8_t *)out, strlen(out), 100);
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f96e 	bl	8000210 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	f107 0108 	add.w	r1, r7, #8
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	481d      	ldr	r0, [pc, #116]	; (8000fb4 <Numberpad+0x1f8>)
 8000f40:	f002 ffb6 	bl	8003eb0 <HAL_UART_Transmit>
				  memset(password, 0, sizeof(password));
 8000f44:	2206      	movs	r2, #6
 8000f46:	2100      	movs	r1, #0
 8000f48:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <Numberpad+0x1f4>)
 8000f4a:	f004 fdd7 	bl	8005afc <memset>
				  memset(storedPassword, 0, sizeof(storedPassword));
 8000f4e:	2206      	movs	r2, #6
 8000f50:	2100      	movs	r1, #0
 8000f52:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <Numberpad+0x208>)
 8000f54:	f004 fdd2 	bl	8005afc <memset>
				  stateDisplayed = false;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <Numberpad+0x20c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
				  isArmed = false;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <Numberpad+0x200>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
				  HAL_Delay (500);
 8000f64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f68:	f000 fde4 	bl	8001b34 <HAL_Delay>
				  idx = 0;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <Numberpad+0x1f0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e727      	b.n	8000dc4 <Numberpad+0x8>

			  } else {
				  idx = 0;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <Numberpad+0x1f0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
				  memset(password, 0, sizeof(password));
 8000f7a:	2206      	movs	r2, #6
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <Numberpad+0x1f4>)
 8000f80:	f004 fdbc 	bl	8005afc <memset>
 8000f84:	e71e      	b.n	8000dc4 <Numberpad+0x8>
			  }
		  } else if (idx > 6){
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <Numberpad+0x1f0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	f77f af1a 	ble.w	8000dc4 <Numberpad+0x8>
			  isArmed = true;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <Numberpad+0x200>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
			  idx = 0;
 8000f96:	4b05      	ldr	r3, [pc, #20]	; (8000fac <Numberpad+0x1f0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
	  key = Get_Key();
 8000f9c:	e712      	b.n	8000dc4 <Numberpad+0x8>
 8000f9e:	bf00      	nop
 8000fa0:	20000088 	.word	0x20000088
 8000fa4:	08006530 	.word	0x08006530
 8000fa8:	20000394 	.word	0x20000394
 8000fac:	200003a8 	.word	0x200003a8
 8000fb0:	20000398 	.word	0x20000398
 8000fb4:	20000334 	.word	0x20000334
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	200003a6 	.word	0x200003a6
 8000fc0:	08006534 	.word	0x08006534
 8000fc4:	200003a0 	.word	0x200003a0
 8000fc8:	200003ac 	.word	0x200003ac

08000fcc <LCDDisplay>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDDisplay */
void LCDDisplay(void const * argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
//			  SSD1306_Puts ("*", &Font_11x18, 1);
//		  }
//	  }

//	  SSD1306_Puts (hold, &Font_11x18, 1);
	  SSD1306_UpdateScreen();
 8000fd4:	f000 f9a6 	bl	8001324 <SSD1306_UpdateScreen>
	  HAL_Delay (500);
 8000fd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fdc:	f000 fdaa 	bl	8001b34 <HAL_Delay>

	  if (!stateDisplayed) {
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <LCDDisplay+0xbc>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f083 0301 	eor.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d020      	beq.n	8001030 <LCDDisplay+0x64>
		  if (isArmed) {
 8000fee:	4b27      	ldr	r3, [pc, #156]	; (800108c <LCDDisplay+0xc0>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00c      	beq.n	8001010 <LCDDisplay+0x44>
			  SSD1306_GotoXY (0, 0);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 fa39 	bl	8001470 <SSD1306_GotoXY>
			  SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 f9be 	bl	8001380 <SSD1306_Fill>
			  SSD1306_Puts ("ARMED", &Font_11x18, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	4922      	ldr	r1, [pc, #136]	; (8001090 <LCDDisplay+0xc4>)
 8001008:	4822      	ldr	r0, [pc, #136]	; (8001094 <LCDDisplay+0xc8>)
 800100a:	f000 fac7 	bl	800159c <SSD1306_Puts>
 800100e:	e00b      	b.n	8001028 <LCDDisplay+0x5c>
//		  		stateDisplayed = true;
		  } else {
			  SSD1306_GotoXY (0, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2000      	movs	r0, #0
 8001014:	f000 fa2c 	bl	8001470 <SSD1306_GotoXY>
			  SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001018:	2000      	movs	r0, #0
 800101a:	f000 f9b1 	bl	8001380 <SSD1306_Fill>
			  SSD1306_Puts ("DISARMED", &Font_11x18, 1);
 800101e:	2201      	movs	r2, #1
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <LCDDisplay+0xc4>)
 8001022:	481d      	ldr	r0, [pc, #116]	; (8001098 <LCDDisplay+0xcc>)
 8001024:	f000 faba 	bl	800159c <SSD1306_Puts>
		  }
		  stateDisplayed = true;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <LCDDisplay+0xbc>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	e7d1      	b.n	8000fd4 <LCDDisplay+0x8>
	  } else {
		  SSD1306_GotoXY (0,0);
 8001030:	2100      	movs	r1, #0
 8001032:	2000      	movs	r0, #0
 8001034:	f000 fa1c 	bl	8001470 <SSD1306_GotoXY>
		  SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	4915      	ldr	r1, [pc, #84]	; (8001090 <LCDDisplay+0xc4>)
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <LCDDisplay+0xd0>)
 800103e:	f000 faad 	bl	800159c <SSD1306_Puts>
		  SSD1306_GotoXY (0, 30);
 8001042:	211e      	movs	r1, #30
 8001044:	2000      	movs	r0, #0
 8001046:	f000 fa13 	bl	8001470 <SSD1306_GotoXY>
		  SSD1306_UpdateScreen();
 800104a:	f000 f96b 	bl	8001324 <SSD1306_UpdateScreen>
		  for (int i = 0; i < idx; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e012      	b.n	800107a <LCDDisplay+0xae>
			  if ((idx != 0) && (!isArmed)) {
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <LCDDisplay+0xd4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00b      	beq.n	8001074 <LCDDisplay+0xa8>
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <LCDDisplay+0xc0>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <LCDDisplay+0xa8>
				  SSD1306_Puts ("*", &Font_11x18, 1);
 800106a:	2201      	movs	r2, #1
 800106c:	4908      	ldr	r1, [pc, #32]	; (8001090 <LCDDisplay+0xc4>)
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LCDDisplay+0xd8>)
 8001070:	f000 fa94 	bl	800159c <SSD1306_Puts>
		  for (int i = 0; i < idx; i++) {
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <LCDDisplay+0xd4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbe7      	blt.n	8001054 <LCDDisplay+0x88>
	  SSD1306_UpdateScreen();
 8001084:	e7a6      	b.n	8000fd4 <LCDDisplay+0x8>
 8001086:	bf00      	nop
 8001088:	200003ac 	.word	0x200003ac
 800108c:	200003a6 	.word	0x200003a6
 8001090:	20000000 	.word	0x20000000
 8001094:	0800653c 	.word	0x0800653c
 8001098:	08006544 	.word	0x08006544
 800109c:	08006438 	.word	0x08006438
 80010a0:	200003a8 	.word	0x200003a8
 80010a4:	08006550 	.word	0x08006550

080010a8 <RedGreenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedGreenLED */
void RedGreenLED(void const * argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedGreenLED */
  /* Infinite loop */
  for(;;)
  {
	  if(!isArmed) {
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <RedGreenLED+0x4c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f083 0301 	eor.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00c      	beq.n	80010d8 <RedGreenLED+0x30>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <RedGreenLED+0x50>)
 80010c6:	f000 ffe7 	bl	8002098 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <RedGreenLED+0x50>)
 80010d2:	f000 ffe1 	bl	8002098 <HAL_GPIO_WritePin>
 80010d6:	e7eb      	b.n	80010b0 <RedGreenLED+0x8>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <RedGreenLED+0x50>)
 80010e0:	f000 ffda 	bl	8002098 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <RedGreenLED+0x50>)
 80010ec:	f000 ffd4 	bl	8002098 <HAL_GPIO_WritePin>
	  if(!isArmed) {
 80010f0:	e7de      	b.n	80010b0 <RedGreenLED+0x8>
 80010f2:	bf00      	nop
 80010f4:	200003a6 	.word	0x200003a6
 80010f8:	40020400 	.word	0x40020400

080010fc <StartBuzzer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBuzzer */
void StartBuzzer(void const * argument)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzer */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	2102      	movs	r1, #2
 8001108:	4801      	ldr	r0, [pc, #4]	; (8001110 <StartBuzzer+0x14>)
 800110a:	f000 ffc5 	bl	8002098 <HAL_GPIO_WritePin>
 800110e:	e7f9      	b.n	8001104 <StartBuzzer+0x8>
 8001110:	40020400 	.word	0x40020400

08001114 <StartMotionDetector>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionDetector */
void StartMotionDetector(void const * argument)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotionDetector */
  /* Infinite loop */
  for(;;)
  {
	  pirState = HAL_GPIO_ReadPin(PIR_PORT,GPIO_PIN_15);
 800111c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001120:	480f      	ldr	r0, [pc, #60]	; (8001160 <StartMotionDetector+0x4c>)
 8001122:	f000 ffa1 	bl	8002068 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <StartMotionDetector+0x50>)
 800112c:	701a      	strb	r2, [r3, #0]
	  if (pirState > 0){
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <StartMotionDetector+0x50>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00c      	beq.n	8001150 <StartMotionDetector+0x3c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113c:	480a      	ldr	r0, [pc, #40]	; (8001168 <StartMotionDetector+0x54>)
 800113e:	f000 ffab 	bl	8002098 <HAL_GPIO_WritePin>
		  if (pirState == 0){
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <StartMotionDetector+0x50>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <StartMotionDetector+0x3c>
			  pirState = 1;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <StartMotionDetector+0x50>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
		  }

	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <StartMotionDetector+0x54>)
 8001158:	f000 ff9e 	bl	8002098 <HAL_GPIO_WritePin>
	  pirState = HAL_GPIO_ReadPin(PIR_PORT,GPIO_PIN_15);
 800115c:	e7de      	b.n	800111c <StartMotionDetector+0x8>
 800115e:	bf00      	nop
 8001160:	40020000 	.word	0x40020000
 8001164:	200003ad 	.word	0x200003ad
 8001168:	40020400 	.word	0x40020400

0800116c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800117e:	f000 fcb9 	bl	8001af4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40001000 	.word	0x40001000

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	e7fe      	b.n	8001198 <Error_Handler+0x8>
	...

0800119c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80011a2:	f000 fa21 	bl	80015e8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011a6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80011aa:	2201      	movs	r2, #1
 80011ac:	2178      	movs	r1, #120	; 0x78
 80011ae:	485b      	ldr	r0, [pc, #364]	; (800131c <SSD1306_Init+0x180>)
 80011b0:	f001 f9e8 	bl	8002584 <HAL_I2C_IsDeviceReady>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	e0a9      	b.n	8001312 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80011be:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80011c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011c4:	e002      	b.n	80011cc <SSD1306_Init+0x30>
		p--;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011d2:	22ae      	movs	r2, #174	; 0xae
 80011d4:	2100      	movs	r1, #0
 80011d6:	2078      	movs	r0, #120	; 0x78
 80011d8:	f000 fa82 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80011dc:	2220      	movs	r2, #32
 80011de:	2100      	movs	r1, #0
 80011e0:	2078      	movs	r0, #120	; 0x78
 80011e2:	f000 fa7d 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011e6:	2210      	movs	r2, #16
 80011e8:	2100      	movs	r1, #0
 80011ea:	2078      	movs	r0, #120	; 0x78
 80011ec:	f000 fa78 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011f0:	22b0      	movs	r2, #176	; 0xb0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2078      	movs	r0, #120	; 0x78
 80011f6:	f000 fa73 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80011fa:	22c8      	movs	r2, #200	; 0xc8
 80011fc:	2100      	movs	r1, #0
 80011fe:	2078      	movs	r0, #120	; 0x78
 8001200:	f000 fa6e 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2078      	movs	r0, #120	; 0x78
 800120a:	f000 fa69 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800120e:	2210      	movs	r2, #16
 8001210:	2100      	movs	r1, #0
 8001212:	2078      	movs	r0, #120	; 0x78
 8001214:	f000 fa64 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001218:	2240      	movs	r2, #64	; 0x40
 800121a:	2100      	movs	r1, #0
 800121c:	2078      	movs	r0, #120	; 0x78
 800121e:	f000 fa5f 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001222:	2281      	movs	r2, #129	; 0x81
 8001224:	2100      	movs	r1, #0
 8001226:	2078      	movs	r0, #120	; 0x78
 8001228:	f000 fa5a 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800122c:	22ff      	movs	r2, #255	; 0xff
 800122e:	2100      	movs	r1, #0
 8001230:	2078      	movs	r0, #120	; 0x78
 8001232:	f000 fa55 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001236:	22a1      	movs	r2, #161	; 0xa1
 8001238:	2100      	movs	r1, #0
 800123a:	2078      	movs	r0, #120	; 0x78
 800123c:	f000 fa50 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001240:	22a6      	movs	r2, #166	; 0xa6
 8001242:	2100      	movs	r1, #0
 8001244:	2078      	movs	r0, #120	; 0x78
 8001246:	f000 fa4b 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800124a:	22a8      	movs	r2, #168	; 0xa8
 800124c:	2100      	movs	r1, #0
 800124e:	2078      	movs	r0, #120	; 0x78
 8001250:	f000 fa46 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001254:	223f      	movs	r2, #63	; 0x3f
 8001256:	2100      	movs	r1, #0
 8001258:	2078      	movs	r0, #120	; 0x78
 800125a:	f000 fa41 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800125e:	22a4      	movs	r2, #164	; 0xa4
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	; 0x78
 8001264:	f000 fa3c 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001268:	22d3      	movs	r2, #211	; 0xd3
 800126a:	2100      	movs	r1, #0
 800126c:	2078      	movs	r0, #120	; 0x78
 800126e:	f000 fa37 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	; 0x78
 8001278:	f000 fa32 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800127c:	22d5      	movs	r2, #213	; 0xd5
 800127e:	2100      	movs	r1, #0
 8001280:	2078      	movs	r0, #120	; 0x78
 8001282:	f000 fa2d 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001286:	22f0      	movs	r2, #240	; 0xf0
 8001288:	2100      	movs	r1, #0
 800128a:	2078      	movs	r0, #120	; 0x78
 800128c:	f000 fa28 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001290:	22d9      	movs	r2, #217	; 0xd9
 8001292:	2100      	movs	r1, #0
 8001294:	2078      	movs	r0, #120	; 0x78
 8001296:	f000 fa23 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800129a:	2222      	movs	r2, #34	; 0x22
 800129c:	2100      	movs	r1, #0
 800129e:	2078      	movs	r0, #120	; 0x78
 80012a0:	f000 fa1e 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012a4:	22da      	movs	r2, #218	; 0xda
 80012a6:	2100      	movs	r1, #0
 80012a8:	2078      	movs	r0, #120	; 0x78
 80012aa:	f000 fa19 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012ae:	2212      	movs	r2, #18
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	; 0x78
 80012b4:	f000 fa14 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012b8:	22db      	movs	r2, #219	; 0xdb
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	; 0x78
 80012be:	f000 fa0f 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012c2:	2220      	movs	r2, #32
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	; 0x78
 80012c8:	f000 fa0a 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012cc:	228d      	movs	r2, #141	; 0x8d
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	; 0x78
 80012d2:	f000 fa05 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012d6:	2214      	movs	r2, #20
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	; 0x78
 80012dc:	f000 fa00 	bl	80016e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012e0:	22af      	movs	r2, #175	; 0xaf
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	; 0x78
 80012e6:	f000 f9fb 	bl	80016e0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80012ea:	222e      	movs	r2, #46	; 0x2e
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	; 0x78
 80012f0:	f000 f9f6 	bl	80016e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f000 f843 	bl	8001380 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80012fa:	f000 f813 	bl	8001324 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <SSD1306_Init+0x184>)
 8001300:	2200      	movs	r2, #0
 8001302:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SSD1306_Init+0x184>)
 8001306:	2200      	movs	r2, #0
 8001308:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SSD1306_Init+0x184>)
 800130c:	2201      	movs	r2, #1
 800130e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200002e0 	.word	0x200002e0
 8001320:	200007b0 	.word	0x200007b0

08001324 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e01d      	b.n	800136c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	3b50      	subs	r3, #80	; 0x50
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	; 0x78
 800133c:	f000 f9d0 	bl	80016e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2078      	movs	r0, #120	; 0x78
 8001346:	f000 f9cb 	bl	80016e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800134a:	2210      	movs	r2, #16
 800134c:	2100      	movs	r1, #0
 800134e:	2078      	movs	r0, #120	; 0x78
 8001350:	f000 f9c6 	bl	80016e0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	01db      	lsls	r3, r3, #7
 8001358:	4a08      	ldr	r2, [pc, #32]	; (800137c <SSD1306_UpdateScreen+0x58>)
 800135a:	441a      	add	r2, r3
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	2078      	movs	r0, #120	; 0x78
 8001362:	f000 f957 	bl	8001614 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	3301      	adds	r3, #1
 800136a:	71fb      	strb	r3, [r7, #7]
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b07      	cmp	r3, #7
 8001370:	d9de      	bls.n	8001330 <SSD1306_UpdateScreen+0xc>
	}
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200003b0 	.word	0x200003b0

08001380 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <SSD1306_Fill+0x14>
 8001390:	2300      	movs	r3, #0
 8001392:	e000      	b.n	8001396 <SSD1306_Fill+0x16>
 8001394:	23ff      	movs	r3, #255	; 0xff
 8001396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139a:	4619      	mov	r1, r3
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <SSD1306_Fill+0x2c>)
 800139e:	f004 fbad 	bl	8005afc <memset>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200003b0 	.word	0x200003b0

080013b0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
 80013ba:	460b      	mov	r3, r1
 80013bc:	80bb      	strh	r3, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	70fb      	strb	r3, [r7, #3]
	if (
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	2b7f      	cmp	r3, #127	; 0x7f
 80013c6:	d848      	bhi.n	800145a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	2b3f      	cmp	r3, #63	; 0x3f
 80013cc:	d845      	bhi.n	800145a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <SSD1306_DrawPixel+0xb8>)
 80013d0:	791b      	ldrb	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d006      	beq.n	80013e4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d11a      	bne.n	8001420 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013ea:	88fa      	ldrh	r2, [r7, #6]
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	b298      	uxth	r0, r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	01db      	lsls	r3, r3, #7
 80013f6:	4413      	add	r3, r2
 80013f8:	4a1c      	ldr	r2, [pc, #112]	; (800146c <SSD1306_DrawPixel+0xbc>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	2101      	movs	r1, #1
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	b25b      	sxtb	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b259      	sxtb	r1, r3
 8001410:	88fa      	ldrh	r2, [r7, #6]
 8001412:	4603      	mov	r3, r0
 8001414:	01db      	lsls	r3, r3, #7
 8001416:	4413      	add	r3, r2
 8001418:	b2c9      	uxtb	r1, r1
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <SSD1306_DrawPixel+0xbc>)
 800141c:	54d1      	strb	r1, [r2, r3]
 800141e:	e01d      	b.n	800145c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001420:	88fa      	ldrh	r2, [r7, #6]
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	b298      	uxth	r0, r3
 8001428:	4603      	mov	r3, r0
 800142a:	01db      	lsls	r3, r3, #7
 800142c:	4413      	add	r3, r2
 800142e:	4a0f      	ldr	r2, [pc, #60]	; (800146c <SSD1306_DrawPixel+0xbc>)
 8001430:	5cd3      	ldrb	r3, [r2, r3]
 8001432:	b25a      	sxtb	r2, r3
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	b25b      	sxtb	r3, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	b25b      	sxtb	r3, r3
 8001446:	4013      	ands	r3, r2
 8001448:	b259      	sxtb	r1, r3
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	4603      	mov	r3, r0
 800144e:	01db      	lsls	r3, r3, #7
 8001450:	4413      	add	r3, r2
 8001452:	b2c9      	uxtb	r1, r1
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <SSD1306_DrawPixel+0xbc>)
 8001456:	54d1      	strb	r1, [r2, r3]
 8001458:	e000      	b.n	800145c <SSD1306_DrawPixel+0xac>
		return;
 800145a:	bf00      	nop
	}
}
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200007b0 	.word	0x200007b0
 800146c:	200003b0 	.word	0x200003b0

08001470 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	80fb      	strh	r3, [r7, #6]
 800147c:	4613      	mov	r3, r2
 800147e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <SSD1306_GotoXY+0x28>)
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <SSD1306_GotoXY+0x28>)
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	8053      	strh	r3, [r2, #2]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	200007b0 	.word	0x200007b0

0800149c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014ac:	4b3a      	ldr	r3, [pc, #232]	; (8001598 <SSD1306_Putc+0xfc>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
	if (
 80014b8:	2b7f      	cmp	r3, #127	; 0x7f
 80014ba:	dc07      	bgt.n	80014cc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <SSD1306_Putc+0xfc>)
 80014be:	885b      	ldrh	r3, [r3, #2]
 80014c0:	461a      	mov	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014c8:	2b3f      	cmp	r3, #63	; 0x3f
 80014ca:	dd01      	ble.n	80014d0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	e05e      	b.n	800158e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e04b      	b.n	800156e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3b20      	subs	r3, #32
 80014de:	6839      	ldr	r1, [r7, #0]
 80014e0:	7849      	ldrb	r1, [r1, #1]
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	440b      	add	r3, r1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	e030      	b.n	800155c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <SSD1306_Putc+0xfc>)
 800150c:	881a      	ldrh	r2, [r3, #0]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b298      	uxth	r0, r3
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <SSD1306_Putc+0xfc>)
 8001518:	885a      	ldrh	r2, [r3, #2]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	b29b      	uxth	r3, r3
 800151e:	4413      	add	r3, r2
 8001520:	b29b      	uxth	r3, r3
 8001522:	79ba      	ldrb	r2, [r7, #6]
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff ff43 	bl	80013b0 <SSD1306_DrawPixel>
 800152a:	e014      	b.n	8001556 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <SSD1306_Putc+0xfc>)
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b298      	uxth	r0, r3
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <SSD1306_Putc+0xfc>)
 800153a:	885a      	ldrh	r2, [r3, #2]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4413      	add	r3, r2
 8001542:	b299      	uxth	r1, r3
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf0c      	ite	eq
 800154a:	2301      	moveq	r3, #1
 800154c:	2300      	movne	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	f7ff ff2d 	bl	80013b0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	3301      	adds	r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4293      	cmp	r3, r2
 8001566:	d3c8      	bcc.n	80014fa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3301      	adds	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	461a      	mov	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4293      	cmp	r3, r2
 8001578:	d3ad      	bcc.n	80014d6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <SSD1306_Putc+0xfc>)
 800157c:	881a      	ldrh	r2, [r3, #0]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <SSD1306_Putc+0xfc>)
 800158a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800158c:	79fb      	ldrb	r3, [r7, #7]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200007b0 	.word	0x200007b0

0800159c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	4613      	mov	r3, r2
 80015a8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015aa:	e012      	b.n	80015d2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	79fa      	ldrb	r2, [r7, #7]
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff71 	bl	800149c <SSD1306_Putc>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d002      	beq.n	80015cc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	e008      	b.n	80015de <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1e8      	bne.n	80015ac <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	781b      	ldrb	r3, [r3, #0]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <ssd1306_I2C_Init+0x28>)
 80015f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015f2:	e002      	b.n	80015fa <ssd1306_I2C_Init+0x12>
		p--;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f9      	bne.n	80015f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	0003d090 	.word	0x0003d090

08001614 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b0c7      	sub	sp, #284	; 0x11c
 8001618:	af02      	add	r7, sp, #8
 800161a:	4604      	mov	r4, r0
 800161c:	4608      	mov	r0, r1
 800161e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001622:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001626:	600a      	str	r2, [r1, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800162e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001632:	4622      	mov	r2, r4
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800163a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800163e:	4602      	mov	r2, r0
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001646:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800164a:	460a      	mov	r2, r1
 800164c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800164e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001656:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800165a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800165e:	7812      	ldrb	r2, [r2, #0]
 8001660:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001668:	e015      	b.n	8001696 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800166a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800166e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001672:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	441a      	add	r2, r3
 800167a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800167e:	3301      	adds	r3, #1
 8001680:	7811      	ldrb	r1, [r2, #0]
 8001682:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001686:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800168a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800168c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001690:	3301      	adds	r3, #1
 8001692:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001696:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800169a:	b29b      	uxth	r3, r3
 800169c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80016a0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80016a4:	8812      	ldrh	r2, [r2, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d8df      	bhi.n	800166a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80016aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b299      	uxth	r1, r3
 80016b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f107 020c 	add.w	r2, r7, #12
 80016c8:	200a      	movs	r0, #10
 80016ca:	9000      	str	r0, [sp, #0]
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <ssd1306_I2C_WriteMulti+0xc8>)
 80016ce:	f000 fe5b 	bl	8002388 <HAL_I2C_Master_Transmit>
}
 80016d2:	bf00      	nop
 80016d4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd90      	pop	{r4, r7, pc}
 80016dc:	200002e0 	.word	0x200002e0

080016e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	460b      	mov	r3, r1
 80016ec:	71bb      	strb	r3, [r7, #6]
 80016ee:	4613      	mov	r3, r2
 80016f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016f2:	79bb      	ldrb	r3, [r7, #6]
 80016f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016f6:	797b      	ldrb	r3, [r7, #5]
 80016f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	b299      	uxth	r1, r3
 80016fe:	f107 020c 	add.w	r2, r7, #12
 8001702:	230a      	movs	r3, #10
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2302      	movs	r3, #2
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <ssd1306_I2C_Write+0x38>)
 800170a:	f000 fe3d 	bl	8002388 <HAL_I2C_Master_Transmit>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200002e0 	.word	0x200002e0

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_MspInit+0x54>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_MspInit+0x54>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_MspInit+0x54>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_MspInit+0x54>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <HAL_MspInit+0x54>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_MspInit+0x54>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	210f      	movs	r1, #15
 800175e:	f06f 0001 	mvn.w	r0, #1
 8001762:	f000 fac3 	bl	8001cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_I2C_MspInit+0x84>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12c      	bne.n	80017f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_I2C_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80017b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b8:	2312      	movs	r3, #18
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c4:	2304      	movs	r3, #4
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <HAL_I2C_MspInit+0x8c>)
 80017d0:	f000 fab6 	bl	8001d40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40005400 	.word	0x40005400
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020400 	.word	0x40020400

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_UART_MspInit+0x84>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12b      	bne.n	800187e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_UART_MspInit+0x88>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_UART_MspInit+0x88>)
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_UART_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_UART_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_UART_MspInit+0x88>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_UART_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800185e:	230c      	movs	r3, #12
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800186e:	2307      	movs	r3, #7
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_UART_MspInit+0x8c>)
 800187a:	f000 fa61 	bl	8001d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40004400 	.word	0x40004400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <HAL_InitTick+0xe4>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a32      	ldr	r2, [pc, #200]	; (8001978 <HAL_InitTick+0xe4>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_InitTick+0xe4>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018c0:	f107 0210 	add.w	r2, r7, #16
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fafe 	bl	8002ecc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d103      	bne.n	80018e2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018da:	f001 facf 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 80018de:	6378      	str	r0, [r7, #52]	; 0x34
 80018e0:	e004      	b.n	80018ec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018e2:	f001 facb 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 80018e6:	4603      	mov	r3, r0
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ee:	4a23      	ldr	r2, [pc, #140]	; (800197c <HAL_InitTick+0xe8>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	3b01      	subs	r3, #1
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_InitTick+0xec>)
 80018fc:	4a21      	ldr	r2, [pc, #132]	; (8001984 <HAL_InitTick+0xf0>)
 80018fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_InitTick+0xec>)
 8001902:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001906:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_InitTick+0xec>)
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_InitTick+0xec>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_InitTick+0xec>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_InitTick+0xec>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001920:	4817      	ldr	r0, [pc, #92]	; (8001980 <HAL_InitTick+0xec>)
 8001922:	f001 ffd3 	bl	80038cc <HAL_TIM_Base_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800192c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001930:	2b00      	cmp	r3, #0
 8001932:	d11b      	bne.n	800196c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001934:	4812      	ldr	r0, [pc, #72]	; (8001980 <HAL_InitTick+0xec>)
 8001936:	f002 f823 	bl	8003980 <HAL_TIM_Base_Start_IT>
 800193a:	4603      	mov	r3, r0
 800193c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001944:	2b00      	cmp	r3, #0
 8001946:	d111      	bne.n	800196c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001948:	2036      	movs	r0, #54	; 0x36
 800194a:	f000 f9eb 	bl	8001d24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d808      	bhi.n	8001966 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	2036      	movs	r0, #54	; 0x36
 800195a:	f000 f9c7 	bl	8001cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_InitTick+0xf4>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e002      	b.n	800196c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800196c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001970:	4618      	mov	r0, r3
 8001972:	3738      	adds	r7, #56	; 0x38
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	431bde83 	.word	0x431bde83
 8001980:	200007b8 	.word	0x200007b8
 8001984:	40001000 	.word	0x40001000
 8001988:	20000010 	.word	0x20000010

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM6_DAC_IRQHandler+0x10>)
 80019be:	f002 f84f 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200007b8 	.word	0x200007b8

080019cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d4:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <_sbrk+0x5c>)
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <_sbrk+0x60>)
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <_sbrk+0x64>)
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <_sbrk+0x68>)
 80019ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_sbrk+0x64>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d207      	bcs.n	8001a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019fc:	f004 f886 	bl	8005b0c <__errno>
 8001a00:	4603      	mov	r3, r0
 8001a02:	220c      	movs	r2, #12
 8001a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e009      	b.n	8001a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <_sbrk+0x64>)
 8001a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20020000 	.word	0x20020000
 8001a2c:	00000400 	.word	0x00000400
 8001a30:	20000800 	.word	0x20000800
 8001a34:	200046a8 	.word	0x200046a8

08001a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SystemInit+0x20>)
 8001a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <SystemInit+0x20>)
 8001a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a60:	f7ff ffea 	bl	8001a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a66:	490d      	ldr	r1, [pc, #52]	; (8001a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a68:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a7c:	4c0a      	ldr	r4, [pc, #40]	; (8001aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f004 f845 	bl	8005b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8e:	f7fe ff63 	bl	8000958 <main>
  bx  lr    
 8001a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001aa0:	08007314 	.word	0x08007314
  ldr r2, =_sbss
 8001aa4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001aa8:	200046a4 	.word	0x200046a4

08001aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_Init+0x40>)
 8001aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_Init+0x40>)
 8001ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <HAL_Init+0x40>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad8:	2003      	movs	r0, #3
 8001ada:	f000 f8fc 	bl	8001cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff fed8 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae4:	f7ff fe1a 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x20>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_IncTick+0x24>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_IncTick+0x24>)
 8001b06:	6013      	str	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000014 	.word	0x20000014
 8001b18:	20000804 	.word	0x20000804

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_GetTick+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000804 	.word	0x20000804

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff ffee 	bl	8001b1c <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d005      	beq.n	8001b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_Delay+0x44>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff ffde 	bl	8001b1c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8f7      	bhi.n	8001b5c <HAL_Delay+0x28>
  {
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000014 	.word	0x20000014

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ff4c 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfe:	f7ff ff61 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f7ff ffb1 	bl	8001c70 <NVIC_EncodePriority>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff80 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff54 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	e165      	b.n	8002028 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f040 8154 	bne.w	8002022 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d005      	beq.n	8001d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d130      	bne.n	8001df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 0201 	and.w	r2, r3, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d017      	beq.n	8001e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d123      	bne.n	8001e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	08da      	lsrs	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3208      	adds	r2, #8
 8001e7e:	69b9      	ldr	r1, [r7, #24]
 8001e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80ae 	beq.w	8002022 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_GPIO_Init+0x300>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a5c      	ldr	r2, [pc, #368]	; (8002040 <HAL_GPIO_Init+0x300>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <HAL_GPIO_Init+0x300>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee2:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	220f      	movs	r2, #15
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <HAL_GPIO_Init+0x308>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x21a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4e      	ldr	r2, [pc, #312]	; (800204c <HAL_GPIO_Init+0x30c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x216>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <HAL_GPIO_Init+0x310>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x212>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_GPIO_Init+0x314>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x20e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4b      	ldr	r2, [pc, #300]	; (8002058 <HAL_GPIO_Init+0x318>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x20a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4a      	ldr	r2, [pc, #296]	; (800205c <HAL_GPIO_Init+0x31c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x206>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a49      	ldr	r2, [pc, #292]	; (8002060 <HAL_GPIO_Init+0x320>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x202>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00c      	b.n	8001f5c <HAL_GPIO_Init+0x21c>
 8001f42:	2307      	movs	r3, #7
 8001f44:	e00a      	b.n	8001f5c <HAL_GPIO_Init+0x21c>
 8001f46:	2305      	movs	r3, #5
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_Init+0x21c>
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x21c>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x21c>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x21c>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x21c>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f6c:	4935      	ldr	r1, [pc, #212]	; (8002044 <HAL_GPIO_Init+0x304>)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9e:	4a31      	ldr	r2, [pc, #196]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa4:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc8:	4a26      	ldr	r2, [pc, #152]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff2:	4a1c      	ldr	r2, [pc, #112]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff8:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <HAL_GPIO_Init+0x324>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800201c:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_GPIO_Init+0x324>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	f67f ae96 	bls.w	8001d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	40013800 	.word	0x40013800
 8002048:	40020000 	.word	0x40020000
 800204c:	40020400 	.word	0x40020400
 8002050:	40020800 	.word	0x40020800
 8002054:	40020c00 	.word	0x40020c00
 8002058:	40021000 	.word	0x40021000
 800205c:	40021400 	.word	0x40021400
 8002060:	40021800 	.word	0x40021800
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e001      	b.n	800208a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208a:	7bfb      	ldrb	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
 80020a4:	4613      	mov	r3, r2
 80020a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a8:	787b      	ldrb	r3, [r7, #1]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b4:	e003      	b.n	80020be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	041a      	lsls	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	041a      	lsls	r2, r3, #16
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43d9      	mvns	r1, r3
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	400b      	ands	r3, r1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	619a      	str	r2, [r3, #24]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e12b      	b.n	800236a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fb24 	bl	8001774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2224      	movs	r2, #36	; 0x24
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0201 	bic.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002164:	f000 fe8a 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8002168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4a81      	ldr	r2, [pc, #516]	; (8002374 <HAL_I2C_Init+0x274>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d807      	bhi.n	8002184 <HAL_I2C_Init+0x84>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a80      	ldr	r2, [pc, #512]	; (8002378 <HAL_I2C_Init+0x278>)
 8002178:	4293      	cmp	r3, r2
 800217a:	bf94      	ite	ls
 800217c:	2301      	movls	r3, #1
 800217e:	2300      	movhi	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e006      	b.n	8002192 <HAL_I2C_Init+0x92>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a7d      	ldr	r2, [pc, #500]	; (800237c <HAL_I2C_Init+0x27c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	bf94      	ite	ls
 800218c:	2301      	movls	r3, #1
 800218e:	2300      	movhi	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0e7      	b.n	800236a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a78      	ldr	r2, [pc, #480]	; (8002380 <HAL_I2C_Init+0x280>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0c9b      	lsrs	r3, r3, #18
 80021a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4a6a      	ldr	r2, [pc, #424]	; (8002374 <HAL_I2C_Init+0x274>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d802      	bhi.n	80021d4 <HAL_I2C_Init+0xd4>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3301      	adds	r3, #1
 80021d2:	e009      	b.n	80021e8 <HAL_I2C_Init+0xe8>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	4a69      	ldr	r2, [pc, #420]	; (8002384 <HAL_I2C_Init+0x284>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	3301      	adds	r3, #1
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	495c      	ldr	r1, [pc, #368]	; (8002374 <HAL_I2C_Init+0x274>)
 8002204:	428b      	cmp	r3, r1
 8002206:	d819      	bhi.n	800223c <HAL_I2C_Init+0x13c>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e59      	subs	r1, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fbb1 f3f3 	udiv	r3, r1, r3
 8002216:	1c59      	adds	r1, r3, #1
 8002218:	f640 73fc 	movw	r3, #4092	; 0xffc
 800221c:	400b      	ands	r3, r1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_I2C_Init+0x138>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1e59      	subs	r1, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002236:	e051      	b.n	80022dc <HAL_I2C_Init+0x1dc>
 8002238:	2304      	movs	r3, #4
 800223a:	e04f      	b.n	80022dc <HAL_I2C_Init+0x1dc>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d111      	bne.n	8002268 <HAL_I2C_Init+0x168>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e58      	subs	r0, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	440b      	add	r3, r1
 8002252:	fbb0 f3f3 	udiv	r3, r0, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e012      	b.n	800228e <HAL_I2C_Init+0x18e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e58      	subs	r0, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	0099      	lsls	r1, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Init+0x196>
 8002292:	2301      	movs	r3, #1
 8002294:	e022      	b.n	80022dc <HAL_I2C_Init+0x1dc>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10e      	bne.n	80022bc <HAL_I2C_Init+0x1bc>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1e58      	subs	r0, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	440b      	add	r3, r1
 80022ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ba:	e00f      	b.n	80022dc <HAL_I2C_Init+0x1dc>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1e58      	subs	r0, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	0099      	lsls	r1, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	6809      	ldr	r1, [r1, #0]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800230a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6911      	ldr	r1, [r2, #16]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68d2      	ldr	r2, [r2, #12]
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	000186a0 	.word	0x000186a0
 8002378:	001e847f 	.word	0x001e847f
 800237c:	003d08ff 	.word	0x003d08ff
 8002380:	431bde83 	.word	0x431bde83
 8002384:	10624dd3 	.word	0x10624dd3

08002388 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	461a      	mov	r2, r3
 8002394:	460b      	mov	r3, r1
 8002396:	817b      	strh	r3, [r7, #10]
 8002398:	4613      	mov	r3, r2
 800239a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff fbbe 	bl	8001b1c <HAL_GetTick>
 80023a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	f040 80e0 	bne.w	8002570 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2319      	movs	r3, #25
 80023b6:	2201      	movs	r2, #1
 80023b8:	4970      	ldr	r1, [pc, #448]	; (800257c <HAL_I2C_Master_Transmit+0x1f4>)
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fa92 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
 80023c8:	e0d3      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_I2C_Master_Transmit+0x50>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e0cc      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d007      	beq.n	80023fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800240c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2221      	movs	r2, #33	; 0x21
 8002412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2210      	movs	r2, #16
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	893a      	ldrh	r2, [r7, #8]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4a50      	ldr	r2, [pc, #320]	; (8002580 <HAL_I2C_Master_Transmit+0x1f8>)
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9ca 	bl	80027e0 <I2C_MasterRequestWrite>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e08d      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800246c:	e066      	b.n	800253c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	6a39      	ldr	r1, [r7, #32]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fb50 	bl	8002b18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00d      	beq.n	800249a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b04      	cmp	r3, #4
 8002484:	d107      	bne.n	8002496 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06b      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d11b      	bne.n	8002510 <HAL_I2C_Master_Transmit+0x188>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d017      	beq.n	8002510 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	6a39      	ldr	r1, [r7, #32]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fb47 	bl	8002ba8 <I2C_WaitOnBTFFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00d      	beq.n	800253c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2b04      	cmp	r3, #4
 8002526:	d107      	bne.n	8002538 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002536:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e01a      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d194      	bne.n	800246e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	00100002 	.word	0x00100002
 8002580:	ffff0000 	.word	0xffff0000

08002584 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	460b      	mov	r3, r1
 8002592:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff fac2 	bl	8001b1c <HAL_GetTick>
 8002598:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	f040 8111 	bne.w	80027ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2319      	movs	r3, #25
 80025b2:	2201      	movs	r2, #1
 80025b4:	4988      	ldr	r1, [pc, #544]	; (80027d8 <HAL_I2C_IsDeviceReady+0x254>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f994 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
 80025c4:	e104      	b.n	80027d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_I2C_IsDeviceReady+0x50>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e0fd      	b.n	80027d0 <HAL_I2C_IsDeviceReady+0x24c>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d007      	beq.n	80025fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2224      	movs	r2, #36	; 0x24
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a70      	ldr	r2, [pc, #448]	; (80027dc <HAL_I2C_IsDeviceReady+0x258>)
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f952 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002654:	d103      	bne.n	800265e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0b6      	b.n	80027d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002670:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002672:	f7ff fa53 	bl	8001b1c <HAL_GetTick>
 8002676:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b02      	cmp	r3, #2
 8002684:	bf0c      	ite	eq
 8002686:	2301      	moveq	r3, #1
 8002688:	2300      	movne	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026a6:	e025      	b.n	80026f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026a8:	f7ff fa38 	bl	8001b1c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d302      	bcc.n	80026be <HAL_I2C_IsDeviceReady+0x13a>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	22a0      	movs	r2, #160	; 0xa0
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2ba0      	cmp	r3, #160	; 0xa0
 80026fe:	d005      	beq.n	800270c <HAL_I2C_IsDeviceReady+0x188>
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <HAL_I2C_IsDeviceReady+0x188>
 8002706:	7dbb      	ldrb	r3, [r7, #22]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0cd      	beq.n	80026a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b02      	cmp	r3, #2
 8002720:	d129      	bne.n	8002776 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2319      	movs	r3, #25
 800274e:	2201      	movs	r2, #1
 8002750:	4921      	ldr	r1, [pc, #132]	; (80027d8 <HAL_I2C_IsDeviceReady+0x254>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f8c6 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e036      	b.n	80027d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e02c      	b.n	80027d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002784:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800278e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2319      	movs	r3, #25
 8002796:	2201      	movs	r2, #1
 8002798:	490f      	ldr	r1, [pc, #60]	; (80027d8 <HAL_I2C_IsDeviceReady+0x254>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f8a2 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e012      	b.n	80027d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3301      	adds	r3, #1
 80027ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f4ff af32 	bcc.w	800261e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
  }
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	00100002 	.word	0x00100002
 80027dc:	ffff0000 	.word	0xffff0000

080027e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	460b      	mov	r3, r1
 80027ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d006      	beq.n	800280a <I2C_MasterRequestWrite+0x2a>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d003      	beq.n	800280a <I2C_MasterRequestWrite+0x2a>
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002808:	d108      	bne.n	800281c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e00b      	b.n	8002834 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	2b12      	cmp	r3, #18
 8002822:	d107      	bne.n	8002834 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002832:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f84f 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285a:	d103      	bne.n	8002864 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e035      	b.n	80028d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002870:	d108      	bne.n	8002884 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002872:	897b      	ldrh	r3, [r7, #10]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002880:	611a      	str	r2, [r3, #16]
 8002882:	e01b      	b.n	80028bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	11db      	asrs	r3, r3, #7
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f003 0306 	and.w	r3, r3, #6
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f063 030f 	orn	r3, r3, #15
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <I2C_MasterRequestWrite+0xfc>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f898 	bl	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e010      	b.n	80028d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028b2:	897b      	ldrh	r3, [r7, #10]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <I2C_MasterRequestWrite+0x100>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f888 	bl	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	00010008 	.word	0x00010008
 80028e0:	00010002 	.word	0x00010002

080028e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f4:	e048      	b.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d044      	beq.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7ff f90d 	bl	8001b1c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d139      	bne.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10d      	bne.n	800293a <I2C_WaitOnFlagUntilTimeout+0x56>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	43da      	mvns	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	e00c      	b.n	8002954 <I2C_WaitOnFlagUntilTimeout+0x70>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d116      	bne.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e023      	b.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d10d      	bne.n	80029ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	43da      	mvns	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4013      	ands	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	e00c      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf0c      	ite	eq
 80029c0:	2301      	moveq	r3, #1
 80029c2:	2300      	movne	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d093      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029e6:	e071      	b.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f6:	d123      	bne.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f043 0204 	orr.w	r2, r3, #4
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e067      	b.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d041      	beq.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a48:	f7ff f868 	bl	8001b1c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d136      	bne.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10c      	bne.n	8002a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e00b      	b.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e021      	b.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	0c1b      	lsrs	r3, r3, #16
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10c      	bne.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	43da      	mvns	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e00b      	b.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f47f af6d 	bne.w	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b24:	e034      	b.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f886 	bl	8002c38 <I2C_IsAcknowledgeFailed>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e034      	b.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d028      	beq.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7fe ffed 	bl	8001b1c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11d      	bne.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b80      	cmp	r3, #128	; 0x80
 8002b60:	d016      	beq.n	8002b90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d1c3      	bne.n	8002b26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bb4:	e034      	b.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f83e 	bl	8002c38 <I2C_IsAcknowledgeFailed>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e034      	b.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d028      	beq.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fe ffa5 	bl	8001b1c <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11d      	bne.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d016      	beq.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e007      	b.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d1c3      	bne.n	8002bb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4e:	d11b      	bne.n	8002c88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 0204 	orr.w	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0cc      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b68      	ldr	r3, [pc, #416]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b8      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cec:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a52      	ldr	r2, [pc, #328]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	494d      	ldr	r1, [pc, #308]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d044      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d119      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e067      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4934      	ldr	r1, [pc, #208]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7fe fec8 	bl	8001b1c <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe fec4 	bl	8001b1c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e04f      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d20c      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e032      	b.n	8002e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4916      	ldr	r1, [pc, #88]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e1e:	f000 f887 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	490a      	ldr	r1, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002e30:	5ccb      	ldrb	r3, [r1, r3]
 8002e32:	fa22 f303 	lsr.w	r3, r2, r3
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fd28 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023c00 	.word	0x40023c00
 8002e54:	40023800 	.word	0x40023800
 8002e58:	080072b8 	.word	0x080072b8
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	20000010 	.word	0x20000010

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	2000000c 	.word	0x2000000c

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0a9b      	lsrs	r3, r3, #10
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4903      	ldr	r1, [pc, #12]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	080072c8 	.word	0x080072c8

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ea8:	f7ff ffdc 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0b5b      	lsrs	r3, r3, #13
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	080072c8 	.word	0x080072c8

08002ecc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	220f      	movs	r2, #15
 8002eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0203 	and.w	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	08db      	lsrs	r3, r3, #3
 8002f06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_RCC_GetClockConfig+0x60>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 020f 	and.w	r2, r3, #15
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40023c00 	.word	0x40023c00

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b0ae      	sub	sp, #184	; 0xb8
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f56:	4bcb      	ldr	r3, [pc, #812]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	f200 8206 	bhi.w	8003370 <HAL_RCC_GetSysClockFreq+0x440>
 8002f64:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08003371 	.word	0x08003371
 8002f74:	08003371 	.word	0x08003371
 8002f78:	08003371 	.word	0x08003371
 8002f7c:	08002fa9 	.word	0x08002fa9
 8002f80:	08003371 	.word	0x08003371
 8002f84:	08003371 	.word	0x08003371
 8002f88:	08003371 	.word	0x08003371
 8002f8c:	08002fb1 	.word	0x08002fb1
 8002f90:	08003371 	.word	0x08003371
 8002f94:	08003371 	.word	0x08003371
 8002f98:	08003371 	.word	0x08003371
 8002f9c:	080031a1 	.word	0x080031a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4bb9      	ldr	r3, [pc, #740]	; (8003288 <HAL_RCC_GetSysClockFreq+0x358>)
 8002fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002fa6:	e1e7      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa8:	4bb8      	ldr	r3, [pc, #736]	; (800328c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fae:	e1e3      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb0:	4bb4      	ldr	r3, [pc, #720]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fbc:	4bb1      	ldr	r3, [pc, #708]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d071      	beq.n	80030ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc8:	4bae      	ldr	r3, [pc, #696]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	099b      	lsrs	r3, r3, #6
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fd4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fee:	4622      	mov	r2, r4
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	0159      	lsls	r1, r3, #5
 8002ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003000:	0150      	lsls	r0, r2, #5
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4621      	mov	r1, r4
 8003008:	1a51      	subs	r1, r2, r1
 800300a:	6439      	str	r1, [r7, #64]	; 0x40
 800300c:	4629      	mov	r1, r5
 800300e:	eb63 0301 	sbc.w	r3, r3, r1
 8003012:	647b      	str	r3, [r7, #68]	; 0x44
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003020:	4649      	mov	r1, r9
 8003022:	018b      	lsls	r3, r1, #6
 8003024:	4641      	mov	r1, r8
 8003026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800302a:	4641      	mov	r1, r8
 800302c:	018a      	lsls	r2, r1, #6
 800302e:	4641      	mov	r1, r8
 8003030:	1a51      	subs	r1, r2, r1
 8003032:	63b9      	str	r1, [r7, #56]	; 0x38
 8003034:	4649      	mov	r1, r9
 8003036:	eb63 0301 	sbc.w	r3, r3, r1
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003048:	4649      	mov	r1, r9
 800304a:	00cb      	lsls	r3, r1, #3
 800304c:	4641      	mov	r1, r8
 800304e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003052:	4641      	mov	r1, r8
 8003054:	00ca      	lsls	r2, r1, #3
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	4603      	mov	r3, r0
 800305c:	4622      	mov	r2, r4
 800305e:	189b      	adds	r3, r3, r2
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
 8003062:	462b      	mov	r3, r5
 8003064:	460a      	mov	r2, r1
 8003066:	eb42 0303 	adc.w	r3, r2, r3
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003078:	4629      	mov	r1, r5
 800307a:	024b      	lsls	r3, r1, #9
 800307c:	4621      	mov	r1, r4
 800307e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003082:	4621      	mov	r1, r4
 8003084:	024a      	lsls	r2, r1, #9
 8003086:	4610      	mov	r0, r2
 8003088:	4619      	mov	r1, r3
 800308a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800308e:	2200      	movs	r2, #0
 8003090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003094:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003098:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800309c:	f7fd f910 	bl	80002c0 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4613      	mov	r3, r2
 80030a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030aa:	e067      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ac:	4b75      	ldr	r3, [pc, #468]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80030bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030c6:	2300      	movs	r3, #0
 80030c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80030ce:	4622      	mov	r2, r4
 80030d0:	462b      	mov	r3, r5
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f04f 0100 	mov.w	r1, #0
 80030da:	0159      	lsls	r1, r3, #5
 80030dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e0:	0150      	lsls	r0, r2, #5
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4621      	mov	r1, r4
 80030e8:	1a51      	subs	r1, r2, r1
 80030ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80030ec:	4629      	mov	r1, r5
 80030ee:	eb63 0301 	sbc.w	r3, r3, r1
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003100:	4649      	mov	r1, r9
 8003102:	018b      	lsls	r3, r1, #6
 8003104:	4641      	mov	r1, r8
 8003106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800310a:	4641      	mov	r1, r8
 800310c:	018a      	lsls	r2, r1, #6
 800310e:	4641      	mov	r1, r8
 8003110:	ebb2 0a01 	subs.w	sl, r2, r1
 8003114:	4649      	mov	r1, r9
 8003116:	eb63 0b01 	sbc.w	fp, r3, r1
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003126:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800312a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800312e:	4692      	mov	sl, r2
 8003130:	469b      	mov	fp, r3
 8003132:	4623      	mov	r3, r4
 8003134:	eb1a 0303 	adds.w	r3, sl, r3
 8003138:	623b      	str	r3, [r7, #32]
 800313a:	462b      	mov	r3, r5
 800313c:	eb4b 0303 	adc.w	r3, fp, r3
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800314e:	4629      	mov	r1, r5
 8003150:	028b      	lsls	r3, r1, #10
 8003152:	4621      	mov	r1, r4
 8003154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003158:	4621      	mov	r1, r4
 800315a:	028a      	lsls	r2, r1, #10
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003164:	2200      	movs	r2, #0
 8003166:	673b      	str	r3, [r7, #112]	; 0x70
 8003168:	677a      	str	r2, [r7, #116]	; 0x74
 800316a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800316e:	f7fd f8a7 	bl	80002c0 <__aeabi_uldivmod>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4613      	mov	r3, r2
 8003178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800317c:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800318e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003196:	fbb2 f3f3 	udiv	r3, r2, r3
 800319a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800319e:	e0eb      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a0:	4b38      	ldr	r3, [pc, #224]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ac:	4b35      	ldr	r3, [pc, #212]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d06b      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b8:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	2200      	movs	r2, #0
 80031c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80031c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ca:	663b      	str	r3, [r7, #96]	; 0x60
 80031cc:	2300      	movs	r3, #0
 80031ce:	667b      	str	r3, [r7, #100]	; 0x64
 80031d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80031d4:	4622      	mov	r2, r4
 80031d6:	462b      	mov	r3, r5
 80031d8:	f04f 0000 	mov.w	r0, #0
 80031dc:	f04f 0100 	mov.w	r1, #0
 80031e0:	0159      	lsls	r1, r3, #5
 80031e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031e6:	0150      	lsls	r0, r2, #5
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4621      	mov	r1, r4
 80031ee:	1a51      	subs	r1, r2, r1
 80031f0:	61b9      	str	r1, [r7, #24]
 80031f2:	4629      	mov	r1, r5
 80031f4:	eb63 0301 	sbc.w	r3, r3, r1
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003206:	4659      	mov	r1, fp
 8003208:	018b      	lsls	r3, r1, #6
 800320a:	4651      	mov	r1, sl
 800320c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003210:	4651      	mov	r1, sl
 8003212:	018a      	lsls	r2, r1, #6
 8003214:	4651      	mov	r1, sl
 8003216:	ebb2 0801 	subs.w	r8, r2, r1
 800321a:	4659      	mov	r1, fp
 800321c:	eb63 0901 	sbc.w	r9, r3, r1
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800322c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003230:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003234:	4690      	mov	r8, r2
 8003236:	4699      	mov	r9, r3
 8003238:	4623      	mov	r3, r4
 800323a:	eb18 0303 	adds.w	r3, r8, r3
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	462b      	mov	r3, r5
 8003242:	eb49 0303 	adc.w	r3, r9, r3
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003254:	4629      	mov	r1, r5
 8003256:	024b      	lsls	r3, r1, #9
 8003258:	4621      	mov	r1, r4
 800325a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800325e:	4621      	mov	r1, r4
 8003260:	024a      	lsls	r2, r1, #9
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800326a:	2200      	movs	r2, #0
 800326c:	65bb      	str	r3, [r7, #88]	; 0x58
 800326e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003270:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003274:	f7fd f824 	bl	80002c0 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003282:	e065      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x420>
 8003284:	40023800 	.word	0x40023800
 8003288:	00f42400 	.word	0x00f42400
 800328c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003290:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCC_GetSysClockFreq+0x458>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	2200      	movs	r2, #0
 8003298:	4618      	mov	r0, r3
 800329a:	4611      	mov	r1, r2
 800329c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032a0:	653b      	str	r3, [r7, #80]	; 0x50
 80032a2:	2300      	movs	r3, #0
 80032a4:	657b      	str	r3, [r7, #84]	; 0x54
 80032a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80032aa:	4642      	mov	r2, r8
 80032ac:	464b      	mov	r3, r9
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	0159      	lsls	r1, r3, #5
 80032b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032bc:	0150      	lsls	r0, r2, #5
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4641      	mov	r1, r8
 80032c4:	1a51      	subs	r1, r2, r1
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	4649      	mov	r1, r9
 80032ca:	eb63 0301 	sbc.w	r3, r3, r1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032dc:	4659      	mov	r1, fp
 80032de:	018b      	lsls	r3, r1, #6
 80032e0:	4651      	mov	r1, sl
 80032e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e6:	4651      	mov	r1, sl
 80032e8:	018a      	lsls	r2, r1, #6
 80032ea:	4651      	mov	r1, sl
 80032ec:	1a54      	subs	r4, r2, r1
 80032ee:	4659      	mov	r1, fp
 80032f0:	eb63 0501 	sbc.w	r5, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	603b      	str	r3, [r7, #0]
 800330e:	464b      	mov	r3, r9
 8003310:	eb45 0303 	adc.w	r3, r5, r3
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003322:	4629      	mov	r1, r5
 8003324:	028b      	lsls	r3, r1, #10
 8003326:	4621      	mov	r1, r4
 8003328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800332c:	4621      	mov	r1, r4
 800332e:	028a      	lsls	r2, r1, #10
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003338:	2200      	movs	r2, #0
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48
 800333c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800333e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003342:	f7fc ffbd 	bl	80002c0 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4613      	mov	r3, r2
 800334c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_RCC_GetSysClockFreq+0x458>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	0f1b      	lsrs	r3, r3, #28
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800335e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800336e:	e003      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003376:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800337c:	4618      	mov	r0, r3
 800337e:	37b8      	adds	r7, #184	; 0xb8
 8003380:	46bd      	mov	sp, r7
 8003382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	00f42400 	.word	0x00f42400

08003390 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e28d      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8083 	beq.w	80034b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033b0:	4b94      	ldr	r3, [pc, #592]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d019      	beq.n	80033f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033bc:	4b91      	ldr	r3, [pc, #580]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033c8:	4b8e      	ldr	r3, [pc, #568]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033d4:	d00c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d6:	4b8b      	ldr	r3, [pc, #556]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	d112      	bne.n	8003408 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b88      	ldr	r3, [pc, #544]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ee:	d10b      	bne.n	8003408 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	4b84      	ldr	r3, [pc, #528]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05b      	beq.n	80034b4 <HAL_RCC_OscConfig+0x124>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d157      	bne.n	80034b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e25a      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x90>
 8003412:	4b7c      	ldr	r3, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7b      	ldr	r2, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xcc>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0xb4>
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xcc>
 8003444:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6e      	ldr	r2, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a6b      	ldr	r2, [pc, #428]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe fb5a 	bl	8001b1c <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe fb56 	bl	8001b1c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e21f      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xdc>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe fb46 	bl	8001b1c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fb42 	bl	8001b1c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e20b      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x104>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d06f      	beq.n	80035a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034c2:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d017      	beq.n	80034fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034ce:	4b4d      	ldr	r3, [pc, #308]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d105      	bne.n	80034e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034da:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034ee:	2b0c      	cmp	r3, #12
 80034f0:	d11c      	bne.n	800352c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b44      	ldr	r3, [pc, #272]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x186>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d001      	beq.n	8003516 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e1d3      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4937      	ldr	r1, [pc, #220]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	e03a      	b.n	80035a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003534:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_RCC_OscConfig+0x278>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fe faef 	bl	8001b1c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003542:	f7fe faeb 	bl	8001b1c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1b4      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4925      	ldr	r1, [pc, #148]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <HAL_RCC_OscConfig+0x278>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe face 	bl	8001b1c <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003584:	f7fe faca 	bl	8001b1c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e193      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003596:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d036      	beq.n	800361c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <HAL_RCC_OscConfig+0x27c>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fe faae 	bl	8001b1c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fe faaa 	bl	8001b1c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e173      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x274>)
 80035d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x234>
 80035e2:	e01b      	b.n	800361c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_OscConfig+0x27c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ea:	f7fe fa97 	bl	8001b1c <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	e00e      	b.n	8003610 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f2:	f7fe fa93 	bl	8001b1c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d907      	bls.n	8003610 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e15c      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
 8003604:	40023800 	.word	0x40023800
 8003608:	42470000 	.word	0x42470000
 800360c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b8a      	ldr	r3, [pc, #552]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ea      	bne.n	80035f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8097 	beq.w	8003758 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362e:	4b83      	ldr	r3, [pc, #524]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b7f      	ldr	r3, [pc, #508]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	4a7e      	ldr	r2, [pc, #504]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003648:	6413      	str	r3, [r2, #64]	; 0x40
 800364a:	4b7c      	ldr	r3, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b79      	ldr	r3, [pc, #484]	; (8003840 <HAL_RCC_OscConfig+0x4b0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d118      	bne.n	8003698 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x4b0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a75      	ldr	r2, [pc, #468]	; (8003840 <HAL_RCC_OscConfig+0x4b0>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003672:	f7fe fa53 	bl	8001b1c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367a:	f7fe fa4f 	bl	8001b1c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e118      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x4b0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x31e>
 80036a0:	4b66      	ldr	r3, [pc, #408]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a65      	ldr	r2, [pc, #404]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	e01c      	b.n	80036e8 <HAL_RCC_OscConfig+0x358>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x340>
 80036b6:	4b61      	ldr	r3, [pc, #388]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a60      	ldr	r2, [pc, #384]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
 80036c2:	4b5e      	ldr	r3, [pc, #376]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a5d      	ldr	r2, [pc, #372]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	e00b      	b.n	80036e8 <HAL_RCC_OscConfig+0x358>
 80036d0:	4b5a      	ldr	r3, [pc, #360]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a59      	ldr	r2, [pc, #356]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	4b57      	ldr	r3, [pc, #348]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a56      	ldr	r2, [pc, #344]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80036e2:	f023 0304 	bic.w	r3, r3, #4
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fe fa14 	bl	8001b1c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fe fa10 	bl	8001b1c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0d7      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	4b4b      	ldr	r3, [pc, #300]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ee      	beq.n	80036f8 <HAL_RCC_OscConfig+0x368>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fe f9fe 	bl	8001b1c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe f9fa 	bl	8001b1c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0c1      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373a:	4b40      	ldr	r3, [pc, #256]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ee      	bne.n	8003724 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	4a3a      	ldr	r2, [pc, #232]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003756:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80ad 	beq.w	80038bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003762:	4b36      	ldr	r3, [pc, #216]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b08      	cmp	r3, #8
 800376c:	d060      	beq.n	8003830 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d145      	bne.n	8003802 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_RCC_OscConfig+0x4b4>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe f9ce 	bl	8001b1c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe f9ca 	bl	8001b1c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e093      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	019b      	lsls	r3, r3, #6
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	3b01      	subs	r3, #1
 80037bc:	041b      	lsls	r3, r3, #16
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	071b      	lsls	r3, r3, #28
 80037ce:	491b      	ldr	r1, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x4b4>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe f99f 	bl	8001b1c <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe f99b 	bl	8001b1c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e064      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x452>
 8003800:	e05c      	b.n	80038bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x4b4>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7fe f988 	bl	8001b1c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe f984 	bl	8001b1c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e04d      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_OscConfig+0x4ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x480>
 800382e:	e045      	b.n	80038bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e040      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
 800383c:	40023800 	.word	0x40023800
 8003840:	40007000 	.word	0x40007000
 8003844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <HAL_RCC_OscConfig+0x538>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d030      	beq.n	80038b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d129      	bne.n	80038b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d122      	bne.n	80038b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800387e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	4293      	cmp	r3, r2
 8003882:	d119      	bne.n	80038b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	3b01      	subs	r3, #1
 8003892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d10f      	bne.n	80038b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800

080038cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e041      	b.n	8003962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f839 	bl	800396a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f000 f9c0 	bl	8003c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d001      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e04e      	b.n	8003a36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a23      	ldr	r2, [pc, #140]	; (8003a44 <HAL_TIM_Base_Start_IT+0xc4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d022      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d01d      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_TIM_Base_Start_IT+0xc8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d018      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <HAL_TIM_Base_Start_IT+0xcc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d013      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00e      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d111      	bne.n	8003a24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d010      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a22:	e007      	b.n	8003a34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40010000 	.word	0x40010000
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40000c00 	.word	0x40000c00
 8003a54:	40010400 	.word	0x40010400
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40001800 	.word	0x40001800

08003a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d020      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0202 	mvn.w	r2, #2
 8003a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8d2 	bl	8003c54 <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8c4 	bl	8003c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f8d5 	bl	8003c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d020      	beq.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01b      	beq.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0204 	mvn.w	r2, #4
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8ac 	bl	8003c54 <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f89e 	bl	8003c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8af 	bl	8003c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d020      	beq.n	8003b5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0208 	mvn.w	r2, #8
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2204      	movs	r2, #4
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f886 	bl	8003c54 <HAL_TIM_IC_CaptureCallback>
 8003b48:	e005      	b.n	8003b56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f878 	bl	8003c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f889 	bl	8003c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01b      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0210 	mvn.w	r2, #16
 8003b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f860 	bl	8003c54 <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f852 	bl	8003c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f863 	bl	8003c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00c      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0201 	mvn.w	r2, #1
 8003bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fd fad0 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f906 	bl	8003dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f834 	bl	8003c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0220 	mvn.w	r2, #32
 8003c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8d8 	bl	8003de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a46      	ldr	r2, [pc, #280]	; (8003dbc <TIM_Base_SetConfig+0x12c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d013      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d00f      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a43      	ldr	r2, [pc, #268]	; (8003dc0 <TIM_Base_SetConfig+0x130>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00b      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a42      	ldr	r2, [pc, #264]	; (8003dc4 <TIM_Base_SetConfig+0x134>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d007      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a41      	ldr	r2, [pc, #260]	; (8003dc8 <TIM_Base_SetConfig+0x138>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <TIM_Base_SetConfig+0x13c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a35      	ldr	r2, [pc, #212]	; (8003dbc <TIM_Base_SetConfig+0x12c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d02b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d027      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a32      	ldr	r2, [pc, #200]	; (8003dc0 <TIM_Base_SetConfig+0x130>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d023      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a31      	ldr	r2, [pc, #196]	; (8003dc4 <TIM_Base_SetConfig+0x134>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01f      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <TIM_Base_SetConfig+0x138>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a2f      	ldr	r2, [pc, #188]	; (8003dcc <TIM_Base_SetConfig+0x13c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d017      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2e      	ldr	r2, [pc, #184]	; (8003dd0 <TIM_Base_SetConfig+0x140>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2d      	ldr	r2, [pc, #180]	; (8003dd4 <TIM_Base_SetConfig+0x144>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00f      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2c      	ldr	r2, [pc, #176]	; (8003dd8 <TIM_Base_SetConfig+0x148>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2b      	ldr	r2, [pc, #172]	; (8003ddc <TIM_Base_SetConfig+0x14c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2a      	ldr	r2, [pc, #168]	; (8003de0 <TIM_Base_SetConfig+0x150>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <TIM_Base_SetConfig+0x154>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a10      	ldr	r2, [pc, #64]	; (8003dbc <TIM_Base_SetConfig+0x12c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0xf8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <TIM_Base_SetConfig+0x13c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d103      	bne.n	8003d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	611a      	str	r2, [r3, #16]
  }
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40010400 	.word	0x40010400
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40014400 	.word	0x40014400
 8003dd8:	40014800 	.word	0x40014800
 8003ddc:	40001800 	.word	0x40001800
 8003de0:	40001c00 	.word	0x40001c00
 8003de4:	40002000 	.word	0x40002000

08003de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e042      	b.n	8003ea8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd fce4 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2224      	movs	r2, #36	; 0x24
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f973 	bl	8004140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d175      	bne.n	8003fbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Transmit+0x2c>
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e06e      	b.n	8003fbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2221      	movs	r2, #33	; 0x21
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eee:	f7fd fe15 	bl	8001b1c <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d108      	bne.n	8003f1c <HAL_UART_Transmit+0x6c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d104      	bne.n	8003f1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e003      	b.n	8003f24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f24:	e02e      	b.n	8003f84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2180      	movs	r1, #128	; 0x80
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f848 	bl	8003fc6 <UART_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e03a      	b.n	8003fbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10b      	bne.n	8003f66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	3302      	adds	r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	e007      	b.n	8003f76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3301      	adds	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1cb      	bne.n	8003f26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2140      	movs	r1, #64	; 0x40
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f814 	bl	8003fc6 <UART_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e006      	b.n	8003fbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3720      	adds	r7, #32
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b086      	sub	sp, #24
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd6:	e03b      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d037      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe0:	f7fd fd9c 	bl	8001b1c <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	6a3a      	ldr	r2, [r7, #32]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d302      	bcc.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e03a      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d023      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b80      	cmp	r3, #128	; 0x80
 800400c:	d020      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x8a>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d01d      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b08      	cmp	r3, #8
 8004020:	d116      	bne.n	8004050 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f81d 	bl	8004078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2208      	movs	r2, #8
 8004042:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e00f      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	429a      	cmp	r2, r3
 800406c:	d0b4      	beq.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b095      	sub	sp, #84	; 0x54
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040a0:	643a      	str	r2, [r7, #64]	; 0x40
 80040a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e5      	bne.n	8004080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3314      	adds	r3, #20
 80040d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e5      	bne.n	80040b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d119      	bne.n	8004124 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 0310 	bic.w	r3, r3, #16
 8004106:	647b      	str	r3, [r7, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004110:	61ba      	str	r2, [r7, #24]
 8004112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	613b      	str	r3, [r7, #16]
   return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e5      	bne.n	80040f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004132:	bf00      	nop
 8004134:	3754      	adds	r7, #84	; 0x54
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004144:	b0c0      	sub	sp, #256	; 0x100
 8004146:	af00      	add	r7, sp, #0
 8004148:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	68d9      	ldr	r1, [r3, #12]
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	ea40 0301 	orr.w	r3, r0, r1
 8004168:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	431a      	orrs	r2, r3
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004198:	f021 010c 	bic.w	r1, r1, #12
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041a6:	430b      	orrs	r3, r1
 80041a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	6999      	ldr	r1, [r3, #24]
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	ea40 0301 	orr.w	r3, r0, r1
 80041c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b8f      	ldr	r3, [pc, #572]	; (800440c <UART_SetConfig+0x2cc>)
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d005      	beq.n	80041e0 <UART_SetConfig+0xa0>
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b8d      	ldr	r3, [pc, #564]	; (8004410 <UART_SetConfig+0x2d0>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d104      	bne.n	80041ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e0:	f7fe fe60 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 80041e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041e8:	e003      	b.n	80041f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ea:	f7fe fe47 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 80041ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fc:	f040 810c 	bne.w	8004418 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004204:	2200      	movs	r2, #0
 8004206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800420a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800420e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	1891      	adds	r1, r2, r2
 8004218:	65b9      	str	r1, [r7, #88]	; 0x58
 800421a:	415b      	adcs	r3, r3
 800421c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800421e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004222:	4621      	mov	r1, r4
 8004224:	eb12 0801 	adds.w	r8, r2, r1
 8004228:	4629      	mov	r1, r5
 800422a:	eb43 0901 	adc.w	r9, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb18 0303 	adds.w	r3, r8, r3
 800424c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004250:	462b      	mov	r3, r5
 8004252:	eb49 0303 	adc.w	r3, r9, r3
 8004256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004266:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800426a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800426e:	460b      	mov	r3, r1
 8004270:	18db      	adds	r3, r3, r3
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
 8004274:	4613      	mov	r3, r2
 8004276:	eb42 0303 	adc.w	r3, r2, r3
 800427a:	657b      	str	r3, [r7, #84]	; 0x54
 800427c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004280:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004284:	f7fc f81c 	bl	80002c0 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4b61      	ldr	r3, [pc, #388]	; (8004414 <UART_SetConfig+0x2d4>)
 800428e:	fba3 2302 	umull	r2, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	011c      	lsls	r4, r3, #4
 8004296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429a:	2200      	movs	r2, #0
 800429c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	1891      	adds	r1, r2, r2
 80042ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80042b0:	415b      	adcs	r3, r3
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042b8:	4641      	mov	r1, r8
 80042ba:	eb12 0a01 	adds.w	sl, r2, r1
 80042be:	4649      	mov	r1, r9
 80042c0:	eb43 0b01 	adc.w	fp, r3, r1
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d8:	4692      	mov	sl, r2
 80042da:	469b      	mov	fp, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	eb1a 0303 	adds.w	r3, sl, r3
 80042e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042e6:	464b      	mov	r3, r9
 80042e8:	eb4b 0303 	adc.w	r3, fp, r3
 80042ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004300:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004304:	460b      	mov	r3, r1
 8004306:	18db      	adds	r3, r3, r3
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
 800430a:	4613      	mov	r3, r2
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	647b      	str	r3, [r7, #68]	; 0x44
 8004312:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004316:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800431a:	f7fb ffd1 	bl	80002c0 <__aeabi_uldivmod>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4611      	mov	r1, r2
 8004324:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <UART_SetConfig+0x2d4>)
 8004326:	fba3 2301 	umull	r2, r3, r3, r1
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2264      	movs	r2, #100	; 0x64
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	1acb      	subs	r3, r1, r3
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <UART_SetConfig+0x2d4>)
 800433c:	fba3 2302 	umull	r2, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004348:	441c      	add	r4, r3
 800434a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004354:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004358:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	63b9      	str	r1, [r7, #56]	; 0x38
 8004364:	415b      	adcs	r3, r3
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800436c:	4641      	mov	r1, r8
 800436e:	1851      	adds	r1, r2, r1
 8004370:	6339      	str	r1, [r7, #48]	; 0x30
 8004372:	4649      	mov	r1, r9
 8004374:	414b      	adcs	r3, r1
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004384:	4659      	mov	r1, fp
 8004386:	00cb      	lsls	r3, r1, #3
 8004388:	4651      	mov	r1, sl
 800438a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438e:	4651      	mov	r1, sl
 8004390:	00ca      	lsls	r2, r1, #3
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	4603      	mov	r3, r0
 8004398:	4642      	mov	r2, r8
 800439a:	189b      	adds	r3, r3, r2
 800439c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a0:	464b      	mov	r3, r9
 80043a2:	460a      	mov	r2, r1
 80043a4:	eb42 0303 	adc.w	r3, r2, r3
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043c0:	460b      	mov	r3, r1
 80043c2:	18db      	adds	r3, r3, r3
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c6:	4613      	mov	r3, r2
 80043c8:	eb42 0303 	adc.w	r3, r2, r3
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043d6:	f7fb ff73 	bl	80002c0 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <UART_SetConfig+0x2d4>)
 80043e0:	fba3 1302 	umull	r1, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2164      	movs	r1, #100	; 0x64
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	3332      	adds	r3, #50	; 0x32
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <UART_SetConfig+0x2d4>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	f003 0207 	and.w	r2, r3, #7
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4422      	add	r2, r4
 8004406:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004408:	e106      	b.n	8004618 <UART_SetConfig+0x4d8>
 800440a:	bf00      	nop
 800440c:	40011000 	.word	0x40011000
 8004410:	40011400 	.word	0x40011400
 8004414:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004422:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004426:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800442a:	4642      	mov	r2, r8
 800442c:	464b      	mov	r3, r9
 800442e:	1891      	adds	r1, r2, r2
 8004430:	6239      	str	r1, [r7, #32]
 8004432:	415b      	adcs	r3, r3
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800443a:	4641      	mov	r1, r8
 800443c:	1854      	adds	r4, r2, r1
 800443e:	4649      	mov	r1, r9
 8004440:	eb43 0501 	adc.w	r5, r3, r1
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	00eb      	lsls	r3, r5, #3
 800444e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004452:	00e2      	lsls	r2, r4, #3
 8004454:	4614      	mov	r4, r2
 8004456:	461d      	mov	r5, r3
 8004458:	4643      	mov	r3, r8
 800445a:	18e3      	adds	r3, r4, r3
 800445c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004460:	464b      	mov	r3, r9
 8004462:	eb45 0303 	adc.w	r3, r5, r3
 8004466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004486:	4629      	mov	r1, r5
 8004488:	008b      	lsls	r3, r1, #2
 800448a:	4621      	mov	r1, r4
 800448c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004490:	4621      	mov	r1, r4
 8004492:	008a      	lsls	r2, r1, #2
 8004494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004498:	f7fb ff12 	bl	80002c0 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4b60      	ldr	r3, [pc, #384]	; (8004624 <UART_SetConfig+0x4e4>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	011c      	lsls	r4, r3, #4
 80044aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044bc:	4642      	mov	r2, r8
 80044be:	464b      	mov	r3, r9
 80044c0:	1891      	adds	r1, r2, r2
 80044c2:	61b9      	str	r1, [r7, #24]
 80044c4:	415b      	adcs	r3, r3
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044cc:	4641      	mov	r1, r8
 80044ce:	1851      	adds	r1, r2, r1
 80044d0:	6139      	str	r1, [r7, #16]
 80044d2:	4649      	mov	r1, r9
 80044d4:	414b      	adcs	r3, r1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e4:	4659      	mov	r1, fp
 80044e6:	00cb      	lsls	r3, r1, #3
 80044e8:	4651      	mov	r1, sl
 80044ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ee:	4651      	mov	r1, sl
 80044f0:	00ca      	lsls	r2, r1, #3
 80044f2:	4610      	mov	r0, r2
 80044f4:	4619      	mov	r1, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	4642      	mov	r2, r8
 80044fa:	189b      	adds	r3, r3, r2
 80044fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004500:	464b      	mov	r3, r9
 8004502:	460a      	mov	r2, r1
 8004504:	eb42 0303 	adc.w	r3, r2, r3
 8004508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	67bb      	str	r3, [r7, #120]	; 0x78
 8004516:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004524:	4649      	mov	r1, r9
 8004526:	008b      	lsls	r3, r1, #2
 8004528:	4641      	mov	r1, r8
 800452a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452e:	4641      	mov	r1, r8
 8004530:	008a      	lsls	r2, r1, #2
 8004532:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004536:	f7fb fec3 	bl	80002c0 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4611      	mov	r1, r2
 8004540:	4b38      	ldr	r3, [pc, #224]	; (8004624 <UART_SetConfig+0x4e4>)
 8004542:	fba3 2301 	umull	r2, r3, r3, r1
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2264      	movs	r2, #100	; 0x64
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	1acb      	subs	r3, r1, r3
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	3332      	adds	r3, #50	; 0x32
 8004554:	4a33      	ldr	r2, [pc, #204]	; (8004624 <UART_SetConfig+0x4e4>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004560:	441c      	add	r4, r3
 8004562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004566:	2200      	movs	r2, #0
 8004568:	673b      	str	r3, [r7, #112]	; 0x70
 800456a:	677a      	str	r2, [r7, #116]	; 0x74
 800456c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	415b      	adcs	r3, r3
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004580:	4641      	mov	r1, r8
 8004582:	1851      	adds	r1, r2, r1
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	4649      	mov	r1, r9
 8004588:	414b      	adcs	r3, r1
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004598:	4659      	mov	r1, fp
 800459a:	00cb      	lsls	r3, r1, #3
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a2:	4651      	mov	r1, sl
 80045a4:	00ca      	lsls	r2, r1, #3
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	4642      	mov	r2, r8
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b2:	464b      	mov	r3, r9
 80045b4:	460a      	mov	r2, r1
 80045b6:	eb42 0303 	adc.w	r3, r2, r3
 80045ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	663b      	str	r3, [r7, #96]	; 0x60
 80045c6:	667a      	str	r2, [r7, #100]	; 0x64
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045d4:	4649      	mov	r1, r9
 80045d6:	008b      	lsls	r3, r1, #2
 80045d8:	4641      	mov	r1, r8
 80045da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045de:	4641      	mov	r1, r8
 80045e0:	008a      	lsls	r2, r1, #2
 80045e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045e6:	f7fb fe6b 	bl	80002c0 <__aeabi_uldivmod>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <UART_SetConfig+0x4e4>)
 80045f0:	fba3 1302 	umull	r1, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	2164      	movs	r1, #100	; 0x64
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	3332      	adds	r3, #50	; 0x32
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <UART_SetConfig+0x4e4>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f003 020f 	and.w	r2, r3, #15
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4422      	add	r2, r4
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800461e:	46bd      	mov	sp, r7
 8004620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004624:	51eb851f 	.word	0x51eb851f

08004628 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800463a:	2b84      	cmp	r3, #132	; 0x84
 800463c:	d005      	beq.n	800464a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800463e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	3303      	adds	r3, #3
 8004648:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800465c:	f000 fade 	bl	8004c1c <vTaskStartScheduler>
  
  return osOK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	bd80      	pop	{r7, pc}

08004666 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004668:	b089      	sub	sp, #36	; 0x24
 800466a:	af04      	add	r7, sp, #16
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d020      	beq.n	80046ba <osThreadCreate+0x54>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01c      	beq.n	80046ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685c      	ldr	r4, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691e      	ldr	r6, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff ffc8 	bl	8004628 <makeFreeRtosPriority>
 8004698:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046a2:	9202      	str	r2, [sp, #8]
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	9100      	str	r1, [sp, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4632      	mov	r2, r6
 80046ac:	4629      	mov	r1, r5
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 f8ed 	bl	800488e <xTaskCreateStatic>
 80046b4:	4603      	mov	r3, r0
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e01c      	b.n	80046f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685c      	ldr	r4, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046c6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ffaa 	bl	8004628 <makeFreeRtosPriority>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f107 030c 	add.w	r3, r7, #12
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	9200      	str	r2, [sp, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	4632      	mov	r2, r6
 80046e2:	4629      	mov	r1, r5
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 f92f 	bl	8004948 <xTaskCreate>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d001      	beq.n	80046f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046f4:	68fb      	ldr	r3, [r7, #12]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <osDelay+0x16>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	e000      	b.n	8004716 <osDelay+0x18>
 8004714:	2301      	movs	r3, #1
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fa4c 	bl	8004bb4 <vTaskDelay>
  
  return osOK;
 800471c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f103 0208 	add.w	r2, r3, #8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f04f 32ff 	mov.w	r2, #4294967295
 800473e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 0208 	add.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f103 0208 	add.w	r2, r3, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d103      	bne.n	80047e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e00c      	b.n	8004802 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3308      	adds	r3, #8
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e002      	b.n	80047f6 <vListInsert+0x2e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d2f6      	bcs.n	80047f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6892      	ldr	r2, [r2, #8]
 8004850:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6852      	ldr	r2, [r2, #4]
 800485a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d103      	bne.n	800486e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	1e5a      	subs	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800488e:	b580      	push	{r7, lr}
 8004890:	b08e      	sub	sp, #56	; 0x38
 8004892:	af04      	add	r7, sp, #16
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800489c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <xTaskCreateStatic+0x46>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	61fb      	str	r3, [r7, #28]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048d4:	2354      	movs	r3, #84	; 0x54
 80048d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b54      	cmp	r3, #84	; 0x54
 80048dc:	d00a      	beq.n	80048f4 <xTaskCreateStatic+0x66>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	61bb      	str	r3, [r7, #24]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d01e      	beq.n	800493a <xTaskCreateStatic+0xac>
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01b      	beq.n	800493a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800490a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004914:	2300      	movs	r3, #0
 8004916:	9303      	str	r3, [sp, #12]
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	9302      	str	r3, [sp, #8]
 800491c:	f107 0314 	add.w	r3, r7, #20
 8004920:	9301      	str	r3, [sp, #4]
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f850 	bl	80049d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004932:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004934:	f000 f8d4 	bl	8004ae0 <prvAddNewTaskToReadyList>
 8004938:	e001      	b.n	800493e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800493e:	697b      	ldr	r3, [r7, #20]
	}
 8004940:	4618      	mov	r0, r3
 8004942:	3728      	adds	r7, #40	; 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08c      	sub	sp, #48	; 0x30
 800494c:	af04      	add	r7, sp, #16
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fec3 	bl	80056e8 <pvPortMalloc>
 8004962:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00e      	beq.n	8004988 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800496a:	2054      	movs	r0, #84	; 0x54
 800496c:	f000 febc 	bl	80056e8 <pvPortMalloc>
 8004970:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
 800497e:	e005      	b.n	800498c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004980:	6978      	ldr	r0, [r7, #20]
 8004982:	f000 ff7d 	bl	8005880 <vPortFree>
 8004986:	e001      	b.n	800498c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d017      	beq.n	80049c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	2300      	movs	r3, #0
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	9302      	str	r3, [sp, #8]
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f80e 	bl	80049d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049b6:	69f8      	ldr	r0, [r7, #28]
 80049b8:	f000 f892 	bl	8004ae0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049bc:	2301      	movs	r3, #1
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e002      	b.n	80049c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049c2:	f04f 33ff 	mov.w	r3, #4294967295
 80049c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049c8:	69bb      	ldr	r3, [r7, #24]
	}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b088      	sub	sp, #32
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049ea:	3b01      	subs	r3, #1
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f023 0307 	bic.w	r3, r3, #7
 80049f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <prvInitialiseNewTask+0x48>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	617b      	str	r3, [r7, #20]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01f      	beq.n	8004a60 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e012      	b.n	8004a4c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	7819      	ldrb	r1, [r3, #0]
 8004a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	3334      	adds	r3, #52	; 0x34
 8004a36:	460a      	mov	r2, r1
 8004a38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	d9e9      	bls.n	8004a26 <prvInitialiseNewTask+0x54>
 8004a52:	e000      	b.n	8004a56 <prvInitialiseNewTask+0x84>
			{
				break;
 8004a54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5e:	e003      	b.n	8004a68 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d901      	bls.n	8004a72 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a6e:	2306      	movs	r3, #6
 8004a70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	2200      	movs	r2, #0
 8004a82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	3304      	adds	r3, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fe6c 	bl	8004766 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	3318      	adds	r3, #24
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fe67 	bl	8004766 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	f1c3 0207 	rsb	r2, r3, #7
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	69b8      	ldr	r0, [r7, #24]
 8004ac2:	f000 fc05 	bl	80052d0 <pxPortInitialiseStack>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ad8:	bf00      	nop
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ae8:	f000 fd1c 	bl	8005524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004aec:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <prvAddNewTaskToReadyList+0xb8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <prvAddNewTaskToReadyList+0xb8>)
 8004af4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004af6:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <prvAddNewTaskToReadyList+0xbc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004afe:	4a27      	ldr	r2, [pc, #156]	; (8004b9c <prvAddNewTaskToReadyList+0xbc>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <prvAddNewTaskToReadyList+0xb8>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d110      	bne.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b0c:	f000 fabc 	bl	8005088 <prvInitialiseTaskLists>
 8004b10:	e00d      	b.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b12:	4b23      	ldr	r3, [pc, #140]	; (8004ba0 <prvAddNewTaskToReadyList+0xc0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b1a:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <prvAddNewTaskToReadyList+0xbc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d802      	bhi.n	8004b2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b28:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <prvAddNewTaskToReadyList+0xbc>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ba4 <prvAddNewTaskToReadyList+0xc4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <prvAddNewTaskToReadyList+0xc4>)
 8004b36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <prvAddNewTaskToReadyList+0xc8>)
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a15      	ldr	r2, [pc, #84]	; (8004bac <prvAddNewTaskToReadyList+0xcc>)
 8004b58:	441a      	add	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f7ff fe0d 	bl	8004780 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b66:	f000 fd0d 	bl	8005584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <prvAddNewTaskToReadyList+0xc0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00e      	beq.n	8004b90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <prvAddNewTaskToReadyList+0xbc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d207      	bcs.n	8004b90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <prvAddNewTaskToReadyList+0xd0>)
 8004b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000908 	.word	0x20000908
 8004b9c:	20000808 	.word	0x20000808
 8004ba0:	20000914 	.word	0x20000914
 8004ba4:	20000924 	.word	0x20000924
 8004ba8:	20000910 	.word	0x20000910
 8004bac:	2000080c 	.word	0x2000080c
 8004bb0:	e000ed04 	.word	0xe000ed04

08004bb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d017      	beq.n	8004bf6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bc6:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <vTaskDelay+0x60>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <vTaskDelay+0x30>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	60bb      	str	r3, [r7, #8]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004be4:	f000 f87a 	bl	8004cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004be8:	2100      	movs	r1, #0
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb0a 	bl	8005204 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bf0:	f000 f882 	bl	8004cf8 <xTaskResumeAll>
 8004bf4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d107      	bne.n	8004c0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <vTaskDelay+0x64>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20000930 	.word	0x20000930
 8004c18:	e000ed04 	.word	0xe000ed04

08004c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c2a:	463a      	mov	r2, r7
 8004c2c:	1d39      	adds	r1, r7, #4
 8004c2e:	f107 0308 	add.w	r3, r7, #8
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fb fe76 	bl	8000924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	9202      	str	r2, [sp, #8]
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	460a      	mov	r2, r1
 8004c4a:	491e      	ldr	r1, [pc, #120]	; (8004cc4 <vTaskStartScheduler+0xa8>)
 8004c4c:	481e      	ldr	r0, [pc, #120]	; (8004cc8 <vTaskStartScheduler+0xac>)
 8004c4e:	f7ff fe1e 	bl	800488e <xTaskCreateStatic>
 8004c52:	4603      	mov	r3, r0
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <vTaskStartScheduler+0xb0>)
 8004c56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c58:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <vTaskStartScheduler+0xb0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e001      	b.n	8004c6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d116      	bne.n	8004c9e <vTaskStartScheduler+0x82>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	613b      	str	r3, [r7, #16]
}
 8004c82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <vTaskStartScheduler+0xb4>)
 8004c86:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <vTaskStartScheduler+0xb8>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c92:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <vTaskStartScheduler+0xbc>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c98:	f000 fba2 	bl	80053e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c9c:	e00e      	b.n	8004cbc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca4:	d10a      	bne.n	8004cbc <vTaskStartScheduler+0xa0>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	60fb      	str	r3, [r7, #12]
}
 8004cb8:	bf00      	nop
 8004cba:	e7fe      	b.n	8004cba <vTaskStartScheduler+0x9e>
}
 8004cbc:	bf00      	nop
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	08006554 	.word	0x08006554
 8004cc8:	08005059 	.word	0x08005059
 8004ccc:	2000092c 	.word	0x2000092c
 8004cd0:	20000928 	.word	0x20000928
 8004cd4:	20000914 	.word	0x20000914
 8004cd8:	2000090c 	.word	0x2000090c

08004cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <vTaskSuspendAll+0x18>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	4a03      	ldr	r2, [pc, #12]	; (8004cf4 <vTaskSuspendAll+0x18>)
 8004ce8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cea:	bf00      	nop
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	20000930 	.word	0x20000930

08004cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d06:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <xTaskResumeAll+0x114>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	603b      	str	r3, [r7, #0]
}
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d24:	f000 fbfe 	bl	8005524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d28:	4b38      	ldr	r3, [pc, #224]	; (8004e0c <xTaskResumeAll+0x114>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	4a37      	ldr	r2, [pc, #220]	; (8004e0c <xTaskResumeAll+0x114>)
 8004d30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d32:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <xTaskResumeAll+0x114>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d161      	bne.n	8004dfe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d3a:	4b35      	ldr	r3, [pc, #212]	; (8004e10 <xTaskResumeAll+0x118>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d05d      	beq.n	8004dfe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d42:	e02e      	b.n	8004da2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	4b33      	ldr	r3, [pc, #204]	; (8004e14 <xTaskResumeAll+0x11c>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3318      	adds	r3, #24
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fd72 	bl	800483a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fd6d 	bl	800483a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	2201      	movs	r2, #1
 8004d66:	409a      	lsls	r2, r3
 8004d68:	4b2b      	ldr	r3, [pc, #172]	; (8004e18 <xTaskResumeAll+0x120>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	4a2a      	ldr	r2, [pc, #168]	; (8004e18 <xTaskResumeAll+0x120>)
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4a27      	ldr	r2, [pc, #156]	; (8004e1c <xTaskResumeAll+0x124>)
 8004d80:	441a      	add	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3304      	adds	r3, #4
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f7ff fcf9 	bl	8004780 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d92:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <xTaskResumeAll+0x128>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d302      	bcc.n	8004da2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <xTaskResumeAll+0x12c>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <xTaskResumeAll+0x11c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1cc      	bne.n	8004d44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004db0:	f000 fa08 	bl	80051c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004db4:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <xTaskResumeAll+0x130>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d010      	beq.n	8004de2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dc0:	f000 f836 	bl	8004e30 <xTaskIncrementTick>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <xTaskResumeAll+0x12c>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f1      	bne.n	8004dc0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ddc:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <xTaskResumeAll+0x130>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <xTaskResumeAll+0x12c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dea:	2301      	movs	r3, #1
 8004dec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dee:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <xTaskResumeAll+0x134>)
 8004df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dfe:	f000 fbc1 	bl	8005584 <vPortExitCritical>

	return xAlreadyYielded;
 8004e02:	68bb      	ldr	r3, [r7, #8]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20000930 	.word	0x20000930
 8004e10:	20000908 	.word	0x20000908
 8004e14:	200008c8 	.word	0x200008c8
 8004e18:	20000910 	.word	0x20000910
 8004e1c:	2000080c 	.word	0x2000080c
 8004e20:	20000808 	.word	0x20000808
 8004e24:	2000091c 	.word	0x2000091c
 8004e28:	20000918 	.word	0x20000918
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e3a:	4b4e      	ldr	r3, [pc, #312]	; (8004f74 <xTaskIncrementTick+0x144>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f040 808e 	bne.w	8004f60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e44:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <xTaskIncrementTick+0x148>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e4c:	4a4a      	ldr	r2, [pc, #296]	; (8004f78 <xTaskIncrementTick+0x148>)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d120      	bne.n	8004e9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e58:	4b48      	ldr	r3, [pc, #288]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	603b      	str	r3, [r7, #0]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xTaskIncrementTick+0x46>
 8004e78:	4b40      	ldr	r3, [pc, #256]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <xTaskIncrementTick+0x150>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3e      	ldr	r2, [pc, #248]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	4a3e      	ldr	r2, [pc, #248]	; (8004f80 <xTaskIncrementTick+0x150>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b3d      	ldr	r3, [pc, #244]	; (8004f84 <xTaskIncrementTick+0x154>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	4a3c      	ldr	r2, [pc, #240]	; (8004f84 <xTaskIncrementTick+0x154>)
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	f000 f995 	bl	80051c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e9a:	4b3b      	ldr	r3, [pc, #236]	; (8004f88 <xTaskIncrementTick+0x158>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d348      	bcc.n	8004f36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ea4:	4b35      	ldr	r3, [pc, #212]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eae:	4b36      	ldr	r3, [pc, #216]	; (8004f88 <xTaskIncrementTick+0x158>)
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb4:	601a      	str	r2, [r3, #0]
					break;
 8004eb6:	e03e      	b.n	8004f36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb8:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <xTaskIncrementTick+0x14c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d203      	bcs.n	8004ed8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ed0:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <xTaskIncrementTick+0x158>)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ed6:	e02e      	b.n	8004f36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fcac 	bl	800483a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	3318      	adds	r3, #24
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fca3 	bl	800483a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	2201      	movs	r2, #1
 8004efa:	409a      	lsls	r2, r3
 8004efc:	4b23      	ldr	r3, [pc, #140]	; (8004f8c <xTaskIncrementTick+0x15c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	4a22      	ldr	r2, [pc, #136]	; (8004f8c <xTaskIncrementTick+0x15c>)
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <xTaskIncrementTick+0x160>)
 8004f14:	441a      	add	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	f7ff fc2f 	bl	8004780 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f26:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <xTaskIncrementTick+0x164>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3b9      	bcc.n	8004ea4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f30:	2301      	movs	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f34:	e7b6      	b.n	8004ea4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f36:	4b17      	ldr	r3, [pc, #92]	; (8004f94 <xTaskIncrementTick+0x164>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4914      	ldr	r1, [pc, #80]	; (8004f90 <xTaskIncrementTick+0x160>)
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d901      	bls.n	8004f52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <xTaskIncrementTick+0x168>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e004      	b.n	8004f6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <xTaskIncrementTick+0x16c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <xTaskIncrementTick+0x16c>)
 8004f68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f6a:	697b      	ldr	r3, [r7, #20]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20000930 	.word	0x20000930
 8004f78:	2000090c 	.word	0x2000090c
 8004f7c:	200008c0 	.word	0x200008c0
 8004f80:	200008c4 	.word	0x200008c4
 8004f84:	20000920 	.word	0x20000920
 8004f88:	20000928 	.word	0x20000928
 8004f8c:	20000910 	.word	0x20000910
 8004f90:	2000080c 	.word	0x2000080c
 8004f94:	20000808 	.word	0x20000808
 8004f98:	2000091c 	.word	0x2000091c
 8004f9c:	20000918 	.word	0x20000918

08004fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fa6:	4b27      	ldr	r3, [pc, #156]	; (8005044 <vTaskSwitchContext+0xa4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fae:	4b26      	ldr	r3, [pc, #152]	; (8005048 <vTaskSwitchContext+0xa8>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fb4:	e03f      	b.n	8005036 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004fb6:	4b24      	ldr	r3, [pc, #144]	; (8005048 <vTaskSwitchContext+0xa8>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fbc:	4b23      	ldr	r3, [pc, #140]	; (800504c <vTaskSwitchContext+0xac>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004fca:	7afb      	ldrb	r3, [r7, #11]
 8004fcc:	f1c3 031f 	rsb	r3, r3, #31
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	491f      	ldr	r1, [pc, #124]	; (8005050 <vTaskSwitchContext+0xb0>)
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <vTaskSwitchContext+0x5c>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	607b      	str	r3, [r7, #4]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <vTaskSwitchContext+0x5a>
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4a12      	ldr	r2, [pc, #72]	; (8005050 <vTaskSwitchContext+0xb0>)
 8005008:	4413      	add	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	3308      	adds	r3, #8
 800501e:	429a      	cmp	r2, r3
 8005020:	d104      	bne.n	800502c <vTaskSwitchContext+0x8c>
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4a08      	ldr	r2, [pc, #32]	; (8005054 <vTaskSwitchContext+0xb4>)
 8005034:	6013      	str	r3, [r2, #0]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000930 	.word	0x20000930
 8005048:	2000091c 	.word	0x2000091c
 800504c:	20000910 	.word	0x20000910
 8005050:	2000080c 	.word	0x2000080c
 8005054:	20000808 	.word	0x20000808

08005058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005060:	f000 f852 	bl	8005108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <prvIdleTask+0x28>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d9f9      	bls.n	8005060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <prvIdleTask+0x2c>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800507c:	e7f0      	b.n	8005060 <prvIdleTask+0x8>
 800507e:	bf00      	nop
 8005080:	2000080c 	.word	0x2000080c
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800508e:	2300      	movs	r3, #0
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	e00c      	b.n	80050ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <prvInitialiseTaskLists+0x60>)
 80050a0:	4413      	add	r3, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fb3f 	bl	8004726 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3301      	adds	r3, #1
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	d9ef      	bls.n	8005094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050b4:	480d      	ldr	r0, [pc, #52]	; (80050ec <prvInitialiseTaskLists+0x64>)
 80050b6:	f7ff fb36 	bl	8004726 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050ba:	480d      	ldr	r0, [pc, #52]	; (80050f0 <prvInitialiseTaskLists+0x68>)
 80050bc:	f7ff fb33 	bl	8004726 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050c0:	480c      	ldr	r0, [pc, #48]	; (80050f4 <prvInitialiseTaskLists+0x6c>)
 80050c2:	f7ff fb30 	bl	8004726 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050c6:	480c      	ldr	r0, [pc, #48]	; (80050f8 <prvInitialiseTaskLists+0x70>)
 80050c8:	f7ff fb2d 	bl	8004726 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050cc:	480b      	ldr	r0, [pc, #44]	; (80050fc <prvInitialiseTaskLists+0x74>)
 80050ce:	f7ff fb2a 	bl	8004726 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050d2:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <prvInitialiseTaskLists+0x78>)
 80050d4:	4a05      	ldr	r2, [pc, #20]	; (80050ec <prvInitialiseTaskLists+0x64>)
 80050d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <prvInitialiseTaskLists+0x7c>)
 80050da:	4a05      	ldr	r2, [pc, #20]	; (80050f0 <prvInitialiseTaskLists+0x68>)
 80050dc:	601a      	str	r2, [r3, #0]
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	2000080c 	.word	0x2000080c
 80050ec:	20000898 	.word	0x20000898
 80050f0:	200008ac 	.word	0x200008ac
 80050f4:	200008c8 	.word	0x200008c8
 80050f8:	200008dc 	.word	0x200008dc
 80050fc:	200008f4 	.word	0x200008f4
 8005100:	200008c0 	.word	0x200008c0
 8005104:	200008c4 	.word	0x200008c4

08005108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800510e:	e019      	b.n	8005144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005110:	f000 fa08 	bl	8005524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005114:	4b10      	ldr	r3, [pc, #64]	; (8005158 <prvCheckTasksWaitingTermination+0x50>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff fb8a 	bl	800483a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <prvCheckTasksWaitingTermination+0x54>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3b01      	subs	r3, #1
 800512c:	4a0b      	ldr	r2, [pc, #44]	; (800515c <prvCheckTasksWaitingTermination+0x54>)
 800512e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3b01      	subs	r3, #1
 8005136:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800513a:	f000 fa23 	bl	8005584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f810 	bl	8005164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <prvCheckTasksWaitingTermination+0x58>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e1      	bne.n	8005110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200008dc 	.word	0x200008dc
 800515c:	20000908 	.word	0x20000908
 8005160:	200008f0 	.word	0x200008f0

08005164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fb80 	bl	8005880 <vPortFree>
				vPortFree( pxTCB );
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fb7d 	bl	8005880 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005186:	e018      	b.n	80051ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800518e:	2b01      	cmp	r3, #1
 8005190:	d103      	bne.n	800519a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fb74 	bl	8005880 <vPortFree>
	}
 8005198:	e00f      	b.n	80051ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d00a      	beq.n	80051ba <prvDeleteTCB+0x56>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	60fb      	str	r3, [r7, #12]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <prvDeleteTCB+0x54>
	}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ca:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <prvResetNextTaskUnblockTime+0x38>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051d4:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <prvResetNextTaskUnblockTime+0x3c>)
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295
 80051da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051dc:	e008      	b.n	80051f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <prvResetNextTaskUnblockTime+0x38>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	4a04      	ldr	r2, [pc, #16]	; (8005200 <prvResetNextTaskUnblockTime+0x3c>)
 80051ee:	6013      	str	r3, [r2, #0]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	200008c0 	.word	0x200008c0
 8005200:	20000928 	.word	0x20000928

08005204 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800520e:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005214:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3304      	adds	r3, #4
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fb0d 	bl	800483a <uxListRemove>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	2201      	movs	r2, #1
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43da      	mvns	r2, r3
 8005234:	4b21      	ldr	r3, [pc, #132]	; (80052bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4013      	ands	r3, r2
 800523a:	4a20      	ldr	r2, [pc, #128]	; (80052bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800523c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d10a      	bne.n	800525c <prvAddCurrentTaskToDelayedList+0x58>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800524c:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3304      	adds	r3, #4
 8005252:	4619      	mov	r1, r3
 8005254:	481a      	ldr	r0, [pc, #104]	; (80052c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005256:	f7ff fa93 	bl	8004780 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800525a:	e026      	b.n	80052aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4413      	add	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005264:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d209      	bcs.n	8005288 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005274:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7ff faa1 	bl	80047c8 <vListInsert>
}
 8005286:	e010      	b.n	80052aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3304      	adds	r3, #4
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f7ff fa97 	bl	80047c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800529a:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d202      	bcs.n	80052aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052a4:	4a09      	ldr	r2, [pc, #36]	; (80052cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6013      	str	r3, [r2, #0]
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	2000090c 	.word	0x2000090c
 80052b8:	20000808 	.word	0x20000808
 80052bc:	20000910 	.word	0x20000910
 80052c0:	200008f4 	.word	0x200008f4
 80052c4:	200008c4 	.word	0x200008c4
 80052c8:	200008c0 	.word	0x200008c0
 80052cc:	20000928 	.word	0x20000928

080052d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3b04      	subs	r3, #4
 80052e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3b04      	subs	r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3b04      	subs	r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005300:	4a0c      	ldr	r2, [pc, #48]	; (8005334 <pxPortInitialiseStack+0x64>)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b14      	subs	r3, #20
 800530a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	3b04      	subs	r3, #4
 8005316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f06f 0202 	mvn.w	r2, #2
 800531e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b20      	subs	r3, #32
 8005324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005326:	68fb      	ldr	r3, [r7, #12]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	08005339 	.word	0x08005339

08005338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <prvTaskExitError+0x54>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d00a      	beq.n	8005362 <prvTaskExitError+0x2a>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	60fb      	str	r3, [r7, #12]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <prvTaskExitError+0x28>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60bb      	str	r3, [r7, #8]
}
 8005374:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005376:	bf00      	nop
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0fc      	beq.n	8005378 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	20000018 	.word	0x20000018

08005390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <pxCurrentTCBConst2>)
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	6808      	ldr	r0, [r1, #0]
 8005396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	f380 8809 	msr	PSP, r0
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f380 8811 	msr	BASEPRI, r0
 80053aa:	4770      	bx	lr
 80053ac:	f3af 8000 	nop.w

080053b0 <pxCurrentTCBConst2>:
 80053b0:	20000808 	.word	0x20000808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053b8:	4808      	ldr	r0, [pc, #32]	; (80053dc <prvPortStartFirstTask+0x24>)
 80053ba:	6800      	ldr	r0, [r0, #0]
 80053bc:	6800      	ldr	r0, [r0, #0]
 80053be:	f380 8808 	msr	MSP, r0
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8814 	msr	CONTROL, r0
 80053ca:	b662      	cpsie	i
 80053cc:	b661      	cpsie	f
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	df00      	svc	0
 80053d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053da:	bf00      	nop
 80053dc:	e000ed08 	.word	0xe000ed08

080053e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053e6:	4b46      	ldr	r3, [pc, #280]	; (8005500 <xPortStartScheduler+0x120>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a46      	ldr	r2, [pc, #280]	; (8005504 <xPortStartScheduler+0x124>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d10a      	bne.n	8005406 <xPortStartScheduler+0x26>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	613b      	str	r3, [r7, #16]
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005406:	4b3e      	ldr	r3, [pc, #248]	; (8005500 <xPortStartScheduler+0x120>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a3f      	ldr	r2, [pc, #252]	; (8005508 <xPortStartScheduler+0x128>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10a      	bne.n	8005426 <xPortStartScheduler+0x46>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	60fb      	str	r3, [r7, #12]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005426:	4b39      	ldr	r3, [pc, #228]	; (800550c <xPortStartScheduler+0x12c>)
 8005428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	22ff      	movs	r2, #255	; 0xff
 8005436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4b31      	ldr	r3, [pc, #196]	; (8005510 <xPortStartScheduler+0x130>)
 800544c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800544e:	4b31      	ldr	r3, [pc, #196]	; (8005514 <xPortStartScheduler+0x134>)
 8005450:	2207      	movs	r2, #7
 8005452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005454:	e009      	b.n	800546a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005456:	4b2f      	ldr	r3, [pc, #188]	; (8005514 <xPortStartScheduler+0x134>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3b01      	subs	r3, #1
 800545c:	4a2d      	ldr	r2, [pc, #180]	; (8005514 <xPortStartScheduler+0x134>)
 800545e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d0ef      	beq.n	8005456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005476:	4b27      	ldr	r3, [pc, #156]	; (8005514 <xPortStartScheduler+0x134>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f1c3 0307 	rsb	r3, r3, #7
 800547e:	2b04      	cmp	r3, #4
 8005480:	d00a      	beq.n	8005498 <xPortStartScheduler+0xb8>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60bb      	str	r3, [r7, #8]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005498:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <xPortStartScheduler+0x134>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <xPortStartScheduler+0x134>)
 80054a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054a2:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <xPortStartScheduler+0x134>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054aa:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <xPortStartScheduler+0x134>)
 80054ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <xPortStartScheduler+0x138>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a17      	ldr	r2, [pc, #92]	; (8005518 <xPortStartScheduler+0x138>)
 80054bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <xPortStartScheduler+0x138>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a14      	ldr	r2, [pc, #80]	; (8005518 <xPortStartScheduler+0x138>)
 80054c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054ce:	f000 f8dd 	bl	800568c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054d2:	4b12      	ldr	r3, [pc, #72]	; (800551c <xPortStartScheduler+0x13c>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054d8:	f000 f8fc 	bl	80056d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054dc:	4b10      	ldr	r3, [pc, #64]	; (8005520 <xPortStartScheduler+0x140>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <xPortStartScheduler+0x140>)
 80054e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054e8:	f7ff ff66 	bl	80053b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054ec:	f7ff fd58 	bl	8004fa0 <vTaskSwitchContext>
	prvTaskExitError();
 80054f0:	f7ff ff22 	bl	8005338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	e000ed00 	.word	0xe000ed00
 8005504:	410fc271 	.word	0x410fc271
 8005508:	410fc270 	.word	0x410fc270
 800550c:	e000e400 	.word	0xe000e400
 8005510:	20000934 	.word	0x20000934
 8005514:	20000938 	.word	0x20000938
 8005518:	e000ed20 	.word	0xe000ed20
 800551c:	20000018 	.word	0x20000018
 8005520:	e000ef34 	.word	0xe000ef34

08005524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	607b      	str	r3, [r7, #4]
}
 800553c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <vPortEnterCritical+0x58>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	4a0d      	ldr	r2, [pc, #52]	; (800557c <vPortEnterCritical+0x58>)
 8005546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <vPortEnterCritical+0x58>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d10f      	bne.n	8005570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <vPortEnterCritical+0x5c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <vPortEnterCritical+0x4c>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	603b      	str	r3, [r7, #0]
}
 800556c:	bf00      	nop
 800556e:	e7fe      	b.n	800556e <vPortEnterCritical+0x4a>
	}
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	20000018 	.word	0x20000018
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <vPortExitCritical+0x50>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <vPortExitCritical+0x24>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	607b      	str	r3, [r7, #4]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <vPortExitCritical+0x50>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <vPortExitCritical+0x50>)
 80055b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <vPortExitCritical+0x50>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <vPortExitCritical+0x42>
 80055ba:	2300      	movs	r3, #0
 80055bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000018 	.word	0x20000018
	...

080055e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055e0:	f3ef 8009 	mrs	r0, PSP
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4b15      	ldr	r3, [pc, #84]	; (8005640 <pxCurrentTCBConst>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	f01e 0f10 	tst.w	lr, #16
 80055f0:	bf08      	it	eq
 80055f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fa:	6010      	str	r0, [r2, #0]
 80055fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005604:	f380 8811 	msr	BASEPRI, r0
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f7ff fcc6 	bl	8004fa0 <vTaskSwitchContext>
 8005614:	f04f 0000 	mov.w	r0, #0
 8005618:	f380 8811 	msr	BASEPRI, r0
 800561c:	bc09      	pop	{r0, r3}
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	6808      	ldr	r0, [r1, #0]
 8005622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005626:	f01e 0f10 	tst.w	lr, #16
 800562a:	bf08      	it	eq
 800562c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005630:	f380 8809 	msr	PSP, r0
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	f3af 8000 	nop.w

08005640 <pxCurrentTCBConst>:
 8005640:	20000808 	.word	0x20000808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
}
 8005660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005662:	f7ff fbe5 	bl	8004e30 <xTaskIncrementTick>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <SysTick_Handler+0x40>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f383 8811 	msr	BASEPRI, r3
}
 800567e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <vPortSetupTimerInterrupt+0x34>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005696:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <vPortSetupTimerInterrupt+0x38>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <vPortSetupTimerInterrupt+0x3c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <vPortSetupTimerInterrupt+0x40>)
 80056a2:	fba2 2303 	umull	r2, r3, r2, r3
 80056a6:	099b      	lsrs	r3, r3, #6
 80056a8:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <vPortSetupTimerInterrupt+0x44>)
 80056aa:	3b01      	subs	r3, #1
 80056ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056ae:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <vPortSetupTimerInterrupt+0x34>)
 80056b0:	2207      	movs	r2, #7
 80056b2:	601a      	str	r2, [r3, #0]
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	e000e010 	.word	0xe000e010
 80056c4:	e000e018 	.word	0xe000e018
 80056c8:	2000000c 	.word	0x2000000c
 80056cc:	10624dd3 	.word	0x10624dd3
 80056d0:	e000e014 	.word	0xe000e014

080056d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056e4 <vPortEnableVFP+0x10>
 80056d8:	6801      	ldr	r1, [r0, #0]
 80056da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056de:	6001      	str	r1, [r0, #0]
 80056e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056e2:	bf00      	nop
 80056e4:	e000ed88 	.word	0xe000ed88

080056e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056f4:	f7ff faf2 	bl	8004cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056f8:	4b5b      	ldr	r3, [pc, #364]	; (8005868 <pvPortMalloc+0x180>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005700:	f000 f920 	bl	8005944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005704:	4b59      	ldr	r3, [pc, #356]	; (800586c <pvPortMalloc+0x184>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 8093 	bne.w	8005838 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01d      	beq.n	8005754 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005718:	2208      	movs	r2, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b00      	cmp	r3, #0
 8005728:	d014      	beq.n	8005754 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f023 0307 	bic.w	r3, r3, #7
 8005730:	3308      	adds	r3, #8
 8005732:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <pvPortMalloc+0x6c>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	617b      	str	r3, [r7, #20]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d06e      	beq.n	8005838 <pvPortMalloc+0x150>
 800575a:	4b45      	ldr	r3, [pc, #276]	; (8005870 <pvPortMalloc+0x188>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	d869      	bhi.n	8005838 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005764:	4b43      	ldr	r3, [pc, #268]	; (8005874 <pvPortMalloc+0x18c>)
 8005766:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005768:	4b42      	ldr	r3, [pc, #264]	; (8005874 <pvPortMalloc+0x18c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800576e:	e004      	b.n	800577a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d903      	bls.n	800578c <pvPortMalloc+0xa4>
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f1      	bne.n	8005770 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <pvPortMalloc+0x180>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005792:	429a      	cmp	r2, r3
 8005794:	d050      	beq.n	8005838 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2208      	movs	r2, #8
 800579c:	4413      	add	r3, r2
 800579e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	2308      	movs	r3, #8
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d91f      	bls.n	80057f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <pvPortMalloc+0xf8>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	613b      	str	r3, [r7, #16]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057f2:	69b8      	ldr	r0, [r7, #24]
 80057f4:	f000 f908 	bl	8005a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057f8:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <pvPortMalloc+0x188>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <pvPortMalloc+0x188>)
 8005804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005806:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <pvPortMalloc+0x188>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <pvPortMalloc+0x190>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d203      	bcs.n	800581a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005812:	4b17      	ldr	r3, [pc, #92]	; (8005870 <pvPortMalloc+0x188>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <pvPortMalloc+0x190>)
 8005818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <pvPortMalloc+0x184>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	431a      	orrs	r2, r3
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800582e:	4b13      	ldr	r3, [pc, #76]	; (800587c <pvPortMalloc+0x194>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3301      	adds	r3, #1
 8005834:	4a11      	ldr	r2, [pc, #68]	; (800587c <pvPortMalloc+0x194>)
 8005836:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005838:	f7ff fa5e 	bl	8004cf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <pvPortMalloc+0x174>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	60fb      	str	r3, [r7, #12]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <pvPortMalloc+0x172>
	return pvReturn;
 800585c:	69fb      	ldr	r3, [r7, #28]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3728      	adds	r7, #40	; 0x28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20004544 	.word	0x20004544
 800586c:	20004558 	.word	0x20004558
 8005870:	20004548 	.word	0x20004548
 8005874:	2000453c 	.word	0x2000453c
 8005878:	2000454c 	.word	0x2000454c
 800587c:	20004550 	.word	0x20004550

08005880 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d04d      	beq.n	800592e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005892:	2308      	movs	r3, #8
 8005894:	425b      	negs	r3, r3
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4413      	add	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	4b24      	ldr	r3, [pc, #144]	; (8005938 <vPortFree+0xb8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <vPortFree+0x44>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <vPortFree+0x62>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	60bb      	str	r3, [r7, #8]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <vPortFree+0xb8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4013      	ands	r3, r2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01e      	beq.n	800592e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11a      	bne.n	800592e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <vPortFree+0xb8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	43db      	mvns	r3, r3
 8005902:	401a      	ands	r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005908:	f7ff f9e8 	bl	8004cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	4b0a      	ldr	r3, [pc, #40]	; (800593c <vPortFree+0xbc>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4413      	add	r3, r2
 8005916:	4a09      	ldr	r2, [pc, #36]	; (800593c <vPortFree+0xbc>)
 8005918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800591a:	6938      	ldr	r0, [r7, #16]
 800591c:	f000 f874 	bl	8005a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <vPortFree+0xc0>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3301      	adds	r3, #1
 8005926:	4a06      	ldr	r2, [pc, #24]	; (8005940 <vPortFree+0xc0>)
 8005928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800592a:	f7ff f9e5 	bl	8004cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800592e:	bf00      	nop
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20004558 	.word	0x20004558
 800593c:	20004548 	.word	0x20004548
 8005940:	20004554 	.word	0x20004554

08005944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800594a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800594e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005950:	4b27      	ldr	r3, [pc, #156]	; (80059f0 <prvHeapInit+0xac>)
 8005952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00c      	beq.n	8005978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3307      	adds	r3, #7
 8005962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0307 	bic.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <prvHeapInit+0xac>)
 8005974:	4413      	add	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800597c:	4a1d      	ldr	r2, [pc, #116]	; (80059f4 <prvHeapInit+0xb0>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005982:	4b1c      	ldr	r3, [pc, #112]	; (80059f4 <prvHeapInit+0xb0>)
 8005984:	2200      	movs	r2, #0
 8005986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4413      	add	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005990:	2208      	movs	r2, #8
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0307 	bic.w	r3, r3, #7
 800599e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a15      	ldr	r2, [pc, #84]	; (80059f8 <prvHeapInit+0xb4>)
 80059a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <prvHeapInit+0xb4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059ae:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <prvHeapInit+0xb4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	1ad2      	subs	r2, r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <prvHeapInit+0xb4>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	; (80059fc <prvHeapInit+0xb8>)
 80059d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <prvHeapInit+0xbc>)
 80059da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <prvHeapInit+0xc0>)
 80059de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	2000093c 	.word	0x2000093c
 80059f4:	2000453c 	.word	0x2000453c
 80059f8:	20004544 	.word	0x20004544
 80059fc:	2000454c 	.word	0x2000454c
 8005a00:	20004548 	.word	0x20004548
 8005a04:	20004558 	.word	0x20004558

08005a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a10:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <prvInsertBlockIntoFreeList+0xac>)
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e002      	b.n	8005a1c <prvInsertBlockIntoFreeList+0x14>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d8f7      	bhi.n	8005a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4413      	add	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d108      	bne.n	8005a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	441a      	add	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	441a      	add	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d118      	bne.n	8005a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d00d      	beq.n	8005a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	441a      	add	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e008      	b.n	8005a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a86:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e003      	b.n	8005a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d002      	beq.n	8005aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000453c 	.word	0x2000453c
 8005ab8:	20004544 	.word	0x20004544

08005abc <siprintf>:
 8005abc:	b40e      	push	{r1, r2, r3}
 8005abe:	b500      	push	{lr}
 8005ac0:	b09c      	sub	sp, #112	; 0x70
 8005ac2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ac4:	9002      	str	r0, [sp, #8]
 8005ac6:	9006      	str	r0, [sp, #24]
 8005ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005acc:	4809      	ldr	r0, [pc, #36]	; (8005af4 <siprintf+0x38>)
 8005ace:	9107      	str	r1, [sp, #28]
 8005ad0:	9104      	str	r1, [sp, #16]
 8005ad2:	4909      	ldr	r1, [pc, #36]	; (8005af8 <siprintf+0x3c>)
 8005ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ad8:	9105      	str	r1, [sp, #20]
 8005ada:	6800      	ldr	r0, [r0, #0]
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	a902      	add	r1, sp, #8
 8005ae0:	f000 f9a8 	bl	8005e34 <_svfiprintf_r>
 8005ae4:	9b02      	ldr	r3, [sp, #8]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
 8005aea:	b01c      	add	sp, #112	; 0x70
 8005aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005af0:	b003      	add	sp, #12
 8005af2:	4770      	bx	lr
 8005af4:	20000068 	.word	0x20000068
 8005af8:	ffff0208 	.word	0xffff0208

08005afc <memset>:
 8005afc:	4402      	add	r2, r0
 8005afe:	4603      	mov	r3, r0
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d100      	bne.n	8005b06 <memset+0xa>
 8005b04:	4770      	bx	lr
 8005b06:	f803 1b01 	strb.w	r1, [r3], #1
 8005b0a:	e7f9      	b.n	8005b00 <memset+0x4>

08005b0c <__errno>:
 8005b0c:	4b01      	ldr	r3, [pc, #4]	; (8005b14 <__errno+0x8>)
 8005b0e:	6818      	ldr	r0, [r3, #0]
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000068 	.word	0x20000068

08005b18 <__libc_init_array>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	4d0d      	ldr	r5, [pc, #52]	; (8005b50 <__libc_init_array+0x38>)
 8005b1c:	4c0d      	ldr	r4, [pc, #52]	; (8005b54 <__libc_init_array+0x3c>)
 8005b1e:	1b64      	subs	r4, r4, r5
 8005b20:	10a4      	asrs	r4, r4, #2
 8005b22:	2600      	movs	r6, #0
 8005b24:	42a6      	cmp	r6, r4
 8005b26:	d109      	bne.n	8005b3c <__libc_init_array+0x24>
 8005b28:	4d0b      	ldr	r5, [pc, #44]	; (8005b58 <__libc_init_array+0x40>)
 8005b2a:	4c0c      	ldr	r4, [pc, #48]	; (8005b5c <__libc_init_array+0x44>)
 8005b2c:	f000 fc72 	bl	8006414 <_init>
 8005b30:	1b64      	subs	r4, r4, r5
 8005b32:	10a4      	asrs	r4, r4, #2
 8005b34:	2600      	movs	r6, #0
 8005b36:	42a6      	cmp	r6, r4
 8005b38:	d105      	bne.n	8005b46 <__libc_init_array+0x2e>
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b40:	4798      	blx	r3
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7ee      	b.n	8005b24 <__libc_init_array+0xc>
 8005b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4a:	4798      	blx	r3
 8005b4c:	3601      	adds	r6, #1
 8005b4e:	e7f2      	b.n	8005b36 <__libc_init_array+0x1e>
 8005b50:	0800730c 	.word	0x0800730c
 8005b54:	0800730c 	.word	0x0800730c
 8005b58:	0800730c 	.word	0x0800730c
 8005b5c:	08007310 	.word	0x08007310

08005b60 <__retarget_lock_acquire_recursive>:
 8005b60:	4770      	bx	lr

08005b62 <__retarget_lock_release_recursive>:
 8005b62:	4770      	bx	lr

08005b64 <strcpy>:
 8005b64:	4603      	mov	r3, r0
 8005b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6a:	f803 2b01 	strb.w	r2, [r3], #1
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	d1f9      	bne.n	8005b66 <strcpy+0x2>
 8005b72:	4770      	bx	lr

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <_free_r>:
 8005b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d044      	beq.n	8005c20 <_free_r+0x90>
 8005b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9a:	9001      	str	r0, [sp, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ba2:	bfb8      	it	lt
 8005ba4:	18e4      	addlt	r4, r4, r3
 8005ba6:	f000 f8df 	bl	8005d68 <__malloc_lock>
 8005baa:	4a1e      	ldr	r2, [pc, #120]	; (8005c24 <_free_r+0x94>)
 8005bac:	9801      	ldr	r0, [sp, #4]
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	b933      	cbnz	r3, 8005bc0 <_free_r+0x30>
 8005bb2:	6063      	str	r3, [r4, #4]
 8005bb4:	6014      	str	r4, [r2, #0]
 8005bb6:	b003      	add	sp, #12
 8005bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bbc:	f000 b8da 	b.w	8005d74 <__malloc_unlock>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d908      	bls.n	8005bd6 <_free_r+0x46>
 8005bc4:	6825      	ldr	r5, [r4, #0]
 8005bc6:	1961      	adds	r1, r4, r5
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	bf01      	itttt	eq
 8005bcc:	6819      	ldreq	r1, [r3, #0]
 8005bce:	685b      	ldreq	r3, [r3, #4]
 8005bd0:	1949      	addeq	r1, r1, r5
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	e7ed      	b.n	8005bb2 <_free_r+0x22>
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b10b      	cbz	r3, 8005be0 <_free_r+0x50>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d9fa      	bls.n	8005bd6 <_free_r+0x46>
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	1855      	adds	r5, r2, r1
 8005be4:	42a5      	cmp	r5, r4
 8005be6:	d10b      	bne.n	8005c00 <_free_r+0x70>
 8005be8:	6824      	ldr	r4, [r4, #0]
 8005bea:	4421      	add	r1, r4
 8005bec:	1854      	adds	r4, r2, r1
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	d1e0      	bne.n	8005bb6 <_free_r+0x26>
 8005bf4:	681c      	ldr	r4, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	6053      	str	r3, [r2, #4]
 8005bfa:	440c      	add	r4, r1
 8005bfc:	6014      	str	r4, [r2, #0]
 8005bfe:	e7da      	b.n	8005bb6 <_free_r+0x26>
 8005c00:	d902      	bls.n	8005c08 <_free_r+0x78>
 8005c02:	230c      	movs	r3, #12
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	e7d6      	b.n	8005bb6 <_free_r+0x26>
 8005c08:	6825      	ldr	r5, [r4, #0]
 8005c0a:	1961      	adds	r1, r4, r5
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf04      	itt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	bf04      	itt	eq
 8005c18:	1949      	addeq	r1, r1, r5
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	6054      	str	r4, [r2, #4]
 8005c1e:	e7ca      	b.n	8005bb6 <_free_r+0x26>
 8005c20:	b003      	add	sp, #12
 8005c22:	bd30      	pop	{r4, r5, pc}
 8005c24:	2000469c 	.word	0x2000469c

08005c28 <sbrk_aligned>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	4e0e      	ldr	r6, [pc, #56]	; (8005c64 <sbrk_aligned+0x3c>)
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	6831      	ldr	r1, [r6, #0]
 8005c30:	4605      	mov	r5, r0
 8005c32:	b911      	cbnz	r1, 8005c3a <sbrk_aligned+0x12>
 8005c34:	f000 fba6 	bl	8006384 <_sbrk_r>
 8005c38:	6030      	str	r0, [r6, #0]
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 fba1 	bl	8006384 <_sbrk_r>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	d00a      	beq.n	8005c5c <sbrk_aligned+0x34>
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d007      	beq.n	8005c60 <sbrk_aligned+0x38>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 fb96 	bl	8006384 <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d101      	bne.n	8005c60 <sbrk_aligned+0x38>
 8005c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005c60:	4620      	mov	r0, r4
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	200046a0 	.word	0x200046a0

08005c68 <_malloc_r>:
 8005c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c6c:	1ccd      	adds	r5, r1, #3
 8005c6e:	f025 0503 	bic.w	r5, r5, #3
 8005c72:	3508      	adds	r5, #8
 8005c74:	2d0c      	cmp	r5, #12
 8005c76:	bf38      	it	cc
 8005c78:	250c      	movcc	r5, #12
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	db01      	blt.n	8005c84 <_malloc_r+0x1c>
 8005c80:	42a9      	cmp	r1, r5
 8005c82:	d905      	bls.n	8005c90 <_malloc_r+0x28>
 8005c84:	230c      	movs	r3, #12
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	2600      	movs	r6, #0
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d64 <_malloc_r+0xfc>
 8005c94:	f000 f868 	bl	8005d68 <__malloc_lock>
 8005c98:	f8d8 3000 	ldr.w	r3, [r8]
 8005c9c:	461c      	mov	r4, r3
 8005c9e:	bb5c      	cbnz	r4, 8005cf8 <_malloc_r+0x90>
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	f7ff ffc0 	bl	8005c28 <sbrk_aligned>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	4604      	mov	r4, r0
 8005cac:	d155      	bne.n	8005d5a <_malloc_r+0xf2>
 8005cae:	f8d8 4000 	ldr.w	r4, [r8]
 8005cb2:	4626      	mov	r6, r4
 8005cb4:	2e00      	cmp	r6, #0
 8005cb6:	d145      	bne.n	8005d44 <_malloc_r+0xdc>
 8005cb8:	2c00      	cmp	r4, #0
 8005cba:	d048      	beq.n	8005d4e <_malloc_r+0xe6>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	eb04 0903 	add.w	r9, r4, r3
 8005cc6:	f000 fb5d 	bl	8006384 <_sbrk_r>
 8005cca:	4581      	cmp	r9, r0
 8005ccc:	d13f      	bne.n	8005d4e <_malloc_r+0xe6>
 8005cce:	6821      	ldr	r1, [r4, #0]
 8005cd0:	1a6d      	subs	r5, r5, r1
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f7ff ffa7 	bl	8005c28 <sbrk_aligned>
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d037      	beq.n	8005d4e <_malloc_r+0xe6>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	442b      	add	r3, r5
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d038      	beq.n	8005d5e <_malloc_r+0xf6>
 8005cec:	685a      	ldr	r2, [r3, #4]
 8005cee:	42a2      	cmp	r2, r4
 8005cf0:	d12b      	bne.n	8005d4a <_malloc_r+0xe2>
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	e00f      	b.n	8005d18 <_malloc_r+0xb0>
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	1b52      	subs	r2, r2, r5
 8005cfc:	d41f      	bmi.n	8005d3e <_malloc_r+0xd6>
 8005cfe:	2a0b      	cmp	r2, #11
 8005d00:	d917      	bls.n	8005d32 <_malloc_r+0xca>
 8005d02:	1961      	adds	r1, r4, r5
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	6025      	str	r5, [r4, #0]
 8005d08:	bf18      	it	ne
 8005d0a:	6059      	strne	r1, [r3, #4]
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	bf08      	it	eq
 8005d10:	f8c8 1000 	streq.w	r1, [r8]
 8005d14:	5162      	str	r2, [r4, r5]
 8005d16:	604b      	str	r3, [r1, #4]
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f104 060b 	add.w	r6, r4, #11
 8005d1e:	f000 f829 	bl	8005d74 <__malloc_unlock>
 8005d22:	f026 0607 	bic.w	r6, r6, #7
 8005d26:	1d23      	adds	r3, r4, #4
 8005d28:	1af2      	subs	r2, r6, r3
 8005d2a:	d0ae      	beq.n	8005c8a <_malloc_r+0x22>
 8005d2c:	1b9b      	subs	r3, r3, r6
 8005d2e:	50a3      	str	r3, [r4, r2]
 8005d30:	e7ab      	b.n	8005c8a <_malloc_r+0x22>
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	6862      	ldr	r2, [r4, #4]
 8005d36:	d1dd      	bne.n	8005cf4 <_malloc_r+0x8c>
 8005d38:	f8c8 2000 	str.w	r2, [r8]
 8005d3c:	e7ec      	b.n	8005d18 <_malloc_r+0xb0>
 8005d3e:	4623      	mov	r3, r4
 8005d40:	6864      	ldr	r4, [r4, #4]
 8005d42:	e7ac      	b.n	8005c9e <_malloc_r+0x36>
 8005d44:	4634      	mov	r4, r6
 8005d46:	6876      	ldr	r6, [r6, #4]
 8005d48:	e7b4      	b.n	8005cb4 <_malloc_r+0x4c>
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	e7cc      	b.n	8005ce8 <_malloc_r+0x80>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	603b      	str	r3, [r7, #0]
 8005d52:	4638      	mov	r0, r7
 8005d54:	f000 f80e 	bl	8005d74 <__malloc_unlock>
 8005d58:	e797      	b.n	8005c8a <_malloc_r+0x22>
 8005d5a:	6025      	str	r5, [r4, #0]
 8005d5c:	e7dc      	b.n	8005d18 <_malloc_r+0xb0>
 8005d5e:	605b      	str	r3, [r3, #4]
 8005d60:	deff      	udf	#255	; 0xff
 8005d62:	bf00      	nop
 8005d64:	2000469c 	.word	0x2000469c

08005d68 <__malloc_lock>:
 8005d68:	4801      	ldr	r0, [pc, #4]	; (8005d70 <__malloc_lock+0x8>)
 8005d6a:	f7ff bef9 	b.w	8005b60 <__retarget_lock_acquire_recursive>
 8005d6e:	bf00      	nop
 8005d70:	20004698 	.word	0x20004698

08005d74 <__malloc_unlock>:
 8005d74:	4801      	ldr	r0, [pc, #4]	; (8005d7c <__malloc_unlock+0x8>)
 8005d76:	f7ff bef4 	b.w	8005b62 <__retarget_lock_release_recursive>
 8005d7a:	bf00      	nop
 8005d7c:	20004698 	.word	0x20004698

08005d80 <__ssputs_r>:
 8005d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d84:	688e      	ldr	r6, [r1, #8]
 8005d86:	461f      	mov	r7, r3
 8005d88:	42be      	cmp	r6, r7
 8005d8a:	680b      	ldr	r3, [r1, #0]
 8005d8c:	4682      	mov	sl, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	4690      	mov	r8, r2
 8005d92:	d82c      	bhi.n	8005dee <__ssputs_r+0x6e>
 8005d94:	898a      	ldrh	r2, [r1, #12]
 8005d96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d9a:	d026      	beq.n	8005dea <__ssputs_r+0x6a>
 8005d9c:	6965      	ldr	r5, [r4, #20]
 8005d9e:	6909      	ldr	r1, [r1, #16]
 8005da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005da4:	eba3 0901 	sub.w	r9, r3, r1
 8005da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dac:	1c7b      	adds	r3, r7, #1
 8005dae:	444b      	add	r3, r9
 8005db0:	106d      	asrs	r5, r5, #1
 8005db2:	429d      	cmp	r5, r3
 8005db4:	bf38      	it	cc
 8005db6:	461d      	movcc	r5, r3
 8005db8:	0553      	lsls	r3, r2, #21
 8005dba:	d527      	bpl.n	8005e0c <__ssputs_r+0x8c>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	f7ff ff53 	bl	8005c68 <_malloc_r>
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	b360      	cbz	r0, 8005e20 <__ssputs_r+0xa0>
 8005dc6:	6921      	ldr	r1, [r4, #16]
 8005dc8:	464a      	mov	r2, r9
 8005dca:	f7ff fed3 	bl	8005b74 <memcpy>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	6126      	str	r6, [r4, #16]
 8005ddc:	6165      	str	r5, [r4, #20]
 8005dde:	444e      	add	r6, r9
 8005de0:	eba5 0509 	sub.w	r5, r5, r9
 8005de4:	6026      	str	r6, [r4, #0]
 8005de6:	60a5      	str	r5, [r4, #8]
 8005de8:	463e      	mov	r6, r7
 8005dea:	42be      	cmp	r6, r7
 8005dec:	d900      	bls.n	8005df0 <__ssputs_r+0x70>
 8005dee:	463e      	mov	r6, r7
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	4632      	mov	r2, r6
 8005df4:	4641      	mov	r1, r8
 8005df6:	f000 faab 	bl	8006350 <memmove>
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	1b9b      	subs	r3, r3, r6
 8005dfe:	60a3      	str	r3, [r4, #8]
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	4433      	add	r3, r6
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2000      	movs	r0, #0
 8005e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	f000 fac9 	bl	80063a4 <_realloc_r>
 8005e12:	4606      	mov	r6, r0
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1e0      	bne.n	8005dda <__ssputs_r+0x5a>
 8005e18:	6921      	ldr	r1, [r4, #16]
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	f7ff feb8 	bl	8005b90 <_free_r>
 8005e20:	230c      	movs	r3, #12
 8005e22:	f8ca 3000 	str.w	r3, [sl]
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e32:	e7e9      	b.n	8005e08 <__ssputs_r+0x88>

08005e34 <_svfiprintf_r>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	4698      	mov	r8, r3
 8005e3a:	898b      	ldrh	r3, [r1, #12]
 8005e3c:	061b      	lsls	r3, r3, #24
 8005e3e:	b09d      	sub	sp, #116	; 0x74
 8005e40:	4607      	mov	r7, r0
 8005e42:	460d      	mov	r5, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	d50e      	bpl.n	8005e66 <_svfiprintf_r+0x32>
 8005e48:	690b      	ldr	r3, [r1, #16]
 8005e4a:	b963      	cbnz	r3, 8005e66 <_svfiprintf_r+0x32>
 8005e4c:	2140      	movs	r1, #64	; 0x40
 8005e4e:	f7ff ff0b 	bl	8005c68 <_malloc_r>
 8005e52:	6028      	str	r0, [r5, #0]
 8005e54:	6128      	str	r0, [r5, #16]
 8005e56:	b920      	cbnz	r0, 8005e62 <_svfiprintf_r+0x2e>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e60:	e0d0      	b.n	8006004 <_svfiprintf_r+0x1d0>
 8005e62:	2340      	movs	r3, #64	; 0x40
 8005e64:	616b      	str	r3, [r5, #20]
 8005e66:	2300      	movs	r3, #0
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e74:	2330      	movs	r3, #48	; 0x30
 8005e76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800601c <_svfiprintf_r+0x1e8>
 8005e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e7e:	f04f 0901 	mov.w	r9, #1
 8005e82:	4623      	mov	r3, r4
 8005e84:	469a      	mov	sl, r3
 8005e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e8a:	b10a      	cbz	r2, 8005e90 <_svfiprintf_r+0x5c>
 8005e8c:	2a25      	cmp	r2, #37	; 0x25
 8005e8e:	d1f9      	bne.n	8005e84 <_svfiprintf_r+0x50>
 8005e90:	ebba 0b04 	subs.w	fp, sl, r4
 8005e94:	d00b      	beq.n	8005eae <_svfiprintf_r+0x7a>
 8005e96:	465b      	mov	r3, fp
 8005e98:	4622      	mov	r2, r4
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff ff6f 	bl	8005d80 <__ssputs_r>
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f000 80a9 	beq.w	8005ffa <_svfiprintf_r+0x1c6>
 8005ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eaa:	445a      	add	r2, fp
 8005eac:	9209      	str	r2, [sp, #36]	; 0x24
 8005eae:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80a1 	beq.w	8005ffa <_svfiprintf_r+0x1c6>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ec2:	f10a 0a01 	add.w	sl, sl, #1
 8005ec6:	9304      	str	r3, [sp, #16]
 8005ec8:	9307      	str	r3, [sp, #28]
 8005eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ece:	931a      	str	r3, [sp, #104]	; 0x68
 8005ed0:	4654      	mov	r4, sl
 8005ed2:	2205      	movs	r2, #5
 8005ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed8:	4850      	ldr	r0, [pc, #320]	; (800601c <_svfiprintf_r+0x1e8>)
 8005eda:	f7fa f9a1 	bl	8000220 <memchr>
 8005ede:	9a04      	ldr	r2, [sp, #16]
 8005ee0:	b9d8      	cbnz	r0, 8005f1a <_svfiprintf_r+0xe6>
 8005ee2:	06d0      	lsls	r0, r2, #27
 8005ee4:	bf44      	itt	mi
 8005ee6:	2320      	movmi	r3, #32
 8005ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eec:	0711      	lsls	r1, r2, #28
 8005eee:	bf44      	itt	mi
 8005ef0:	232b      	movmi	r3, #43	; 0x2b
 8005ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8005efa:	2b2a      	cmp	r3, #42	; 0x2a
 8005efc:	d015      	beq.n	8005f2a <_svfiprintf_r+0xf6>
 8005efe:	9a07      	ldr	r2, [sp, #28]
 8005f00:	4654      	mov	r4, sl
 8005f02:	2000      	movs	r0, #0
 8005f04:	f04f 0c0a 	mov.w	ip, #10
 8005f08:	4621      	mov	r1, r4
 8005f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f0e:	3b30      	subs	r3, #48	; 0x30
 8005f10:	2b09      	cmp	r3, #9
 8005f12:	d94d      	bls.n	8005fb0 <_svfiprintf_r+0x17c>
 8005f14:	b1b0      	cbz	r0, 8005f44 <_svfiprintf_r+0x110>
 8005f16:	9207      	str	r2, [sp, #28]
 8005f18:	e014      	b.n	8005f44 <_svfiprintf_r+0x110>
 8005f1a:	eba0 0308 	sub.w	r3, r0, r8
 8005f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	9304      	str	r3, [sp, #16]
 8005f26:	46a2      	mov	sl, r4
 8005f28:	e7d2      	b.n	8005ed0 <_svfiprintf_r+0x9c>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	9103      	str	r1, [sp, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bfbb      	ittet	lt
 8005f36:	425b      	neglt	r3, r3
 8005f38:	f042 0202 	orrlt.w	r2, r2, #2
 8005f3c:	9307      	strge	r3, [sp, #28]
 8005f3e:	9307      	strlt	r3, [sp, #28]
 8005f40:	bfb8      	it	lt
 8005f42:	9204      	strlt	r2, [sp, #16]
 8005f44:	7823      	ldrb	r3, [r4, #0]
 8005f46:	2b2e      	cmp	r3, #46	; 0x2e
 8005f48:	d10c      	bne.n	8005f64 <_svfiprintf_r+0x130>
 8005f4a:	7863      	ldrb	r3, [r4, #1]
 8005f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f4e:	d134      	bne.n	8005fba <_svfiprintf_r+0x186>
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	1d1a      	adds	r2, r3, #4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	9203      	str	r2, [sp, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bfb8      	it	lt
 8005f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f60:	3402      	adds	r4, #2
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800602c <_svfiprintf_r+0x1f8>
 8005f68:	7821      	ldrb	r1, [r4, #0]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	f7fa f957 	bl	8000220 <memchr>
 8005f72:	b138      	cbz	r0, 8005f84 <_svfiprintf_r+0x150>
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	eba0 000a 	sub.w	r0, r0, sl
 8005f7a:	2240      	movs	r2, #64	; 0x40
 8005f7c:	4082      	lsls	r2, r0
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	3401      	adds	r4, #1
 8005f82:	9304      	str	r3, [sp, #16]
 8005f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f88:	4825      	ldr	r0, [pc, #148]	; (8006020 <_svfiprintf_r+0x1ec>)
 8005f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f8e:	2206      	movs	r2, #6
 8005f90:	f7fa f946 	bl	8000220 <memchr>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d038      	beq.n	800600a <_svfiprintf_r+0x1d6>
 8005f98:	4b22      	ldr	r3, [pc, #136]	; (8006024 <_svfiprintf_r+0x1f0>)
 8005f9a:	bb1b      	cbnz	r3, 8005fe4 <_svfiprintf_r+0x1b0>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	3307      	adds	r3, #7
 8005fa0:	f023 0307 	bic.w	r3, r3, #7
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005faa:	4433      	add	r3, r6
 8005fac:	9309      	str	r3, [sp, #36]	; 0x24
 8005fae:	e768      	b.n	8005e82 <_svfiprintf_r+0x4e>
 8005fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	e7a6      	b.n	8005f08 <_svfiprintf_r+0xd4>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	3401      	adds	r4, #1
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	f04f 0c0a 	mov.w	ip, #10
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fcc:	3a30      	subs	r2, #48	; 0x30
 8005fce:	2a09      	cmp	r2, #9
 8005fd0:	d903      	bls.n	8005fda <_svfiprintf_r+0x1a6>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0c6      	beq.n	8005f64 <_svfiprintf_r+0x130>
 8005fd6:	9105      	str	r1, [sp, #20]
 8005fd8:	e7c4      	b.n	8005f64 <_svfiprintf_r+0x130>
 8005fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fde:	4604      	mov	r4, r0
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e7f0      	b.n	8005fc6 <_svfiprintf_r+0x192>
 8005fe4:	ab03      	add	r3, sp, #12
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	462a      	mov	r2, r5
 8005fea:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <_svfiprintf_r+0x1f4>)
 8005fec:	a904      	add	r1, sp, #16
 8005fee:	4638      	mov	r0, r7
 8005ff0:	f3af 8000 	nop.w
 8005ff4:	1c42      	adds	r2, r0, #1
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	d1d6      	bne.n	8005fa8 <_svfiprintf_r+0x174>
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	065b      	lsls	r3, r3, #25
 8005ffe:	f53f af2d 	bmi.w	8005e5c <_svfiprintf_r+0x28>
 8006002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006004:	b01d      	add	sp, #116	; 0x74
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	ab03      	add	r3, sp, #12
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	462a      	mov	r2, r5
 8006010:	4b05      	ldr	r3, [pc, #20]	; (8006028 <_svfiprintf_r+0x1f4>)
 8006012:	a904      	add	r1, sp, #16
 8006014:	4638      	mov	r0, r7
 8006016:	f000 f879 	bl	800610c <_printf_i>
 800601a:	e7eb      	b.n	8005ff4 <_svfiprintf_r+0x1c0>
 800601c:	080072d0 	.word	0x080072d0
 8006020:	080072da 	.word	0x080072da
 8006024:	00000000 	.word	0x00000000
 8006028:	08005d81 	.word	0x08005d81
 800602c:	080072d6 	.word	0x080072d6

08006030 <_printf_common>:
 8006030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006034:	4616      	mov	r6, r2
 8006036:	4699      	mov	r9, r3
 8006038:	688a      	ldr	r2, [r1, #8]
 800603a:	690b      	ldr	r3, [r1, #16]
 800603c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006040:	4293      	cmp	r3, r2
 8006042:	bfb8      	it	lt
 8006044:	4613      	movlt	r3, r2
 8006046:	6033      	str	r3, [r6, #0]
 8006048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800604c:	4607      	mov	r7, r0
 800604e:	460c      	mov	r4, r1
 8006050:	b10a      	cbz	r2, 8006056 <_printf_common+0x26>
 8006052:	3301      	adds	r3, #1
 8006054:	6033      	str	r3, [r6, #0]
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	0699      	lsls	r1, r3, #26
 800605a:	bf42      	ittt	mi
 800605c:	6833      	ldrmi	r3, [r6, #0]
 800605e:	3302      	addmi	r3, #2
 8006060:	6033      	strmi	r3, [r6, #0]
 8006062:	6825      	ldr	r5, [r4, #0]
 8006064:	f015 0506 	ands.w	r5, r5, #6
 8006068:	d106      	bne.n	8006078 <_printf_common+0x48>
 800606a:	f104 0a19 	add.w	sl, r4, #25
 800606e:	68e3      	ldr	r3, [r4, #12]
 8006070:	6832      	ldr	r2, [r6, #0]
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	42ab      	cmp	r3, r5
 8006076:	dc26      	bgt.n	80060c6 <_printf_common+0x96>
 8006078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800607c:	1e13      	subs	r3, r2, #0
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	bf18      	it	ne
 8006082:	2301      	movne	r3, #1
 8006084:	0692      	lsls	r2, r2, #26
 8006086:	d42b      	bmi.n	80060e0 <_printf_common+0xb0>
 8006088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800608c:	4649      	mov	r1, r9
 800608e:	4638      	mov	r0, r7
 8006090:	47c0      	blx	r8
 8006092:	3001      	adds	r0, #1
 8006094:	d01e      	beq.n	80060d4 <_printf_common+0xa4>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	6922      	ldr	r2, [r4, #16]
 800609a:	f003 0306 	and.w	r3, r3, #6
 800609e:	2b04      	cmp	r3, #4
 80060a0:	bf02      	ittt	eq
 80060a2:	68e5      	ldreq	r5, [r4, #12]
 80060a4:	6833      	ldreq	r3, [r6, #0]
 80060a6:	1aed      	subeq	r5, r5, r3
 80060a8:	68a3      	ldr	r3, [r4, #8]
 80060aa:	bf0c      	ite	eq
 80060ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b0:	2500      	movne	r5, #0
 80060b2:	4293      	cmp	r3, r2
 80060b4:	bfc4      	itt	gt
 80060b6:	1a9b      	subgt	r3, r3, r2
 80060b8:	18ed      	addgt	r5, r5, r3
 80060ba:	2600      	movs	r6, #0
 80060bc:	341a      	adds	r4, #26
 80060be:	42b5      	cmp	r5, r6
 80060c0:	d11a      	bne.n	80060f8 <_printf_common+0xc8>
 80060c2:	2000      	movs	r0, #0
 80060c4:	e008      	b.n	80060d8 <_printf_common+0xa8>
 80060c6:	2301      	movs	r3, #1
 80060c8:	4652      	mov	r2, sl
 80060ca:	4649      	mov	r1, r9
 80060cc:	4638      	mov	r0, r7
 80060ce:	47c0      	blx	r8
 80060d0:	3001      	adds	r0, #1
 80060d2:	d103      	bne.n	80060dc <_printf_common+0xac>
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060dc:	3501      	adds	r5, #1
 80060de:	e7c6      	b.n	800606e <_printf_common+0x3e>
 80060e0:	18e1      	adds	r1, r4, r3
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	2030      	movs	r0, #48	; 0x30
 80060e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ea:	4422      	add	r2, r4
 80060ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f4:	3302      	adds	r3, #2
 80060f6:	e7c7      	b.n	8006088 <_printf_common+0x58>
 80060f8:	2301      	movs	r3, #1
 80060fa:	4622      	mov	r2, r4
 80060fc:	4649      	mov	r1, r9
 80060fe:	4638      	mov	r0, r7
 8006100:	47c0      	blx	r8
 8006102:	3001      	adds	r0, #1
 8006104:	d0e6      	beq.n	80060d4 <_printf_common+0xa4>
 8006106:	3601      	adds	r6, #1
 8006108:	e7d9      	b.n	80060be <_printf_common+0x8e>
	...

0800610c <_printf_i>:
 800610c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	7e0f      	ldrb	r7, [r1, #24]
 8006112:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006114:	2f78      	cmp	r7, #120	; 0x78
 8006116:	4691      	mov	r9, r2
 8006118:	4680      	mov	r8, r0
 800611a:	460c      	mov	r4, r1
 800611c:	469a      	mov	sl, r3
 800611e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006122:	d807      	bhi.n	8006134 <_printf_i+0x28>
 8006124:	2f62      	cmp	r7, #98	; 0x62
 8006126:	d80a      	bhi.n	800613e <_printf_i+0x32>
 8006128:	2f00      	cmp	r7, #0
 800612a:	f000 80d4 	beq.w	80062d6 <_printf_i+0x1ca>
 800612e:	2f58      	cmp	r7, #88	; 0x58
 8006130:	f000 80c0 	beq.w	80062b4 <_printf_i+0x1a8>
 8006134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800613c:	e03a      	b.n	80061b4 <_printf_i+0xa8>
 800613e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006142:	2b15      	cmp	r3, #21
 8006144:	d8f6      	bhi.n	8006134 <_printf_i+0x28>
 8006146:	a101      	add	r1, pc, #4	; (adr r1, 800614c <_printf_i+0x40>)
 8006148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800614c:	080061a5 	.word	0x080061a5
 8006150:	080061b9 	.word	0x080061b9
 8006154:	08006135 	.word	0x08006135
 8006158:	08006135 	.word	0x08006135
 800615c:	08006135 	.word	0x08006135
 8006160:	08006135 	.word	0x08006135
 8006164:	080061b9 	.word	0x080061b9
 8006168:	08006135 	.word	0x08006135
 800616c:	08006135 	.word	0x08006135
 8006170:	08006135 	.word	0x08006135
 8006174:	08006135 	.word	0x08006135
 8006178:	080062bd 	.word	0x080062bd
 800617c:	080061e5 	.word	0x080061e5
 8006180:	08006277 	.word	0x08006277
 8006184:	08006135 	.word	0x08006135
 8006188:	08006135 	.word	0x08006135
 800618c:	080062df 	.word	0x080062df
 8006190:	08006135 	.word	0x08006135
 8006194:	080061e5 	.word	0x080061e5
 8006198:	08006135 	.word	0x08006135
 800619c:	08006135 	.word	0x08006135
 80061a0:	0800627f 	.word	0x0800627f
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	1d1a      	adds	r2, r3, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	602a      	str	r2, [r5, #0]
 80061ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b4:	2301      	movs	r3, #1
 80061b6:	e09f      	b.n	80062f8 <_printf_i+0x1ec>
 80061b8:	6820      	ldr	r0, [r4, #0]
 80061ba:	682b      	ldr	r3, [r5, #0]
 80061bc:	0607      	lsls	r7, r0, #24
 80061be:	f103 0104 	add.w	r1, r3, #4
 80061c2:	6029      	str	r1, [r5, #0]
 80061c4:	d501      	bpl.n	80061ca <_printf_i+0xbe>
 80061c6:	681e      	ldr	r6, [r3, #0]
 80061c8:	e003      	b.n	80061d2 <_printf_i+0xc6>
 80061ca:	0646      	lsls	r6, r0, #25
 80061cc:	d5fb      	bpl.n	80061c6 <_printf_i+0xba>
 80061ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	da03      	bge.n	80061de <_printf_i+0xd2>
 80061d6:	232d      	movs	r3, #45	; 0x2d
 80061d8:	4276      	negs	r6, r6
 80061da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061de:	485a      	ldr	r0, [pc, #360]	; (8006348 <_printf_i+0x23c>)
 80061e0:	230a      	movs	r3, #10
 80061e2:	e012      	b.n	800620a <_printf_i+0xfe>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	6820      	ldr	r0, [r4, #0]
 80061e8:	1d19      	adds	r1, r3, #4
 80061ea:	6029      	str	r1, [r5, #0]
 80061ec:	0605      	lsls	r5, r0, #24
 80061ee:	d501      	bpl.n	80061f4 <_printf_i+0xe8>
 80061f0:	681e      	ldr	r6, [r3, #0]
 80061f2:	e002      	b.n	80061fa <_printf_i+0xee>
 80061f4:	0641      	lsls	r1, r0, #25
 80061f6:	d5fb      	bpl.n	80061f0 <_printf_i+0xe4>
 80061f8:	881e      	ldrh	r6, [r3, #0]
 80061fa:	4853      	ldr	r0, [pc, #332]	; (8006348 <_printf_i+0x23c>)
 80061fc:	2f6f      	cmp	r7, #111	; 0x6f
 80061fe:	bf0c      	ite	eq
 8006200:	2308      	moveq	r3, #8
 8006202:	230a      	movne	r3, #10
 8006204:	2100      	movs	r1, #0
 8006206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620a:	6865      	ldr	r5, [r4, #4]
 800620c:	60a5      	str	r5, [r4, #8]
 800620e:	2d00      	cmp	r5, #0
 8006210:	bfa2      	ittt	ge
 8006212:	6821      	ldrge	r1, [r4, #0]
 8006214:	f021 0104 	bicge.w	r1, r1, #4
 8006218:	6021      	strge	r1, [r4, #0]
 800621a:	b90e      	cbnz	r6, 8006220 <_printf_i+0x114>
 800621c:	2d00      	cmp	r5, #0
 800621e:	d04b      	beq.n	80062b8 <_printf_i+0x1ac>
 8006220:	4615      	mov	r5, r2
 8006222:	fbb6 f1f3 	udiv	r1, r6, r3
 8006226:	fb03 6711 	mls	r7, r3, r1, r6
 800622a:	5dc7      	ldrb	r7, [r0, r7]
 800622c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006230:	4637      	mov	r7, r6
 8006232:	42bb      	cmp	r3, r7
 8006234:	460e      	mov	r6, r1
 8006236:	d9f4      	bls.n	8006222 <_printf_i+0x116>
 8006238:	2b08      	cmp	r3, #8
 800623a:	d10b      	bne.n	8006254 <_printf_i+0x148>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	07de      	lsls	r6, r3, #31
 8006240:	d508      	bpl.n	8006254 <_printf_i+0x148>
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	6861      	ldr	r1, [r4, #4]
 8006246:	4299      	cmp	r1, r3
 8006248:	bfde      	ittt	le
 800624a:	2330      	movle	r3, #48	; 0x30
 800624c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006250:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006254:	1b52      	subs	r2, r2, r5
 8006256:	6122      	str	r2, [r4, #16]
 8006258:	f8cd a000 	str.w	sl, [sp]
 800625c:	464b      	mov	r3, r9
 800625e:	aa03      	add	r2, sp, #12
 8006260:	4621      	mov	r1, r4
 8006262:	4640      	mov	r0, r8
 8006264:	f7ff fee4 	bl	8006030 <_printf_common>
 8006268:	3001      	adds	r0, #1
 800626a:	d14a      	bne.n	8006302 <_printf_i+0x1f6>
 800626c:	f04f 30ff 	mov.w	r0, #4294967295
 8006270:	b004      	add	sp, #16
 8006272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	f043 0320 	orr.w	r3, r3, #32
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	4833      	ldr	r0, [pc, #204]	; (800634c <_printf_i+0x240>)
 8006280:	2778      	movs	r7, #120	; 0x78
 8006282:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	6829      	ldr	r1, [r5, #0]
 800628a:	061f      	lsls	r7, r3, #24
 800628c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006290:	d402      	bmi.n	8006298 <_printf_i+0x18c>
 8006292:	065f      	lsls	r7, r3, #25
 8006294:	bf48      	it	mi
 8006296:	b2b6      	uxthmi	r6, r6
 8006298:	07df      	lsls	r7, r3, #31
 800629a:	bf48      	it	mi
 800629c:	f043 0320 	orrmi.w	r3, r3, #32
 80062a0:	6029      	str	r1, [r5, #0]
 80062a2:	bf48      	it	mi
 80062a4:	6023      	strmi	r3, [r4, #0]
 80062a6:	b91e      	cbnz	r6, 80062b0 <_printf_i+0x1a4>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	f023 0320 	bic.w	r3, r3, #32
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	2310      	movs	r3, #16
 80062b2:	e7a7      	b.n	8006204 <_printf_i+0xf8>
 80062b4:	4824      	ldr	r0, [pc, #144]	; (8006348 <_printf_i+0x23c>)
 80062b6:	e7e4      	b.n	8006282 <_printf_i+0x176>
 80062b8:	4615      	mov	r5, r2
 80062ba:	e7bd      	b.n	8006238 <_printf_i+0x12c>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	6826      	ldr	r6, [r4, #0]
 80062c0:	6961      	ldr	r1, [r4, #20]
 80062c2:	1d18      	adds	r0, r3, #4
 80062c4:	6028      	str	r0, [r5, #0]
 80062c6:	0635      	lsls	r5, r6, #24
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	d501      	bpl.n	80062d0 <_printf_i+0x1c4>
 80062cc:	6019      	str	r1, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <_printf_i+0x1ca>
 80062d0:	0670      	lsls	r0, r6, #25
 80062d2:	d5fb      	bpl.n	80062cc <_printf_i+0x1c0>
 80062d4:	8019      	strh	r1, [r3, #0]
 80062d6:	2300      	movs	r3, #0
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	4615      	mov	r5, r2
 80062dc:	e7bc      	b.n	8006258 <_printf_i+0x14c>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	1d1a      	adds	r2, r3, #4
 80062e2:	602a      	str	r2, [r5, #0]
 80062e4:	681d      	ldr	r5, [r3, #0]
 80062e6:	6862      	ldr	r2, [r4, #4]
 80062e8:	2100      	movs	r1, #0
 80062ea:	4628      	mov	r0, r5
 80062ec:	f7f9 ff98 	bl	8000220 <memchr>
 80062f0:	b108      	cbz	r0, 80062f6 <_printf_i+0x1ea>
 80062f2:	1b40      	subs	r0, r0, r5
 80062f4:	6060      	str	r0, [r4, #4]
 80062f6:	6863      	ldr	r3, [r4, #4]
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	2300      	movs	r3, #0
 80062fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006300:	e7aa      	b.n	8006258 <_printf_i+0x14c>
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	462a      	mov	r2, r5
 8006306:	4649      	mov	r1, r9
 8006308:	4640      	mov	r0, r8
 800630a:	47d0      	blx	sl
 800630c:	3001      	adds	r0, #1
 800630e:	d0ad      	beq.n	800626c <_printf_i+0x160>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	079b      	lsls	r3, r3, #30
 8006314:	d413      	bmi.n	800633e <_printf_i+0x232>
 8006316:	68e0      	ldr	r0, [r4, #12]
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	4298      	cmp	r0, r3
 800631c:	bfb8      	it	lt
 800631e:	4618      	movlt	r0, r3
 8006320:	e7a6      	b.n	8006270 <_printf_i+0x164>
 8006322:	2301      	movs	r3, #1
 8006324:	4632      	mov	r2, r6
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	47d0      	blx	sl
 800632c:	3001      	adds	r0, #1
 800632e:	d09d      	beq.n	800626c <_printf_i+0x160>
 8006330:	3501      	adds	r5, #1
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	9903      	ldr	r1, [sp, #12]
 8006336:	1a5b      	subs	r3, r3, r1
 8006338:	42ab      	cmp	r3, r5
 800633a:	dcf2      	bgt.n	8006322 <_printf_i+0x216>
 800633c:	e7eb      	b.n	8006316 <_printf_i+0x20a>
 800633e:	2500      	movs	r5, #0
 8006340:	f104 0619 	add.w	r6, r4, #25
 8006344:	e7f5      	b.n	8006332 <_printf_i+0x226>
 8006346:	bf00      	nop
 8006348:	080072e1 	.word	0x080072e1
 800634c:	080072f2 	.word	0x080072f2

08006350 <memmove>:
 8006350:	4288      	cmp	r0, r1
 8006352:	b510      	push	{r4, lr}
 8006354:	eb01 0402 	add.w	r4, r1, r2
 8006358:	d902      	bls.n	8006360 <memmove+0x10>
 800635a:	4284      	cmp	r4, r0
 800635c:	4623      	mov	r3, r4
 800635e:	d807      	bhi.n	8006370 <memmove+0x20>
 8006360:	1e43      	subs	r3, r0, #1
 8006362:	42a1      	cmp	r1, r4
 8006364:	d008      	beq.n	8006378 <memmove+0x28>
 8006366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800636a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800636e:	e7f8      	b.n	8006362 <memmove+0x12>
 8006370:	4402      	add	r2, r0
 8006372:	4601      	mov	r1, r0
 8006374:	428a      	cmp	r2, r1
 8006376:	d100      	bne.n	800637a <memmove+0x2a>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800637e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006382:	e7f7      	b.n	8006374 <memmove+0x24>

08006384 <_sbrk_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	4d06      	ldr	r5, [pc, #24]	; (80063a0 <_sbrk_r+0x1c>)
 8006388:	2300      	movs	r3, #0
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	f7fb fb1c 	bl	80019cc <_sbrk>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_sbrk_r+0x1a>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_sbrk_r+0x1a>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20004694 	.word	0x20004694

080063a4 <_realloc_r>:
 80063a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a8:	4680      	mov	r8, r0
 80063aa:	4614      	mov	r4, r2
 80063ac:	460e      	mov	r6, r1
 80063ae:	b921      	cbnz	r1, 80063ba <_realloc_r+0x16>
 80063b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b4:	4611      	mov	r1, r2
 80063b6:	f7ff bc57 	b.w	8005c68 <_malloc_r>
 80063ba:	b92a      	cbnz	r2, 80063c8 <_realloc_r+0x24>
 80063bc:	f7ff fbe8 	bl	8005b90 <_free_r>
 80063c0:	4625      	mov	r5, r4
 80063c2:	4628      	mov	r0, r5
 80063c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c8:	f000 f81b 	bl	8006402 <_malloc_usable_size_r>
 80063cc:	4284      	cmp	r4, r0
 80063ce:	4607      	mov	r7, r0
 80063d0:	d802      	bhi.n	80063d8 <_realloc_r+0x34>
 80063d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063d6:	d812      	bhi.n	80063fe <_realloc_r+0x5a>
 80063d8:	4621      	mov	r1, r4
 80063da:	4640      	mov	r0, r8
 80063dc:	f7ff fc44 	bl	8005c68 <_malloc_r>
 80063e0:	4605      	mov	r5, r0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d0ed      	beq.n	80063c2 <_realloc_r+0x1e>
 80063e6:	42bc      	cmp	r4, r7
 80063e8:	4622      	mov	r2, r4
 80063ea:	4631      	mov	r1, r6
 80063ec:	bf28      	it	cs
 80063ee:	463a      	movcs	r2, r7
 80063f0:	f7ff fbc0 	bl	8005b74 <memcpy>
 80063f4:	4631      	mov	r1, r6
 80063f6:	4640      	mov	r0, r8
 80063f8:	f7ff fbca 	bl	8005b90 <_free_r>
 80063fc:	e7e1      	b.n	80063c2 <_realloc_r+0x1e>
 80063fe:	4635      	mov	r5, r6
 8006400:	e7df      	b.n	80063c2 <_realloc_r+0x1e>

08006402 <_malloc_usable_size_r>:
 8006402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006406:	1f18      	subs	r0, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	bfbc      	itt	lt
 800640c:	580b      	ldrlt	r3, [r1, r0]
 800640e:	18c0      	addlt	r0, r0, r3
 8006410:	4770      	bx	lr
	...

08006414 <_init>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr

08006420 <_fini>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr

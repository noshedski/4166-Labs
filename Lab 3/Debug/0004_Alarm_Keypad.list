
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ffc  08006ffc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007004  08007004  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800700c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000462c  20000074  08007080  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046a0  08007080  000246a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f5a  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c4  00000000  00000000  00036041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f8  00000000  00000000  00039408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106f  00000000  00000000  0003a900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249fa  00000000  00000000  0003b96f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a204  00000000  00000000  00060369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc4db  00000000  00000000  0007a56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d0c  00000000  00000000  00156a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015c754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006154 	.word	0x08006154

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006154 	.word	0x08006154

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	int done=1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
	while(done)
 80005c6:	e19b      	b.n	8000900 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	48b3      	ldr	r0, [pc, #716]	; (800089c <Get_Key+0x2e0>)
 80005d0:	f001 fc08 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	48b0      	ldr	r0, [pc, #704]	; (800089c <Get_Key+0x2e0>)
 80005da:	f001 fc03 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	48ae      	ldr	r0, [pc, #696]	; (800089c <Get_Key+0x2e0>)
 80005e4:	f001 fbfe 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	48ab      	ldr	r0, [pc, #684]	; (800089c <Get_Key+0x2e0>)
 80005ee:	f001 fbf9 	bl	8001de4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	48a9      	ldr	r0, [pc, #676]	; (800089c <Get_Key+0x2e0>)
 80005f6:	f001 fbdd 	bl	8001db4 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00b      	beq.n	8000618 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000600:	bf00      	nop
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	48a5      	ldr	r0, [pc, #660]	; (800089c <Get_Key+0x2e0>)
 8000606:	f001 fbd5 	bl	8001db4 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f8      	bne.n	8000602 <Get_Key+0x46>
		key='1';
 8000610:	4ba3      	ldr	r3, [pc, #652]	; (80008a0 <Get_Key+0x2e4>)
 8000612:	2231      	movs	r2, #49	; 0x31
 8000614:	701a      	strb	r2, [r3, #0]
		break;
 8000616:	e177      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	48a2      	ldr	r0, [pc, #648]	; (80008a4 <Get_Key+0x2e8>)
 800061c:	f001 fbca 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00b      	beq.n	800063e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000626:	bf00      	nop
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	489e      	ldr	r0, [pc, #632]	; (80008a4 <Get_Key+0x2e8>)
 800062c:	f001 fbc2 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f8      	bne.n	8000628 <Get_Key+0x6c>
		key='4';
 8000636:	4b9a      	ldr	r3, [pc, #616]	; (80008a0 <Get_Key+0x2e4>)
 8000638:	2234      	movs	r2, #52	; 0x34
 800063a:	701a      	strb	r2, [r3, #0]
		break;
 800063c:	e164      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4899      	ldr	r0, [pc, #612]	; (80008a8 <Get_Key+0x2ec>)
 8000644:	f001 fbb6 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00c      	beq.n	8000668 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800064e:	bf00      	nop
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4894      	ldr	r0, [pc, #592]	; (80008a8 <Get_Key+0x2ec>)
 8000656:	f001 fbad 	bl	8001db4 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f7      	bne.n	8000650 <Get_Key+0x94>
		key='7';
 8000660:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <Get_Key+0x2e4>)
 8000662:	2237      	movs	r2, #55	; 0x37
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e14f      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	488e      	ldr	r0, [pc, #568]	; (80008a8 <Get_Key+0x2ec>)
 800066e:	f001 fba1 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00c      	beq.n	8000692 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000678:	bf00      	nop
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	488a      	ldr	r0, [pc, #552]	; (80008a8 <Get_Key+0x2ec>)
 8000680:	f001 fb98 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <Get_Key+0xbe>
		key='*';
 800068a:	4b85      	ldr	r3, [pc, #532]	; (80008a0 <Get_Key+0x2e4>)
 800068c:	222a      	movs	r2, #42	; 0x2a
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e13a      	b.n	8000908 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4880      	ldr	r0, [pc, #512]	; (800089c <Get_Key+0x2e0>)
 800069a:	f001 fba3 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	487e      	ldr	r0, [pc, #504]	; (800089c <Get_Key+0x2e0>)
 80006a4:	f001 fb9e 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	487b      	ldr	r0, [pc, #492]	; (800089c <Get_Key+0x2e0>)
 80006ae:	f001 fb99 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4879      	ldr	r0, [pc, #484]	; (800089c <Get_Key+0x2e0>)
 80006b8:	f001 fb94 	bl	8001de4 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4877      	ldr	r0, [pc, #476]	; (800089c <Get_Key+0x2e0>)
 80006c0:	f001 fb78 	bl	8001db4 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00b      	beq.n	80006e2 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ca:	bf00      	nop
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4873      	ldr	r0, [pc, #460]	; (800089c <Get_Key+0x2e0>)
 80006d0:	f001 fb70 	bl	8001db4 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f8      	bne.n	80006cc <Get_Key+0x110>
		key='2';
 80006da:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <Get_Key+0x2e4>)
 80006dc:	2232      	movs	r2, #50	; 0x32
 80006de:	701a      	strb	r2, [r3, #0]
		break;
 80006e0:	e112      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	486f      	ldr	r0, [pc, #444]	; (80008a4 <Get_Key+0x2e8>)
 80006e6:	f001 fb65 	bl	8001db4 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00b      	beq.n	8000708 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006f0:	bf00      	nop
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	486b      	ldr	r0, [pc, #428]	; (80008a4 <Get_Key+0x2e8>)
 80006f6:	f001 fb5d 	bl	8001db4 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f8      	bne.n	80006f2 <Get_Key+0x136>
		key='5';
 8000700:	4b67      	ldr	r3, [pc, #412]	; (80008a0 <Get_Key+0x2e4>)
 8000702:	2235      	movs	r2, #53	; 0x35
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	e0ff      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	4866      	ldr	r0, [pc, #408]	; (80008a8 <Get_Key+0x2ec>)
 800070e:	f001 fb51 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00c      	beq.n	8000732 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000718:	bf00      	nop
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4862      	ldr	r0, [pc, #392]	; (80008a8 <Get_Key+0x2ec>)
 8000720:	f001 fb48 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f7      	bne.n	800071a <Get_Key+0x15e>
		key='8';
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <Get_Key+0x2e4>)
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	701a      	strb	r2, [r3, #0]
		break;
 8000730:	e0ea      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	485c      	ldr	r0, [pc, #368]	; (80008a8 <Get_Key+0x2ec>)
 8000738:	f001 fb3c 	bl	8001db4 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00c      	beq.n	800075c <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000742:	bf00      	nop
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4857      	ldr	r0, [pc, #348]	; (80008a8 <Get_Key+0x2ec>)
 800074a:	f001 fb33 	bl	8001db4 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f7      	bne.n	8000744 <Get_Key+0x188>
		key='0';
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <Get_Key+0x2e4>)
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	701a      	strb	r2, [r3, #0]
		break;
 800075a:	e0d5      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	484e      	ldr	r0, [pc, #312]	; (800089c <Get_Key+0x2e0>)
 8000764:	f001 fb3e 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	484b      	ldr	r0, [pc, #300]	; (800089c <Get_Key+0x2e0>)
 800076e:	f001 fb39 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	4849      	ldr	r0, [pc, #292]	; (800089c <Get_Key+0x2e0>)
 8000778:	f001 fb34 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	4846      	ldr	r0, [pc, #280]	; (800089c <Get_Key+0x2e0>)
 8000782:	f001 fb2f 	bl	8001de4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4844      	ldr	r0, [pc, #272]	; (800089c <Get_Key+0x2e0>)
 800078a:	f001 fb13 	bl	8001db4 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00b      	beq.n	80007ac <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000794:	bf00      	nop
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4840      	ldr	r0, [pc, #256]	; (800089c <Get_Key+0x2e0>)
 800079a:	f001 fb0b 	bl	8001db4 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f8      	bne.n	8000796 <Get_Key+0x1da>
		key='3';
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <Get_Key+0x2e4>)
 80007a6:	2233      	movs	r2, #51	; 0x33
 80007a8:	701a      	strb	r2, [r3, #0]
		break;
 80007aa:	e0ad      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	483d      	ldr	r0, [pc, #244]	; (80008a4 <Get_Key+0x2e8>)
 80007b0:	f001 fb00 	bl	8001db4 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ba:	bf00      	nop
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <Get_Key+0x2e8>)
 80007c0:	f001 faf8 	bl	8001db4 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <Get_Key+0x200>
		key='6';
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <Get_Key+0x2e4>)
 80007cc:	2236      	movs	r2, #54	; 0x36
 80007ce:	701a      	strb	r2, [r3, #0]
		break;
 80007d0:	e09a      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4834      	ldr	r0, [pc, #208]	; (80008a8 <Get_Key+0x2ec>)
 80007d8:	f001 faec 	bl	8001db4 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00c      	beq.n	80007fc <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007e2:	bf00      	nop
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <Get_Key+0x2ec>)
 80007ea:	f001 fae3 	bl	8001db4 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f7      	bne.n	80007e4 <Get_Key+0x228>
		key='9';
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <Get_Key+0x2e4>)
 80007f6:	2239      	movs	r2, #57	; 0x39
 80007f8:	701a      	strb	r2, [r3, #0]
		break;
 80007fa:	e085      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <Get_Key+0x2ec>)
 8000802:	f001 fad7 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	4825      	ldr	r0, [pc, #148]	; (80008a8 <Get_Key+0x2ec>)
 8000814:	f001 face 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x252>
		key='#';
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <Get_Key+0x2e4>)
 8000820:	2223      	movs	r2, #35	; 0x23
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e070      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <Get_Key+0x2e0>)
 800082e:	f001 fad9 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <Get_Key+0x2e0>)
 8000838:	f001 fad4 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <Get_Key+0x2e0>)
 8000842:	f001 facf 	bl	8001de4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <Get_Key+0x2e0>)
 800084c:	f001 faca 	bl	8001de4 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <Get_Key+0x2e0>)
 8000854:	f001 faae 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800085e:	bf00      	nop
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <Get_Key+0x2e0>)
 8000864:	f001 faa6 	bl	8001db4 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f8      	bne.n	8000860 <Get_Key+0x2a4>
		key='A';
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <Get_Key+0x2e4>)
 8000870:	2241      	movs	r2, #65	; 0x41
 8000872:	701a      	strb	r2, [r3, #0]
		break;
 8000874:	e048      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <Get_Key+0x2e8>)
 800087a:	f001 fa9b 	bl	8001db4 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000884:	bf00      	nop
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <Get_Key+0x2e8>)
 800088a:	f001 fa93 	bl	8001db4 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f8      	bne.n	8000886 <Get_Key+0x2ca>
		key='B';
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <Get_Key+0x2e4>)
 8000896:	2242      	movs	r2, #66	; 0x42
 8000898:	701a      	strb	r2, [r3, #0]
		break;
 800089a:	e035      	b.n	8000908 <Get_Key+0x34c>
 800089c:	40020400 	.word	0x40020400
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <Get_Key+0x360>)
 80008b2:	f001 fa7f 	bl	8001db4 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008bc:	bf00      	nop
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <Get_Key+0x360>)
 80008c4:	f001 fa76 	bl	8001db4 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f7      	bne.n	80008be <Get_Key+0x302>
		key='C';
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <Get_Key+0x364>)
 80008d0:	2243      	movs	r2, #67	; 0x43
 80008d2:	701a      	strb	r2, [r3, #0]
		break;
 80008d4:	e018      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <Get_Key+0x360>)
 80008dc:	f001 fa6a 	bl	8001db4 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00c      	beq.n	8000900 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008e6:	bf00      	nop
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <Get_Key+0x360>)
 80008ee:	f001 fa61 	bl	8001db4 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f7      	bne.n	80008e8 <Get_Key+0x32c>
		key='D';
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Get_Key+0x364>)
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	701a      	strb	r2, [r3, #0]
		break;
 80008fe:	e003      	b.n	8000908 <Get_Key+0x34c>
	while(done)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f47f ae60 	bne.w	80005c8 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000908:	2120      	movs	r1, #32
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <Get_Key+0x360>)
 800090c:	f001 fa83 	bl	8001e16 <HAL_GPIO_TogglePin>
	return(key);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Get_Key+0x364>)
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020000 	.word	0x40020000
 8000920:	20000090 	.word	0x20000090

08000924 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <vApplicationGetIdleTaskMemory+0x2c>)
 8000934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <vApplicationGetIdleTaskMemory+0x30>)
 800093a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000094 	.word	0x20000094
 8000954:	200000e8 	.word	0x200000e8

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b0a4      	sub	sp, #144	; 0x90
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f000 ff4d 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f895 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 f959 	bl	8000c1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096a:	f000 f92d 	bl	8000bc8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800096e:	f000 f8fd 	bl	8000b6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000972:	f000 fab9 	bl	8000ee8 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fc1f 	bl	80011bc <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	4937      	ldr	r1, [pc, #220]	; (8000a60 <main+0x108>)
 8000982:	4838      	ldr	r0, [pc, #224]	; (8000a64 <main+0x10c>)
 8000984:	f000 fcb0 	bl	80012e8 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000988:	211e      	movs	r1, #30
 800098a:	2000      	movs	r0, #0
 800098c:	f000 fc16 	bl	80011bc <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 8000990:	f000 fb6e 	bl	8001070 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 8000994:	f000 fb6c 	bl	8001070 <SSD1306_UpdateScreen>
    HAL_Delay (500);
 8000998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099c:	f000 ff70 	bl	8001880 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <main+0x110>)
 80009a2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80009a6:	461d      	mov	r5, r3
 80009a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fcf9 	bl	80043b2 <osThreadCreate>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4a2a      	ldr	r2, [pc, #168]	; (8000a6c <main+0x114>)
 80009c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of KeypadTask */
  osThreadDef(KeypadTask, Keypad, osPriorityNormal, 0, 128);
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <main+0x118>)
 80009c8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80009cc:	461d      	mov	r5, r3
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeypadTaskHandle = osThreadCreate(osThread(KeypadTask), NULL);
 80009da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 fce6 	bl	80043b2 <osThreadCreate>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <main+0x11c>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCDDisplay */
  osThreadDef(LCDDisplay, Display, osPriorityNormal, 0, 128);
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <main+0x120>)
 80009ee:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80009f2:	461d      	mov	r5, r3
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDDisplayHandle = osThreadCreate(osThread(LCDDisplay), NULL);
 8000a00:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fcd3 	bl	80043b2 <osThreadCreate>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <main+0x124>)
 8000a10:	6013      	str	r3, [r2, #0]

  /* definition and creation of LEDTask */
  osThreadDef(LEDTask, RedGreenLED, osPriorityNormal, 0, 128);
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <main+0x128>)
 8000a14:	f107 0420 	add.w	r4, r7, #32
 8000a18:	461d      	mov	r5, r3
 8000a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDTaskHandle = osThreadCreate(osThread(LEDTask), NULL);
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 fcc0 	bl	80043b2 <osThreadCreate>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <main+0x12c>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* definition and creation of StateManager */
  osThreadDef(StateManager, ArmState, osPriorityNormal, 0, 128);
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <main+0x130>)
 8000a3a:	1d3c      	adds	r4, r7, #4
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StateManagerHandle = osThreadCreate(osThread(StateManager), NULL);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fcaf 	bl	80043b2 <osThreadCreate>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <main+0x134>)
 8000a58:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a5a:	f003 fca3 	bl	80043a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <main+0x106>
 8000a60:	20000000 	.word	0x20000000
 8000a64:	0800616c 	.word	0x0800616c
 8000a68:	08006184 	.word	0x08006184
 8000a6c:	20000384 	.word	0x20000384
 8000a70:	080061ac 	.word	0x080061ac
 8000a74:	20000388 	.word	0x20000388
 8000a78:	080061d4 	.word	0x080061d4
 8000a7c:	2000038c 	.word	0x2000038c
 8000a80:	080061f8 	.word	0x080061f8
 8000a84:	20000390 	.word	0x20000390
 8000a88:	08006224 	.word	0x08006224
 8000a8c:	20000394 	.word	0x20000394

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	2234      	movs	r2, #52	; 0x34
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 fed4 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <SystemClock_Config+0xd4>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <SystemClock_Config+0xd4>)
 8000abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <SystemClock_Config+0xd8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000adc:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <SystemClock_Config+0xd8>)
 8000ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <SystemClock_Config+0xd8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2310      	movs	r3, #16
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2302      	movs	r3, #2
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b04:	2310      	movs	r3, #16
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b08:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fadc 	bl	80030dc <HAL_RCC_OscConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b2a:	f000 f9d7 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	230f      	movs	r3, #15
 8000b30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	2302      	movs	r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	2102      	movs	r1, #2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 ff4a 	bl	80029e4 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b56:	f000 f9c1 	bl	8000edc <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3750      	adds	r7, #80	; 0x50
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b72:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <MX_I2C1_Init+0x54>)
 8000b74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b78:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x58>)
 8000b7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_I2C1_Init+0x50>)
 8000baa:	f001 f94f 	bl	8001e4c <HAL_I2C_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bb4:	f000 f992 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200002e8 	.word	0x200002e8
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	00061a80 	.word	0x00061a80

08000bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_USART2_UART_Init+0x50>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f002 ffac 	bl	8003b5c <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f967 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000033c 	.word	0x2000033c
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a42      	ldr	r2, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b40      	ldr	r3, [pc, #256]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b3c      	ldr	r3, [pc, #240]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a3b      	ldr	r2, [pc, #236]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a34      	ldr	r2, [pc, #208]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a2d      	ldr	r2, [pc, #180]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_GPIO_Init+0x128>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4828      	ldr	r0, [pc, #160]	; (8000d48 <MX_GPIO_Init+0x12c>)
 8000ca8:	f001 f89c 	bl	8001de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|GPIO_PIN_13|GPIO_PIN_14|KC3_Pin
 8000cac:	2200      	movs	r2, #0
 8000cae:	f246 4138 	movw	r1, #25656	; 0x6438
 8000cb2:	4826      	ldr	r0, [pc, #152]	; (8000d4c <MX_GPIO_Init+0x130>)
 8000cb4:	f001 f896 	bl	8001de4 <HAL_GPIO_WritePin>
                          |KC1_Pin|KC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cb8:	2320      	movs	r3, #32
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481e      	ldr	r0, [pc, #120]	; (8000d48 <MX_GPIO_Init+0x12c>)
 8000cd0:	f000 fedc 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin PB13 PB14 KC3_Pin
                           KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|GPIO_PIN_13|GPIO_PIN_14|KC3_Pin
 8000cd4:	f246 4338 	movw	r3, #25656	; 0x6438
 8000cd8:	617b      	str	r3, [r7, #20]
                          |KC1_Pin|KC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4817      	ldr	r0, [pc, #92]	; (8000d4c <MX_GPIO_Init+0x130>)
 8000cee:	f000 fecd 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4812      	ldr	r0, [pc, #72]	; (8000d50 <MX_GPIO_Init+0x134>)
 8000d06:	f000 fec1 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480a      	ldr	r0, [pc, #40]	; (8000d48 <MX_GPIO_Init+0x12c>)
 8000d20:	f000 feb4 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_GPIO_Init+0x130>)
 8000d38:	f000 fea8 	bl	8001a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	; 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40020800 	.word	0x40020800

08000d54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f003 fb74 	bl	800444a <osDelay>
 8000d62:	e7fb      	b.n	8000d5c <StartDefaultTask+0x8>

08000d64 <Keypad>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Keypad */
void Keypad(void const * argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Keypad */
  /* Infinite loop */
  for(;;)
  {
	  key = Get_Key();
 8000d6c:	f7ff fc26 	bl	80005bc <Get_Key>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <Keypad+0xa0>)
 8000d76:	701a      	strb	r2, [r3, #0]
	  sprintf(hold, "%c", key);
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <Keypad+0xa0>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4922      	ldr	r1, [pc, #136]	; (8000e08 <Keypad+0xa4>)
 8000d80:	4822      	ldr	r0, [pc, #136]	; (8000e0c <Keypad+0xa8>)
 8000d82:	f004 fd43 	bl	800580c <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100);
 8000d86:	4821      	ldr	r0, [pc, #132]	; (8000e0c <Keypad+0xa8>)
 8000d88:	f7ff fa42 	bl	8000210 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	2364      	movs	r3, #100	; 0x64
 8000d92:	491e      	ldr	r1, [pc, #120]	; (8000e0c <Keypad+0xa8>)
 8000d94:	481e      	ldr	r0, [pc, #120]	; (8000e10 <Keypad+0xac>)
 8000d96:	f002 ff31 	bl	8003bfc <HAL_UART_Transmit>

	  password[idx] = key;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <Keypad+0xb0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <Keypad+0xa0>)
 8000da0:	7811      	ldrb	r1, [r2, #0]
 8000da2:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <Keypad+0xb4>)
 8000da4:	54d1      	strb	r1, [r2, r3]
	  idx++;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <Keypad+0xb0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <Keypad+0xb0>)
 8000dae:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)password, strlen(password), 100);
 8000db0:	4819      	ldr	r0, [pc, #100]	; (8000e18 <Keypad+0xb4>)
 8000db2:	f7ff fa2d 	bl	8000210 <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	2364      	movs	r3, #100	; 0x64
 8000dbc:	4916      	ldr	r1, [pc, #88]	; (8000e18 <Keypad+0xb4>)
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <Keypad+0xac>)
 8000dc0:	f002 ff1c 	bl	8003bfc <HAL_UART_Transmit>

	  if (idx == 6) {
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <Keypad+0xb0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d1cf      	bne.n	8000d6c <Keypad+0x8>
		  char out[] = "success";
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <Keypad+0xb8>)
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dd6:	e883 0003 	stmia.w	r3, {r0, r1}

		  HAL_UART_Transmit(&huart2, (uint8_t *)out, strlen(out), 100);
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fa16 	bl	8000210 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	f107 0108 	add.w	r1, r7, #8
 8000dec:	2364      	movs	r3, #100	; 0x64
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <Keypad+0xac>)
 8000df0:	f002 ff04 	bl	8003bfc <HAL_UART_Transmit>
		  idx = 0;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <Keypad+0xb0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
		  isArmed = true;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <Keypad+0xbc>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
	  key = Get_Key();
 8000e00:	e7b4      	b.n	8000d6c <Keypad+0x8>
 8000e02:	bf00      	nop
 8000e04:	20000090 	.word	0x20000090
 8000e08:	08006240 	.word	0x08006240
 8000e0c:	20000398 	.word	0x20000398
 8000e10:	2000033c 	.word	0x2000033c
 8000e14:	200003a8 	.word	0x200003a8
 8000e18:	200003a0 	.word	0x200003a0
 8000e1c:	08006244 	.word	0x08006244
 8000e20:	200003a6 	.word	0x200003a6

08000e24 <Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display */
void Display(void const * argument)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
////	    SSD1306_GotoXY (0, 30);
////	    SSD1306_UpdateScreen();
////	    SSD1306_UpdateScreen();
////	    HAL_Delay (500);

	  SSD1306_GotoXY (0, 30);
 8000e2c:	211e      	movs	r1, #30
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f9c4 	bl	80011bc <SSD1306_GotoXY>
	  SSD1306_UpdateScreen();
 8000e34:	f000 f91c 	bl	8001070 <SSD1306_UpdateScreen>
	  SSD1306_Puts (msg, &Font_11x18, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4905      	ldr	r1, [pc, #20]	; (8000e50 <Display+0x2c>)
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <Display+0x30>)
 8000e3e:	f000 fa53 	bl	80012e8 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000e42:	f000 f915 	bl	8001070 <SSD1306_UpdateScreen>
	  HAL_Delay (500);
 8000e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e4a:	f000 fd19 	bl	8001880 <HAL_Delay>
	  SSD1306_GotoXY (0, 30);
 8000e4e:	e7ed      	b.n	8000e2c <Display+0x8>
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008

08000e58 <RedGreenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedGreenLED */
void RedGreenLED(void const * argument)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedGreenLED */
  /* Infinite loop */
  for(;;)
  {
	  if(!isArmed) {
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <RedGreenLED+0x4c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	f083 0301 	eor.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00c      	beq.n	8000e88 <RedGreenLED+0x30>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <RedGreenLED+0x50>)
 8000e76:	f000 ffb5 	bl	8001de4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <RedGreenLED+0x50>)
 8000e82:	f000 ffaf 	bl	8001de4 <HAL_GPIO_WritePin>
 8000e86:	e7eb      	b.n	8000e60 <RedGreenLED+0x8>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <RedGreenLED+0x50>)
 8000e90:	f000 ffa8 	bl	8001de4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <RedGreenLED+0x50>)
 8000e9c:	f000 ffa2 	bl	8001de4 <HAL_GPIO_WritePin>
	  if(!isArmed) {
 8000ea0:	e7de      	b.n	8000e60 <RedGreenLED+0x8>
 8000ea2:	bf00      	nop
 8000ea4:	200003a6 	.word	0x200003a6
 8000ea8:	40020400 	.word	0x40020400

08000eac <ArmState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ArmState */
void ArmState(void const * argument)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ArmState */
  /* Infinite loop */
  for(;;)
  {
	  if (!isArmed) {
 8000eb4:	e7fe      	b.n	8000eb4 <ArmState+0x8>
	...

08000eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eca:	f000 fcb9 	bl	8001840 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40001000 	.word	0x40001000

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000eee:	f000 fa21 	bl	8001334 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ef2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2178      	movs	r1, #120	; 0x78
 8000efa:	485b      	ldr	r0, [pc, #364]	; (8001068 <SSD1306_Init+0x180>)
 8000efc:	f001 f9e8 	bl	80022d0 <HAL_I2C_IsDeviceReady>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e0a9      	b.n	800105e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f0a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f0e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f10:	e002      	b.n	8000f18 <SSD1306_Init+0x30>
		p--;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f9      	bne.n	8000f12 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f1e:	22ae      	movs	r2, #174	; 0xae
 8000f20:	2100      	movs	r1, #0
 8000f22:	2078      	movs	r0, #120	; 0x78
 8000f24:	f000 fa82 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2078      	movs	r0, #120	; 0x78
 8000f2e:	f000 fa7d 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000f32:	2210      	movs	r2, #16
 8000f34:	2100      	movs	r1, #0
 8000f36:	2078      	movs	r0, #120	; 0x78
 8000f38:	f000 fa78 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f3c:	22b0      	movs	r2, #176	; 0xb0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2078      	movs	r0, #120	; 0x78
 8000f42:	f000 fa73 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000f46:	22c8      	movs	r2, #200	; 0xc8
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2078      	movs	r0, #120	; 0x78
 8000f4c:	f000 fa6e 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2078      	movs	r0, #120	; 0x78
 8000f56:	f000 fa69 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2078      	movs	r0, #120	; 0x78
 8000f60:	f000 fa64 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000f64:	2240      	movs	r2, #64	; 0x40
 8000f66:	2100      	movs	r1, #0
 8000f68:	2078      	movs	r0, #120	; 0x78
 8000f6a:	f000 fa5f 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000f6e:	2281      	movs	r2, #129	; 0x81
 8000f70:	2100      	movs	r1, #0
 8000f72:	2078      	movs	r0, #120	; 0x78
 8000f74:	f000 fa5a 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000f78:	22ff      	movs	r2, #255	; 0xff
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2078      	movs	r0, #120	; 0x78
 8000f7e:	f000 fa55 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000f82:	22a1      	movs	r2, #161	; 0xa1
 8000f84:	2100      	movs	r1, #0
 8000f86:	2078      	movs	r0, #120	; 0x78
 8000f88:	f000 fa50 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000f8c:	22a6      	movs	r2, #166	; 0xa6
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2078      	movs	r0, #120	; 0x78
 8000f92:	f000 fa4b 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000f96:	22a8      	movs	r2, #168	; 0xa8
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f000 fa46 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000fa0:	223f      	movs	r2, #63	; 0x3f
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2078      	movs	r0, #120	; 0x78
 8000fa6:	f000 fa41 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000faa:	22a4      	movs	r2, #164	; 0xa4
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	; 0x78
 8000fb0:	f000 fa3c 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000fb4:	22d3      	movs	r2, #211	; 0xd3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	; 0x78
 8000fba:	f000 fa37 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2078      	movs	r0, #120	; 0x78
 8000fc4:	f000 fa32 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fc8:	22d5      	movs	r2, #213	; 0xd5
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2078      	movs	r0, #120	; 0x78
 8000fce:	f000 fa2d 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000fd2:	22f0      	movs	r2, #240	; 0xf0
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2078      	movs	r0, #120	; 0x78
 8000fd8:	f000 fa28 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000fdc:	22d9      	movs	r2, #217	; 0xd9
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2078      	movs	r0, #120	; 0x78
 8000fe2:	f000 fa23 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000fe6:	2222      	movs	r2, #34	; 0x22
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2078      	movs	r0, #120	; 0x78
 8000fec:	f000 fa1e 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ff0:	22da      	movs	r2, #218	; 0xda
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2078      	movs	r0, #120	; 0x78
 8000ff6:	f000 fa19 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ffa:	2212      	movs	r2, #18
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	; 0x78
 8001000:	f000 fa14 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001004:	22db      	movs	r2, #219	; 0xdb
 8001006:	2100      	movs	r1, #0
 8001008:	2078      	movs	r0, #120	; 0x78
 800100a:	f000 fa0f 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800100e:	2220      	movs	r2, #32
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	; 0x78
 8001014:	f000 fa0a 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001018:	228d      	movs	r2, #141	; 0x8d
 800101a:	2100      	movs	r1, #0
 800101c:	2078      	movs	r0, #120	; 0x78
 800101e:	f000 fa05 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001022:	2214      	movs	r2, #20
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	; 0x78
 8001028:	f000 fa00 	bl	800142c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800102c:	22af      	movs	r2, #175	; 0xaf
 800102e:	2100      	movs	r1, #0
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f000 f9fb 	bl	800142c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001036:	222e      	movs	r2, #46	; 0x2e
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 f9f6 	bl	800142c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f843 	bl	80010cc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001046:	f000 f813 	bl	8001070 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <SSD1306_Init+0x184>)
 800104c:	2200      	movs	r2, #0
 800104e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SSD1306_Init+0x184>)
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <SSD1306_Init+0x184>)
 8001058:	2201      	movs	r2, #1
 800105a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200002e8 	.word	0x200002e8
 800106c:	200007ac 	.word	0x200007ac

08001070 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e01d      	b.n	80010b8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	3b50      	subs	r3, #80	; 0x50
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	2078      	movs	r0, #120	; 0x78
 8001088:	f000 f9d0 	bl	800142c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2078      	movs	r0, #120	; 0x78
 8001092:	f000 f9cb 	bl	800142c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001096:	2210      	movs	r2, #16
 8001098:	2100      	movs	r1, #0
 800109a:	2078      	movs	r0, #120	; 0x78
 800109c:	f000 f9c6 	bl	800142c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	01db      	lsls	r3, r3, #7
 80010a4:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <SSD1306_UpdateScreen+0x58>)
 80010a6:	441a      	add	r2, r3
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	2078      	movs	r0, #120	; 0x78
 80010ae:	f000 f957 	bl	8001360 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	3301      	adds	r3, #1
 80010b6:	71fb      	strb	r3, [r7, #7]
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	d9de      	bls.n	800107c <SSD1306_UpdateScreen+0xc>
	}
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200003ac 	.word	0x200003ac

080010cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <SSD1306_Fill+0x14>
 80010dc:	2300      	movs	r3, #0
 80010de:	e000      	b.n	80010e2 <SSD1306_Fill+0x16>
 80010e0:	23ff      	movs	r3, #255	; 0xff
 80010e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e6:	4619      	mov	r1, r3
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <SSD1306_Fill+0x2c>)
 80010ea:	f004 fbaf 	bl	800584c <memset>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200003ac 	.word	0x200003ac

080010fc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	460b      	mov	r3, r1
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	70fb      	strb	r3, [r7, #3]
	if (
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b7f      	cmp	r3, #127	; 0x7f
 8001112:	d848      	bhi.n	80011a6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	2b3f      	cmp	r3, #63	; 0x3f
 8001118:	d845      	bhi.n	80011a6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <SSD1306_DrawPixel+0xb8>)
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d11a      	bne.n	800116c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b298      	uxth	r0, r3
 800113e:	4603      	mov	r3, r0
 8001140:	01db      	lsls	r3, r3, #7
 8001142:	4413      	add	r3, r2
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <SSD1306_DrawPixel+0xbc>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	b25a      	sxtb	r2, r3
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	b25b      	sxtb	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b259      	sxtb	r1, r3
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	01db      	lsls	r3, r3, #7
 8001162:	4413      	add	r3, r2
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <SSD1306_DrawPixel+0xbc>)
 8001168:	54d1      	strb	r1, [r2, r3]
 800116a:	e01d      	b.n	80011a8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	b298      	uxth	r0, r3
 8001174:	4603      	mov	r3, r0
 8001176:	01db      	lsls	r3, r3, #7
 8001178:	4413      	add	r3, r2
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <SSD1306_DrawPixel+0xbc>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	b25a      	sxtb	r2, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4013      	ands	r3, r2
 8001194:	b259      	sxtb	r1, r3
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	01db      	lsls	r3, r3, #7
 800119c:	4413      	add	r3, r2
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SSD1306_DrawPixel+0xbc>)
 80011a2:	54d1      	strb	r1, [r2, r3]
 80011a4:	e000      	b.n	80011a8 <SSD1306_DrawPixel+0xac>
		return;
 80011a6:	bf00      	nop
	}
}
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200007ac 	.word	0x200007ac
 80011b8:	200003ac 	.word	0x200003ac

080011bc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SSD1306_GotoXY+0x28>)
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <SSD1306_GotoXY+0x28>)
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	8053      	strh	r3, [r2, #2]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	200007ac 	.word	0x200007ac

080011e8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80011f8:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <SSD1306_Putc+0xfc>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
	if (
 8001204:	2b7f      	cmp	r3, #127	; 0x7f
 8001206:	dc07      	bgt.n	8001218 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <SSD1306_Putc+0xfc>)
 800120a:	885b      	ldrh	r3, [r3, #2]
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001214:	2b3f      	cmp	r3, #63	; 0x3f
 8001216:	dd01      	ble.n	800121c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001218:	2300      	movs	r3, #0
 800121a:	e05e      	b.n	80012da <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e04b      	b.n	80012ba <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	3b20      	subs	r3, #32
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	7849      	ldrb	r1, [r1, #1]
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4619      	mov	r1, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	440b      	add	r3, r1
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	e030      	b.n	80012a8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d010      	beq.n	8001278 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <SSD1306_Putc+0xfc>)
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b298      	uxth	r0, r3
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <SSD1306_Putc+0xfc>)
 8001264:	885a      	ldrh	r2, [r3, #2]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b29b      	uxth	r3, r3
 800126e:	79ba      	ldrb	r2, [r7, #6]
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff ff43 	bl	80010fc <SSD1306_DrawPixel>
 8001276:	e014      	b.n	80012a2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <SSD1306_Putc+0xfc>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	b29b      	uxth	r3, r3
 8001280:	4413      	add	r3, r2
 8001282:	b298      	uxth	r0, r3
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <SSD1306_Putc+0xfc>)
 8001286:	885a      	ldrh	r2, [r3, #2]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4413      	add	r3, r2
 800128e:	b299      	uxth	r1, r3
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	2b00      	cmp	r3, #0
 8001294:	bf0c      	ite	eq
 8001296:	2301      	moveq	r3, #1
 8001298:	2300      	movne	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	f7ff ff2d 	bl	80010fc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	3301      	adds	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d3c8      	bcc.n	8001246 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	461a      	mov	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d3ad      	bcc.n	8001222 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <SSD1306_Putc+0xfc>)
 80012c8:	881a      	ldrh	r2, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <SSD1306_Putc+0xfc>)
 80012d6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200007ac 	.word	0x200007ac

080012e8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	4613      	mov	r3, r2
 80012f4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80012f6:	e012      	b.n	800131e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff71 	bl	80011e8 <SSD1306_Putc>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d002      	beq.n	8001318 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	e008      	b.n	800132a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1e8      	bne.n	80012f8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	781b      	ldrb	r3, [r3, #0]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <ssd1306_I2C_Init+0x28>)
 800133c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800133e:	e002      	b.n	8001346 <ssd1306_I2C_Init+0x12>
		p--;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f9      	bne.n	8001340 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	0003d090 	.word	0x0003d090

08001360 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b0c7      	sub	sp, #284	; 0x11c
 8001364:	af02      	add	r7, sp, #8
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800136e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001372:	600a      	str	r2, [r1, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800137a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800137e:	4622      	mov	r2, r4
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001386:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800138a:	4602      	mov	r2, r0
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001392:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001396:	460a      	mov	r2, r1
 8001398:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800139a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800139e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013a6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013b4:	e015      	b.n	80013e2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80013b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013be:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	441a      	add	r2, r3
 80013c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013ca:	3301      	adds	r3, #1
 80013cc:	7811      	ldrb	r1, [r2, #0]
 80013ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013d2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80013d6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80013d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013dc:	3301      	adds	r3, #1
 80013de:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80013e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80013ec:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80013f0:	8812      	ldrh	r2, [r2, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d8df      	bhi.n	80013b6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80013f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013fa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b299      	uxth	r1, r3
 8001402:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001406:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b29b      	uxth	r3, r3
 8001410:	f107 020c 	add.w	r2, r7, #12
 8001414:	200a      	movs	r0, #10
 8001416:	9000      	str	r0, [sp, #0]
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <ssd1306_I2C_WriteMulti+0xc8>)
 800141a:	f000 fe5b 	bl	80020d4 <HAL_I2C_Master_Transmit>
}
 800141e:	bf00      	nop
 8001420:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001424:	46bd      	mov	sp, r7
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	200002e8 	.word	0x200002e8

0800142c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af02      	add	r7, sp, #8
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	460b      	mov	r3, r1
 8001438:	71bb      	strb	r3, [r7, #6]
 800143a:	4613      	mov	r3, r2
 800143c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001442:	797b      	ldrb	r3, [r7, #5]
 8001444:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	b299      	uxth	r1, r3
 800144a:	f107 020c 	add.w	r2, r7, #12
 800144e:	230a      	movs	r3, #10
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2302      	movs	r3, #2
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <ssd1306_I2C_Write+0x38>)
 8001456:	f000 fe3d 	bl	80020d4 <HAL_I2C_Master_Transmit>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200002e8 	.word	0x200002e8

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x54>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_MspInit+0x54>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x54>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_MspInit+0x54>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_MspInit+0x54>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_MspInit+0x54>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f000 fac3 	bl	8001a38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_I2C_MspInit+0x84>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12c      	bne.n	800153c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001510:	2304      	movs	r3, #4
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <HAL_I2C_MspInit+0x8c>)
 800151c:	f000 fab6 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_I2C_MspInit+0x88>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_I2C_MspInit+0x88>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_I2C_MspInit+0x88>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40005400 	.word	0x40005400
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_UART_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12b      	bne.n	80015ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_UART_MspInit+0x88>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_UART_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015aa:	230c      	movs	r3, #12
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ba:	2307      	movs	r3, #7
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_UART_MspInit+0x8c>)
 80015c6:	f000 fa61 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40004400 	.word	0x40004400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08e      	sub	sp, #56	; 0x38
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_InitTick+0xe4>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	4a32      	ldr	r2, [pc, #200]	; (80016c4 <HAL_InitTick+0xe4>)
 80015fa:	f043 0310 	orr.w	r3, r3, #16
 80015fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <HAL_InitTick+0xe4>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800160c:	f107 0210 	add.w	r2, r7, #16
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f001 fafe 	bl	8002c18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d103      	bne.n	800162e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001626:	f001 facf 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800162a:	6378      	str	r0, [r7, #52]	; 0x34
 800162c:	e004      	b.n	8001638 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800162e:	f001 facb 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163a:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <HAL_InitTick+0xe8>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	0c9b      	lsrs	r3, r3, #18
 8001642:	3b01      	subs	r3, #1
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_InitTick+0xec>)
 8001648:	4a21      	ldr	r2, [pc, #132]	; (80016d0 <HAL_InitTick+0xf0>)
 800164a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_InitTick+0xec>)
 800164e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001652:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001654:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_InitTick+0xec>)
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_InitTick+0xec>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_InitTick+0xec>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_InitTick+0xec>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800166c:	4817      	ldr	r0, [pc, #92]	; (80016cc <HAL_InitTick+0xec>)
 800166e:	f001 ffd3 	bl	8003618 <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001678:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800167c:	2b00      	cmp	r3, #0
 800167e:	d11b      	bne.n	80016b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001680:	4812      	ldr	r0, [pc, #72]	; (80016cc <HAL_InitTick+0xec>)
 8001682:	f002 f823 	bl	80036cc <HAL_TIM_Base_Start_IT>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800168c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001690:	2b00      	cmp	r3, #0
 8001692:	d111      	bne.n	80016b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001694:	2036      	movs	r0, #54	; 0x36
 8001696:	f000 f9eb 	bl	8001a70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d808      	bhi.n	80016b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	2036      	movs	r0, #54	; 0x36
 80016a6:	f000 f9c7 	bl	8001a38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_InitTick+0xf4>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e002      	b.n	80016b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3738      	adds	r7, #56	; 0x38
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	200007b4 	.word	0x200007b4
 80016d0:	40001000 	.word	0x40001000
 80016d4:	20000018 	.word	0x20000018

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016dc:	e7fe      	b.n	80016dc <NMI_Handler+0x4>

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <TIM6_DAC_IRQHandler+0x10>)
 800170a:	f002 f84f 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200007b4 	.word	0x200007b4

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f004 f888 	bl	800585c <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20020000 	.word	0x20020000
 8001778:	00000400 	.word	0x00000400
 800177c:	200007fc 	.word	0x200007fc
 8001780:	200046a0 	.word	0x200046a0

08001784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017ac:	f7ff ffea 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c8:	4c0a      	ldr	r4, [pc, #40]	; (80017f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f004 f847 	bl	8005868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff f8bd 	bl	8000958 <main>
  bx  lr    
 80017de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017ec:	0800700c 	.word	0x0800700c
  ldr r2, =_sbss
 80017f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017f4:	200046a0 	.word	0x200046a0

080017f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <HAL_Init+0x40>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_Init+0x40>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_Init+0x40>)
 800181e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 f8fc 	bl	8001a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fed8 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fe1a 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	2000001c 	.word	0x2000001c
 8001864:	20000800 	.word	0x20000800

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000800 	.word	0x20000800

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	2000001c 	.word	0x2000001c

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff4c 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4a:	f7ff ff61 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	6978      	ldr	r0, [r7, #20]
 8001a56:	f7ff ffb1 	bl	80019bc <NVIC_EncodePriority>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff80 	bl	8001968 <__NVIC_SetPriority>
}
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff54 	bl	800192c <__NVIC_EnableIRQ>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e165      	b.n	8001d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 8154 	bne.w	8001d6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80ae 	beq.w	8001d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a5c      	ldr	r2, [pc, #368]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <HAL_GPIO_Init+0x300>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4f      	ldr	r2, [pc, #316]	; (8001d94 <HAL_GPIO_Init+0x308>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d025      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4e      	ldr	r2, [pc, #312]	; (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4d      	ldr	r2, [pc, #308]	; (8001d9c <HAL_GPIO_Init+0x310>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x314>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_GPIO_Init+0x318>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x20a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4a      	ldr	r2, [pc, #296]	; (8001da8 <HAL_GPIO_Init+0x31c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x206>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_GPIO_Init+0x320>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x202>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00c      	b.n	8001ca8 <HAL_GPIO_Init+0x21c>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e00a      	b.n	8001ca8 <HAL_GPIO_Init+0x21c>
 8001c92:	2305      	movs	r3, #5
 8001c94:	e008      	b.n	8001ca8 <HAL_GPIO_Init+0x21c>
 8001c96:	2304      	movs	r3, #4
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x21c>
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e004      	b.n	8001ca8 <HAL_GPIO_Init+0x21c>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e002      	b.n	8001ca8 <HAL_GPIO_Init+0x21c>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x21c>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f002 0203 	and.w	r2, r2, #3
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	4093      	lsls	r3, r2
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb8:	4935      	ldr	r1, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x304>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc6:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cea:	4a31      	ldr	r2, [pc, #196]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d68:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	f67f ae96 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40021400 	.word	0x40021400
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40013c00 	.word	0x40013c00

08001db4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e001      	b.n	8001dd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
 8001df0:	4613      	mov	r3, r2
 8001df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df4:	787b      	ldrb	r3, [r7, #1]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e00:	e003      	b.n	8001e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	041a      	lsls	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	619a      	str	r2, [r3, #24]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e28:	887a      	ldrh	r2, [r7, #2]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	041a      	lsls	r2, r3, #16
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	400b      	ands	r3, r1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e12b      	b.n	80020b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff fb24 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eb0:	f000 fe8a 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8001eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a81      	ldr	r2, [pc, #516]	; (80020c0 <HAL_I2C_Init+0x274>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d807      	bhi.n	8001ed0 <HAL_I2C_Init+0x84>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a80      	ldr	r2, [pc, #512]	; (80020c4 <HAL_I2C_Init+0x278>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	bf94      	ite	ls
 8001ec8:	2301      	movls	r3, #1
 8001eca:	2300      	movhi	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	e006      	b.n	8001ede <HAL_I2C_Init+0x92>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a7d      	ldr	r2, [pc, #500]	; (80020c8 <HAL_I2C_Init+0x27c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	bf94      	ite	ls
 8001ed8:	2301      	movls	r3, #1
 8001eda:	2300      	movhi	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0e7      	b.n	80020b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4a78      	ldr	r2, [pc, #480]	; (80020cc <HAL_I2C_Init+0x280>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0c9b      	lsrs	r3, r3, #18
 8001ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a6a      	ldr	r2, [pc, #424]	; (80020c0 <HAL_I2C_Init+0x274>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d802      	bhi.n	8001f20 <HAL_I2C_Init+0xd4>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	e009      	b.n	8001f34 <HAL_I2C_Init+0xe8>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	4a69      	ldr	r2, [pc, #420]	; (80020d0 <HAL_I2C_Init+0x284>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	3301      	adds	r3, #1
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	495c      	ldr	r1, [pc, #368]	; (80020c0 <HAL_I2C_Init+0x274>)
 8001f50:	428b      	cmp	r3, r1
 8001f52:	d819      	bhi.n	8001f88 <HAL_I2C_Init+0x13c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e59      	subs	r1, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f62:	1c59      	adds	r1, r3, #1
 8001f64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f68:	400b      	ands	r3, r1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_I2C_Init+0x138>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1e59      	subs	r1, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f82:	e051      	b.n	8002028 <HAL_I2C_Init+0x1dc>
 8001f84:	2304      	movs	r3, #4
 8001f86:	e04f      	b.n	8002028 <HAL_I2C_Init+0x1dc>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d111      	bne.n	8001fb4 <HAL_I2C_Init+0x168>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1e58      	subs	r0, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	440b      	add	r3, r1
 8001f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e012      	b.n	8001fda <HAL_I2C_Init+0x18e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e58      	subs	r0, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	0099      	lsls	r1, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Init+0x196>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e022      	b.n	8002028 <HAL_I2C_Init+0x1dc>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10e      	bne.n	8002008 <HAL_I2C_Init+0x1bc>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1e58      	subs	r0, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	440b      	add	r3, r1
 8001ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002006:	e00f      	b.n	8002028 <HAL_I2C_Init+0x1dc>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	0099      	lsls	r1, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	6809      	ldr	r1, [r1, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002056:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6911      	ldr	r1, [r2, #16]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68d2      	ldr	r2, [r2, #12]
 8002062:	4311      	orrs	r1, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	000186a0 	.word	0x000186a0
 80020c4:	001e847f 	.word	0x001e847f
 80020c8:	003d08ff 	.word	0x003d08ff
 80020cc:	431bde83 	.word	0x431bde83
 80020d0:	10624dd3 	.word	0x10624dd3

080020d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	461a      	mov	r2, r3
 80020e0:	460b      	mov	r3, r1
 80020e2:	817b      	strh	r3, [r7, #10]
 80020e4:	4613      	mov	r3, r2
 80020e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff fbbe 	bl	8001868 <HAL_GetTick>
 80020ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	f040 80e0 	bne.w	80022bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2319      	movs	r3, #25
 8002102:	2201      	movs	r2, #1
 8002104:	4970      	ldr	r1, [pc, #448]	; (80022c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fa92 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002112:	2302      	movs	r3, #2
 8002114:	e0d3      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_I2C_Master_Transmit+0x50>
 8002120:	2302      	movs	r3, #2
 8002122:	e0cc      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d007      	beq.n	800214a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002158:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2221      	movs	r2, #33	; 0x21
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2210      	movs	r2, #16
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	893a      	ldrh	r2, [r7, #8]
 800217a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a50      	ldr	r2, [pc, #320]	; (80022cc <HAL_I2C_Master_Transmit+0x1f8>)
 800218a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	6a3a      	ldr	r2, [r7, #32]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f9ca 	bl	800252c <I2C_MasterRequestWrite>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e08d      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021b8:	e066      	b.n	8002288 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	6a39      	ldr	r1, [r7, #32]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fb50 	bl	8002864 <I2C_WaitOnTXEFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d107      	bne.n	80021e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b04      	cmp	r3, #4
 8002222:	d11b      	bne.n	800225c <HAL_I2C_Master_Transmit+0x188>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d017      	beq.n	800225c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	6a39      	ldr	r1, [r7, #32]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fb47 	bl	80028f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00d      	beq.n	8002288 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	2b04      	cmp	r3, #4
 8002272:	d107      	bne.n	8002284 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e01a      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	d194      	bne.n	80021ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	00100002 	.word	0x00100002
 80022cc:	ffff0000 	.word	0xffff0000

080022d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff fac2 	bl	8001868 <HAL_GetTick>
 80022e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	f040 8111 	bne.w	800251a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2319      	movs	r3, #25
 80022fe:	2201      	movs	r2, #1
 8002300:	4988      	ldr	r1, [pc, #544]	; (8002524 <HAL_I2C_IsDeviceReady+0x254>)
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f994 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
 8002310:	e104      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2C_IsDeviceReady+0x50>
 800231c:	2302      	movs	r3, #2
 800231e:	e0fd      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d007      	beq.n	8002346 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2224      	movs	r2, #36	; 0x24
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a70      	ldr	r2, [pc, #448]	; (8002528 <HAL_I2C_IsDeviceReady+0x258>)
 8002368:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002378:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2200      	movs	r2, #0
 8002382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f952 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023a0:	d103      	bne.n	80023aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0b6      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ae:	897b      	ldrh	r3, [r7, #10]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff fa53 	bl	8001868 <HAL_GetTick>
 80023c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	bf0c      	ite	eq
 80023d2:	2301      	moveq	r3, #1
 80023d4:	2300      	movne	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023f2:	e025      	b.n	8002440 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023f4:	f7ff fa38 	bl	8001868 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d302      	bcc.n	800240a <HAL_I2C_IsDeviceReady+0x13a>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	22a0      	movs	r2, #160	; 0xa0
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b02      	cmp	r3, #2
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2ba0      	cmp	r3, #160	; 0xa0
 800244a:	d005      	beq.n	8002458 <HAL_I2C_IsDeviceReady+0x188>
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <HAL_I2C_IsDeviceReady+0x188>
 8002452:	7dbb      	ldrb	r3, [r7, #22]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0cd      	beq.n	80023f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d129      	bne.n	80024c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2319      	movs	r3, #25
 800249a:	2201      	movs	r2, #1
 800249c:	4921      	ldr	r1, [pc, #132]	; (8002524 <HAL_I2C_IsDeviceReady+0x254>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f8c6 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e036      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e02c      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2319      	movs	r3, #25
 80024e2:	2201      	movs	r2, #1
 80024e4:	490f      	ldr	r1, [pc, #60]	; (8002524 <HAL_I2C_IsDeviceReady+0x254>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f8a2 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e012      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	f4ff af32 	bcc.w	800236a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800251a:	2302      	movs	r3, #2
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	00100002 	.word	0x00100002
 8002528:	ffff0000 	.word	0xffff0000

0800252c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	460b      	mov	r3, r1
 800253a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d006      	beq.n	8002556 <I2C_MasterRequestWrite+0x2a>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d003      	beq.n	8002556 <I2C_MasterRequestWrite+0x2a>
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002554:	d108      	bne.n	8002568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e00b      	b.n	8002580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	2b12      	cmp	r3, #18
 800256e:	d107      	bne.n	8002580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f84f 	bl	8002630 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00d      	beq.n	80025b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a6:	d103      	bne.n	80025b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e035      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025bc:	d108      	bne.n	80025d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025be:	897b      	ldrh	r3, [r7, #10]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	e01b      	b.n	8002608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025d0:	897b      	ldrh	r3, [r7, #10]
 80025d2:	11db      	asrs	r3, r3, #7
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f003 0306 	and.w	r3, r3, #6
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f063 030f 	orn	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <I2C_MasterRequestWrite+0xfc>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f898 	bl	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e010      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <I2C_MasterRequestWrite+0x100>)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f888 	bl	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	00010008 	.word	0x00010008
 800262c:	00010002 	.word	0x00010002

08002630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002640:	e048      	b.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d044      	beq.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff f90d 	bl	8001868 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <I2C_WaitOnFlagUntilTimeout+0x30>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d139      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	0c1b      	lsrs	r3, r3, #16
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10d      	bne.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x56>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	43da      	mvns	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4013      	ands	r3, r2
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf0c      	ite	eq
 800267c:	2301      	moveq	r3, #1
 800267e:	2300      	movne	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	e00c      	b.n	80026a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	43da      	mvns	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d116      	bne.n	80026d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e023      	b.n	800271c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d10d      	bne.n	80026fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	43da      	mvns	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	4013      	ands	r3, r2
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	e00c      	b.n	8002714 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	43da      	mvns	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	429a      	cmp	r2, r3
 8002718:	d093      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002732:	e071      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002742:	d123      	bne.n	800278c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800275c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e067      	b.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d041      	beq.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002794:	f7ff f868 	bl	8001868 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d136      	bne.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d10c      	bne.n	80027ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e00b      	b.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e021      	b.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0c1b      	lsrs	r3, r3, #16
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10c      	bne.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e00b      	b.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4013      	ands	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	bf14      	ite	ne
 800284e:	2301      	movne	r3, #1
 8002850:	2300      	moveq	r3, #0
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	f47f af6d 	bne.w	8002734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002870:	e034      	b.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f886 	bl	8002984 <I2C_IsAcknowledgeFailed>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e034      	b.n	80028ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d028      	beq.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7fe ffed 	bl	8001868 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11d      	bne.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b80      	cmp	r3, #128	; 0x80
 80028ac:	d016      	beq.n	80028dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e007      	b.n	80028ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d1c3      	bne.n	8002872 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002900:	e034      	b.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f83e 	bl	8002984 <I2C_IsAcknowledgeFailed>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e034      	b.n	800297c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d028      	beq.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291a:	f7fe ffa5 	bl	8001868 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	429a      	cmp	r2, r3
 8002928:	d302      	bcc.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11d      	bne.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d016      	beq.n	800296c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e007      	b.n	800297c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d1c3      	bne.n	8002902 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299a:	d11b      	bne.n	80029d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0204 	orr.w	r2, r3, #4
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0cc      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d90c      	bls.n	8002a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0b8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	494d      	ldr	r1, [pc, #308]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d044      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e067      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4934      	ldr	r1, [pc, #208]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fec8 	bl	8001868 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fec4 	bl	8001868 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e04f      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d20c      	bcs.n	8002b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e032      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b38:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	490e      	ldr	r1, [pc, #56]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b6a:	f000 f887 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	490a      	ldr	r1, [pc, #40]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	5ccb      	ldrb	r3, [r1, r3]
 8002b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_ClockConfig+0x1c8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fd28 	bl	80015e0 <HAL_InitTick>

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023c00 	.word	0x40023c00
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08006fb0 	.word	0x08006fb0
 8002ba8:	20000014 	.word	0x20000014
 8002bac:	20000018 	.word	0x20000018

08002bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000014 	.word	0x20000014

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bcc:	f7ff fff0 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0a9b      	lsrs	r3, r3, #10
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08006fc0 	.word	0x08006fc0

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf4:	f7ff ffdc 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0b5b      	lsrs	r3, r3, #13
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4903      	ldr	r1, [pc, #12]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40023800 	.word	0x40023800
 8002c14:	08006fc0 	.word	0x08006fc0

08002c18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	220f      	movs	r2, #15
 8002c26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_RCC_GetClockConfig+0x5c>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0203 	and.w	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_RCC_GetClockConfig+0x5c>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_RCC_GetClockConfig+0x5c>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_RCC_GetClockConfig+0x5c>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	08db      	lsrs	r3, r3, #3
 8002c52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <HAL_RCC_GetClockConfig+0x60>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 020f 	and.w	r2, r3, #15
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	601a      	str	r2, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40023c00 	.word	0x40023c00

08002c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c80:	b0ae      	sub	sp, #184	; 0xb8
 8002c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca2:	4bcb      	ldr	r3, [pc, #812]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	f200 8206 	bhi.w	80030bc <HAL_RCC_GetSysClockFreq+0x440>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002ced 	.word	0x08002ced
 8002cbc:	080030bd 	.word	0x080030bd
 8002cc0:	080030bd 	.word	0x080030bd
 8002cc4:	080030bd 	.word	0x080030bd
 8002cc8:	08002cf5 	.word	0x08002cf5
 8002ccc:	080030bd 	.word	0x080030bd
 8002cd0:	080030bd 	.word	0x080030bd
 8002cd4:	080030bd 	.word	0x080030bd
 8002cd8:	08002cfd 	.word	0x08002cfd
 8002cdc:	080030bd 	.word	0x080030bd
 8002ce0:	080030bd 	.word	0x080030bd
 8002ce4:	080030bd 	.word	0x080030bd
 8002ce8:	08002eed 	.word	0x08002eed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4bb9      	ldr	r3, [pc, #740]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cf2:	e1e7      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf4:	4bb8      	ldr	r3, [pc, #736]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cfa:	e1e3      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cfc:	4bb4      	ldr	r3, [pc, #720]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d08:	4bb1      	ldr	r3, [pc, #708]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d071      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d14:	4bae      	ldr	r3, [pc, #696]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4c:	0150      	lsls	r0, r2, #5
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4621      	mov	r1, r4
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	6439      	str	r1, [r7, #64]	; 0x40
 8002d58:	4629      	mov	r1, r5
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	4641      	mov	r1, r8
 8002d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d76:	4641      	mov	r1, r8
 8002d78:	018a      	lsls	r2, r1, #6
 8002d7a:	4641      	mov	r1, r8
 8002d7c:	1a51      	subs	r1, r2, r1
 8002d7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d80:	4649      	mov	r1, r9
 8002d82:	eb63 0301 	sbc.w	r3, r3, r1
 8002d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d94:	4649      	mov	r1, r9
 8002d96:	00cb      	lsls	r3, r1, #3
 8002d98:	4641      	mov	r1, r8
 8002d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d9e:	4641      	mov	r1, r8
 8002da0:	00ca      	lsls	r2, r1, #3
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	4603      	mov	r3, r0
 8002da8:	4622      	mov	r2, r4
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
 8002dae:	462b      	mov	r3, r5
 8002db0:	460a      	mov	r2, r1
 8002db2:	eb42 0303 	adc.w	r3, r2, r3
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	024b      	lsls	r3, r1, #9
 8002dc8:	4621      	mov	r1, r4
 8002dca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dce:	4621      	mov	r1, r4
 8002dd0:	024a      	lsls	r2, r1, #9
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002de4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002de8:	f7fd fa6a 	bl	80002c0 <__aeabi_uldivmod>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4613      	mov	r3, r2
 8002df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002df6:	e067      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df8:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e12:	2300      	movs	r3, #0
 8002e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	0159      	lsls	r1, r3, #5
 8002e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2c:	0150      	lsls	r0, r2, #5
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4621      	mov	r1, r4
 8002e34:	1a51      	subs	r1, r2, r1
 8002e36:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e38:	4629      	mov	r1, r5
 8002e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	018b      	lsls	r3, r1, #6
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e56:	4641      	mov	r1, r8
 8002e58:	018a      	lsls	r2, r1, #6
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e60:	4649      	mov	r1, r9
 8002e62:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7a:	4692      	mov	sl, r2
 8002e7c:	469b      	mov	fp, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	eb1a 0303 	adds.w	r3, sl, r3
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	462b      	mov	r3, r5
 8002e88:	eb4b 0303 	adc.w	r3, fp, r3
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	028b      	lsls	r3, r1, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	028a      	lsls	r2, r1, #10
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8002eb4:	677a      	str	r2, [r7, #116]	; 0x74
 8002eb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002eba:	f7fd fa01 	bl	80002c0 <__aeabi_uldivmod>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec8:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002eea:	e0eb      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d06b      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4b32      	ldr	r3, [pc, #200]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	663b      	str	r3, [r7, #96]	; 0x60
 8002f18:	2300      	movs	r3, #0
 8002f1a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f20:	4622      	mov	r2, r4
 8002f22:	462b      	mov	r3, r5
 8002f24:	f04f 0000 	mov.w	r0, #0
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	0159      	lsls	r1, r3, #5
 8002f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f32:	0150      	lsls	r0, r2, #5
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4621      	mov	r1, r4
 8002f3a:	1a51      	subs	r1, r2, r1
 8002f3c:	61b9      	str	r1, [r7, #24]
 8002f3e:	4629      	mov	r1, r5
 8002f40:	eb63 0301 	sbc.w	r3, r3, r1
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f52:	4659      	mov	r1, fp
 8002f54:	018b      	lsls	r3, r1, #6
 8002f56:	4651      	mov	r1, sl
 8002f58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	018a      	lsls	r2, r1, #6
 8002f60:	4651      	mov	r1, sl
 8002f62:	ebb2 0801 	subs.w	r8, r2, r1
 8002f66:	4659      	mov	r1, fp
 8002f68:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	4623      	mov	r3, r4
 8002f86:	eb18 0303 	adds.w	r3, r8, r3
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	462b      	mov	r3, r5
 8002f8e:	eb49 0303 	adc.w	r3, r9, r3
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	024b      	lsls	r3, r1, #9
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002faa:	4621      	mov	r1, r4
 8002fac:	024a      	lsls	r2, r1, #9
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc0:	f7fd f97e 	bl	80002c0 <__aeabi_uldivmod>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4613      	mov	r3, r2
 8002fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fce:	e065      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x420>
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	00f42400 	.word	0x00f42400
 8002fd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fdc:	4b3d      	ldr	r3, [pc, #244]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fec:	653b      	str	r3, [r7, #80]	; 0x50
 8002fee:	2300      	movs	r3, #0
 8002ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ff6:	4642      	mov	r2, r8
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	f04f 0000 	mov.w	r0, #0
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003008:	0150      	lsls	r0, r2, #5
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4641      	mov	r1, r8
 8003010:	1a51      	subs	r1, r2, r1
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	4649      	mov	r1, r9
 8003016:	eb63 0301 	sbc.w	r3, r3, r1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003028:	4659      	mov	r1, fp
 800302a:	018b      	lsls	r3, r1, #6
 800302c:	4651      	mov	r1, sl
 800302e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003032:	4651      	mov	r1, sl
 8003034:	018a      	lsls	r2, r1, #6
 8003036:	4651      	mov	r1, sl
 8003038:	1a54      	subs	r4, r2, r1
 800303a:	4659      	mov	r1, fp
 800303c:	eb63 0501 	sbc.w	r5, r3, r1
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	00eb      	lsls	r3, r5, #3
 800304a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304e:	00e2      	lsls	r2, r4, #3
 8003050:	4614      	mov	r4, r2
 8003052:	461d      	mov	r5, r3
 8003054:	4643      	mov	r3, r8
 8003056:	18e3      	adds	r3, r4, r3
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	464b      	mov	r3, r9
 800305c:	eb45 0303 	adc.w	r3, r5, r3
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003084:	2200      	movs	r2, #0
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
 8003088:	64fa      	str	r2, [r7, #76]	; 0x4c
 800308a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800308e:	f7fd f917 	bl	80002c0 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4613      	mov	r3, r2
 8003098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	0f1b      	lsrs	r3, r3, #28
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80030aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030ba:	e003      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	37b8      	adds	r7, #184	; 0xb8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	00f42400 	.word	0x00f42400

080030dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e28d      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8083 	beq.w	8003202 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030fc:	4b94      	ldr	r3, [pc, #592]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d019      	beq.n	800313c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003108:	4b91      	ldr	r3, [pc, #580]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003110:	2b08      	cmp	r3, #8
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003114:	4b8e      	ldr	r3, [pc, #568]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003120:	d00c      	beq.n	800313c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003122:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d112      	bne.n	8003154 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312e:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	4b84      	ldr	r3, [pc, #528]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05b      	beq.n	8003200 <HAL_RCC_OscConfig+0x124>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d157      	bne.n	8003200 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e25a      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d106      	bne.n	800316c <HAL_RCC_OscConfig+0x90>
 800315e:	4b7c      	ldr	r3, [pc, #496]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7b      	ldr	r2, [pc, #492]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e01d      	b.n	80031a8 <HAL_RCC_OscConfig+0xcc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0xb4>
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a75      	ldr	r2, [pc, #468]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b73      	ldr	r3, [pc, #460]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a72      	ldr	r2, [pc, #456]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e00b      	b.n	80031a8 <HAL_RCC_OscConfig+0xcc>
 8003190:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6e      	ldr	r2, [pc, #440]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6b      	ldr	r2, [pc, #428]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fb5a 	bl	8001868 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe fb56 	bl	8001868 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e21f      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b61      	ldr	r3, [pc, #388]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0xdc>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe fb46 	bl	8001868 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fe fb42 	bl	8001868 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e20b      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	4b57      	ldr	r3, [pc, #348]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x104>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06f      	beq.n	80032ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800320e:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b00      	cmp	r3, #0
 8003218:	d017      	beq.n	800324a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003222:	2b08      	cmp	r3, #8
 8003224:	d105      	bne.n	8003232 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003226:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d11c      	bne.n	8003278 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d116      	bne.n	8003278 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_RCC_OscConfig+0x186>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d001      	beq.n	8003262 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e1d3      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4937      	ldr	r1, [pc, #220]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003276:	e03a      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003280:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCC_OscConfig+0x278>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe faef 	bl	8001868 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328e:	f7fe faeb 	bl	8001868 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e1b4      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4925      	ldr	r1, [pc, #148]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x278>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe face 	bl	8001868 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d0:	f7fe faca 	bl	8001868 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e193      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d036      	beq.n	8003368 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_RCC_OscConfig+0x27c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe faae 	bl	8001868 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003310:	f7fe faaa 	bl	8001868 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e173      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0x234>
 800332e:	e01b      	b.n	8003368 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x27c>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fe fa97 	bl	8001868 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333c:	e00e      	b.n	800335c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333e:	f7fe fa93 	bl	8001868 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d907      	bls.n	800335c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e15c      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
 8003350:	40023800 	.word	0x40023800
 8003354:	42470000 	.word	0x42470000
 8003358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b8a      	ldr	r3, [pc, #552]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ea      	bne.n	800333e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8097 	beq.w	80034a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b83      	ldr	r3, [pc, #524]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b7c      	ldr	r3, [pc, #496]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a6:	4b79      	ldr	r3, [pc, #484]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d118      	bne.n	80033e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b2:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033be:	f7fe fa53 	bl	8001868 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c6:	f7fe fa4f 	bl	8001868 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e118      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	4b6c      	ldr	r3, [pc, #432]	; (800358c <HAL_RCC_OscConfig+0x4b0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x31e>
 80033ec:	4b66      	ldr	r3, [pc, #408]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a65      	ldr	r2, [pc, #404]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
 80033f8:	e01c      	b.n	8003434 <HAL_RCC_OscConfig+0x358>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d10c      	bne.n	800341c <HAL_RCC_OscConfig+0x340>
 8003402:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a60      	ldr	r2, [pc, #384]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	4b5e      	ldr	r3, [pc, #376]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	4a5d      	ldr	r2, [pc, #372]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6713      	str	r3, [r2, #112]	; 0x70
 800341a:	e00b      	b.n	8003434 <HAL_RCC_OscConfig+0x358>
 800341c:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a59      	ldr	r2, [pc, #356]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a56      	ldr	r2, [pc, #344]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800342e:	f023 0304 	bic.w	r3, r3, #4
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe fa14 	bl	8001868 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003444:	f7fe fa10 	bl	8001868 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e0d7      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345a:	4b4b      	ldr	r3, [pc, #300]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ee      	beq.n	8003444 <HAL_RCC_OscConfig+0x368>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe f9fe 	bl	8001868 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fe f9fa 	bl	8001868 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0c1      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003486:	4b40      	ldr	r3, [pc, #256]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1ee      	bne.n	8003470 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003498:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80ad 	beq.w	8003608 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ae:	4b36      	ldr	r3, [pc, #216]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d060      	beq.n	800357c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d145      	bne.n	800354e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe f9ce 	bl	8001868 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe f9ca 	bl	8001868 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e093      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	071b      	lsls	r3, r3, #28
 800351a:	491b      	ldr	r1, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fe f99f 	bl	8001868 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe f99b 	bl	8001868 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e064      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x452>
 800354c:	e05c      	b.n	8003608 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCC_OscConfig+0x4b4>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe f988 	bl	8001868 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe f984 	bl	8001868 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e04d      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_RCC_OscConfig+0x4ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x480>
 800357a:	e045      	b.n	8003608 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e040      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
 8003588:	40023800 	.word	0x40023800
 800358c:	40007000 	.word	0x40007000
 8003590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <HAL_RCC_OscConfig+0x538>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d030      	beq.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d129      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d122      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d119      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d10f      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e041      	b.n	80036ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f839 	bl	80036b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f000 f9c0 	bl	80039dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
	...

080036cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e04e      	b.n	8003782 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a23      	ldr	r2, [pc, #140]	; (8003790 <HAL_TIM_Base_Start_IT+0xc4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d022      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x80>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d01d      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x80>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_TIM_Base_Start_IT+0xc8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d018      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x80>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_TIM_Base_Start_IT+0xcc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d013      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x80>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_TIM_Base_Start_IT+0xd0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00e      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x80>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d009      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x80>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <HAL_TIM_Base_Start_IT+0x80>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b06      	cmp	r3, #6
 800375c:	d010      	beq.n	8003780 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	e007      	b.n	8003780 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	40010400 	.word	0x40010400
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40001800 	.word	0x40001800

080037ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d020      	beq.n	8003810 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0202 	mvn.w	r2, #2
 80037e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f8d2 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f8c4 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8d5 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d020      	beq.n	800385c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01b      	beq.n	800385c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0204 	mvn.w	r2, #4
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8ac 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f89e 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8af 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d020      	beq.n	80038a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0208 	mvn.w	r2, #8
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2204      	movs	r2, #4
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f886 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f878 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f889 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d020      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0210 	mvn.w	r2, #16
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2208      	movs	r2, #8
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f860 	bl	80039a0 <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f852 	bl	800398c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f863 	bl	80039b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0201 	mvn.w	r2, #1
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd fad0 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f906 	bl	8003b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f834 	bl	80039c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0220 	mvn.w	r2, #32
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8d8 	bl	8003b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a46      	ldr	r2, [pc, #280]	; (8003b08 <TIM_Base_SetConfig+0x12c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fa:	d00f      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a43      	ldr	r2, [pc, #268]	; (8003b0c <TIM_Base_SetConfig+0x130>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00b      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a42      	ldr	r2, [pc, #264]	; (8003b10 <TIM_Base_SetConfig+0x134>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d007      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a41      	ldr	r2, [pc, #260]	; (8003b14 <TIM_Base_SetConfig+0x138>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d003      	beq.n	8003a1c <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a40      	ldr	r2, [pc, #256]	; (8003b18 <TIM_Base_SetConfig+0x13c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a35      	ldr	r2, [pc, #212]	; (8003b08 <TIM_Base_SetConfig+0x12c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d02b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d027      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a32      	ldr	r2, [pc, #200]	; (8003b0c <TIM_Base_SetConfig+0x130>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d023      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <TIM_Base_SetConfig+0x134>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01f      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a30      	ldr	r2, [pc, #192]	; (8003b14 <TIM_Base_SetConfig+0x138>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2f      	ldr	r2, [pc, #188]	; (8003b18 <TIM_Base_SetConfig+0x13c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d017      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a2e      	ldr	r2, [pc, #184]	; (8003b1c <TIM_Base_SetConfig+0x140>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a2d      	ldr	r2, [pc, #180]	; (8003b20 <TIM_Base_SetConfig+0x144>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00f      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2c      	ldr	r2, [pc, #176]	; (8003b24 <TIM_Base_SetConfig+0x148>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <TIM_Base_SetConfig+0x14c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <TIM_Base_SetConfig+0x150>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a29      	ldr	r2, [pc, #164]	; (8003b30 <TIM_Base_SetConfig+0x154>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a10      	ldr	r2, [pc, #64]	; (8003b08 <TIM_Base_SetConfig+0x12c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_Base_SetConfig+0xf8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <TIM_Base_SetConfig+0x13c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d103      	bne.n	8003adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f023 0201 	bic.w	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]
  }
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40010400 	.word	0x40010400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800
 8003b28:	40001800 	.word	0x40001800
 8003b2c:	40001c00 	.word	0x40001c00
 8003b30:	40002000 	.word	0x40002000

08003b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e042      	b.n	8003bf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd fce4 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f973 	bl	8003e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d175      	bne.n	8003d08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_UART_Transmit+0x2c>
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e06e      	b.n	8003d0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2221      	movs	r2, #33	; 0x21
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c3a:	f7fd fe15 	bl	8001868 <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c54:	d108      	bne.n	8003c68 <HAL_UART_Transmit+0x6c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d104      	bne.n	8003c68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	e003      	b.n	8003c70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c70:	e02e      	b.n	8003cd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2180      	movs	r1, #128	; 0x80
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f848 	bl	8003d12 <UART_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e03a      	b.n	8003d0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3302      	adds	r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e007      	b.n	8003cc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1cb      	bne.n	8003c72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2140      	movs	r1, #64	; 0x40
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f814 	bl	8003d12 <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e006      	b.n	8003d0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d22:	e03b      	b.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d037      	beq.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2c:	f7fd fd9c 	bl	8001868 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	6a3a      	ldr	r2, [r7, #32]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d302      	bcc.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e03a      	b.n	8003dbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d020      	beq.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d01d      	beq.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d116      	bne.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f81d 	bl	8003dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e00f      	b.n	8003dbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d0b4      	beq.n	8003d24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b095      	sub	sp, #84	; 0x54
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dec:	643a      	str	r2, [r7, #64]	; 0x40
 8003dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e5      	bne.n	8003dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3314      	adds	r3, #20
 8003e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e5      	bne.n	8003e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d119      	bne.n	8003e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f023 0310 	bic.w	r3, r3, #16
 8003e52:	647b      	str	r3, [r7, #68]	; 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e5c:	61ba      	str	r2, [r7, #24]
 8003e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6979      	ldr	r1, [r7, #20]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e5      	bne.n	8003e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e7e:	bf00      	nop
 8003e80:	3754      	adds	r7, #84	; 0x54
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e90:	b0c0      	sub	sp, #256	; 0x100
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	68d9      	ldr	r1, [r3, #12]
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	ea40 0301 	orr.w	r3, r0, r1
 8003eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ee4:	f021 010c 	bic.w	r1, r1, #12
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f06:	6999      	ldr	r1, [r3, #24]
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	ea40 0301 	orr.w	r3, r0, r1
 8003f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b8f      	ldr	r3, [pc, #572]	; (8004158 <UART_SetConfig+0x2cc>)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d005      	beq.n	8003f2c <UART_SetConfig+0xa0>
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b8d      	ldr	r3, [pc, #564]	; (800415c <UART_SetConfig+0x2d0>)
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d104      	bne.n	8003f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f2c:	f7fe fe60 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8003f30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f34:	e003      	b.n	8003f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f36:	f7fe fe47 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 8003f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f48:	f040 810c 	bne.w	8004164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f5e:	4622      	mov	r2, r4
 8003f60:	462b      	mov	r3, r5
 8003f62:	1891      	adds	r1, r2, r2
 8003f64:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f66:	415b      	adcs	r3, r3
 8003f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f6e:	4621      	mov	r1, r4
 8003f70:	eb12 0801 	adds.w	r8, r2, r1
 8003f74:	4629      	mov	r1, r5
 8003f76:	eb43 0901 	adc.w	r9, r3, r1
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f8e:	4690      	mov	r8, r2
 8003f90:	4699      	mov	r9, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	eb18 0303 	adds.w	r3, r8, r3
 8003f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	eb49 0303 	adc.w	r3, r9, r3
 8003fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fba:	460b      	mov	r3, r1
 8003fbc:	18db      	adds	r3, r3, r3
 8003fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	eb42 0303 	adc.w	r3, r2, r3
 8003fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fd0:	f7fc f976 	bl	80002c0 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4b61      	ldr	r3, [pc, #388]	; (8004160 <UART_SetConfig+0x2d4>)
 8003fda:	fba3 2302 	umull	r2, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	011c      	lsls	r4, r3, #4
 8003fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	1891      	adds	r1, r2, r2
 8003ffa:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ffc:	415b      	adcs	r3, r3
 8003ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004004:	4641      	mov	r1, r8
 8004006:	eb12 0a01 	adds.w	sl, r2, r1
 800400a:	4649      	mov	r1, r9
 800400c:	eb43 0b01 	adc.w	fp, r3, r1
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800401c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004024:	4692      	mov	sl, r2
 8004026:	469b      	mov	fp, r3
 8004028:	4643      	mov	r3, r8
 800402a:	eb1a 0303 	adds.w	r3, sl, r3
 800402e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004032:	464b      	mov	r3, r9
 8004034:	eb4b 0303 	adc.w	r3, fp, r3
 8004038:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004048:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800404c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004050:	460b      	mov	r3, r1
 8004052:	18db      	adds	r3, r3, r3
 8004054:	643b      	str	r3, [r7, #64]	; 0x40
 8004056:	4613      	mov	r3, r2
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	647b      	str	r3, [r7, #68]	; 0x44
 800405e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004066:	f7fc f92b 	bl	80002c0 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4611      	mov	r1, r2
 8004070:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <UART_SetConfig+0x2d4>)
 8004072:	fba3 2301 	umull	r2, r3, r3, r1
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2264      	movs	r2, #100	; 0x64
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	1acb      	subs	r3, r1, r3
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004086:	4b36      	ldr	r3, [pc, #216]	; (8004160 <UART_SetConfig+0x2d4>)
 8004088:	fba3 2302 	umull	r2, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004094:	441c      	add	r4, r3
 8004096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	1891      	adds	r1, r2, r2
 80040ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80040b0:	415b      	adcs	r3, r3
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040b8:	4641      	mov	r1, r8
 80040ba:	1851      	adds	r1, r2, r1
 80040bc:	6339      	str	r1, [r7, #48]	; 0x30
 80040be:	4649      	mov	r1, r9
 80040c0:	414b      	adcs	r3, r1
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040d0:	4659      	mov	r1, fp
 80040d2:	00cb      	lsls	r3, r1, #3
 80040d4:	4651      	mov	r1, sl
 80040d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040da:	4651      	mov	r1, sl
 80040dc:	00ca      	lsls	r2, r1, #3
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	4642      	mov	r2, r8
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ec:	464b      	mov	r3, r9
 80040ee:	460a      	mov	r2, r1
 80040f0:	eb42 0303 	adc.w	r3, r2, r3
 80040f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004104:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800410c:	460b      	mov	r3, r1
 800410e:	18db      	adds	r3, r3, r3
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
 8004112:	4613      	mov	r3, r2
 8004114:	eb42 0303 	adc.w	r3, r2, r3
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800411e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004122:	f7fc f8cd 	bl	80002c0 <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <UART_SetConfig+0x2d4>)
 800412c:	fba3 1302 	umull	r1, r3, r3, r2
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	2164      	movs	r1, #100	; 0x64
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	3332      	adds	r3, #50	; 0x32
 800413e:	4a08      	ldr	r2, [pc, #32]	; (8004160 <UART_SetConfig+0x2d4>)
 8004140:	fba2 2303 	umull	r2, r3, r2, r3
 8004144:	095b      	lsrs	r3, r3, #5
 8004146:	f003 0207 	and.w	r2, r3, #7
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4422      	add	r2, r4
 8004152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004154:	e106      	b.n	8004364 <UART_SetConfig+0x4d8>
 8004156:	bf00      	nop
 8004158:	40011000 	.word	0x40011000
 800415c:	40011400 	.word	0x40011400
 8004160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004168:	2200      	movs	r2, #0
 800416a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800416e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004176:	4642      	mov	r2, r8
 8004178:	464b      	mov	r3, r9
 800417a:	1891      	adds	r1, r2, r2
 800417c:	6239      	str	r1, [r7, #32]
 800417e:	415b      	adcs	r3, r3
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004186:	4641      	mov	r1, r8
 8004188:	1854      	adds	r4, r2, r1
 800418a:	4649      	mov	r1, r9
 800418c:	eb43 0501 	adc.w	r5, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	00eb      	lsls	r3, r5, #3
 800419a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419e:	00e2      	lsls	r2, r4, #3
 80041a0:	4614      	mov	r4, r2
 80041a2:	461d      	mov	r5, r3
 80041a4:	4643      	mov	r3, r8
 80041a6:	18e3      	adds	r3, r4, r3
 80041a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041ac:	464b      	mov	r3, r9
 80041ae:	eb45 0303 	adc.w	r3, r5, r3
 80041b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041d2:	4629      	mov	r1, r5
 80041d4:	008b      	lsls	r3, r1, #2
 80041d6:	4621      	mov	r1, r4
 80041d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041dc:	4621      	mov	r1, r4
 80041de:	008a      	lsls	r2, r1, #2
 80041e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041e4:	f7fc f86c 	bl	80002c0 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4b60      	ldr	r3, [pc, #384]	; (8004370 <UART_SetConfig+0x4e4>)
 80041ee:	fba3 2302 	umull	r2, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	011c      	lsls	r4, r3, #4
 80041f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004200:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	61b9      	str	r1, [r7, #24]
 8004210:	415b      	adcs	r3, r3
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004218:	4641      	mov	r1, r8
 800421a:	1851      	adds	r1, r2, r1
 800421c:	6139      	str	r1, [r7, #16]
 800421e:	4649      	mov	r1, r9
 8004220:	414b      	adcs	r3, r1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004230:	4659      	mov	r1, fp
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4651      	mov	r1, sl
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4642      	mov	r2, r8
 8004246:	189b      	adds	r3, r3, r2
 8004248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800424c:	464b      	mov	r3, r9
 800424e:	460a      	mov	r2, r1
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	67bb      	str	r3, [r7, #120]	; 0x78
 8004262:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004270:	4649      	mov	r1, r9
 8004272:	008b      	lsls	r3, r1, #2
 8004274:	4641      	mov	r1, r8
 8004276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427a:	4641      	mov	r1, r8
 800427c:	008a      	lsls	r2, r1, #2
 800427e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004282:	f7fc f81d 	bl	80002c0 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4611      	mov	r1, r2
 800428c:	4b38      	ldr	r3, [pc, #224]	; (8004370 <UART_SetConfig+0x4e4>)
 800428e:	fba3 2301 	umull	r2, r3, r3, r1
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2264      	movs	r2, #100	; 0x64
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	1acb      	subs	r3, r1, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	; 0x32
 80042a0:	4a33      	ldr	r2, [pc, #204]	; (8004370 <UART_SetConfig+0x4e4>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ac:	441c      	add	r4, r3
 80042ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b2:	2200      	movs	r2, #0
 80042b4:	673b      	str	r3, [r7, #112]	; 0x70
 80042b6:	677a      	str	r2, [r7, #116]	; 0x74
 80042b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042bc:	4642      	mov	r2, r8
 80042be:	464b      	mov	r3, r9
 80042c0:	1891      	adds	r1, r2, r2
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	415b      	adcs	r3, r3
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042cc:	4641      	mov	r1, r8
 80042ce:	1851      	adds	r1, r2, r1
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	4649      	mov	r1, r9
 80042d4:	414b      	adcs	r3, r1
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042e4:	4659      	mov	r1, fp
 80042e6:	00cb      	lsls	r3, r1, #3
 80042e8:	4651      	mov	r1, sl
 80042ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ee:	4651      	mov	r1, sl
 80042f0:	00ca      	lsls	r2, r1, #3
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	4642      	mov	r2, r8
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80042fe:	464b      	mov	r3, r9
 8004300:	460a      	mov	r2, r1
 8004302:	eb42 0303 	adc.w	r3, r2, r3
 8004306:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	663b      	str	r3, [r7, #96]	; 0x60
 8004312:	667a      	str	r2, [r7, #100]	; 0x64
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004320:	4649      	mov	r1, r9
 8004322:	008b      	lsls	r3, r1, #2
 8004324:	4641      	mov	r1, r8
 8004326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432a:	4641      	mov	r1, r8
 800432c:	008a      	lsls	r2, r1, #2
 800432e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004332:	f7fb ffc5 	bl	80002c0 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <UART_SetConfig+0x4e4>)
 800433c:	fba3 1302 	umull	r1, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	3332      	adds	r3, #50	; 0x32
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <UART_SetConfig+0x4e4>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	f003 020f 	and.w	r2, r3, #15
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4422      	add	r2, r4
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800436a:	46bd      	mov	sp, r7
 800436c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004370:	51eb851f 	.word	0x51eb851f

08004374 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004386:	2b84      	cmp	r3, #132	; 0x84
 8004388:	d005      	beq.n	8004396 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800438a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4413      	add	r3, r2
 8004392:	3303      	adds	r3, #3
 8004394:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043a8:	f000 fade 	bl	8004968 <vTaskStartScheduler>
  
  return osOK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b4:	b089      	sub	sp, #36	; 0x24
 80043b6:	af04      	add	r7, sp, #16
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <osThreadCreate+0x54>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01c      	beq.n	8004406 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685c      	ldr	r4, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691e      	ldr	r6, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff ffc8 	bl	8004374 <makeFreeRtosPriority>
 80043e4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ee:	9202      	str	r2, [sp, #8]
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	9100      	str	r1, [sp, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4632      	mov	r2, r6
 80043f8:	4629      	mov	r1, r5
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f8ed 	bl	80045da <xTaskCreateStatic>
 8004400:	4603      	mov	r3, r0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e01c      	b.n	8004440 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685c      	ldr	r4, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004412:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ffaa 	bl	8004374 <makeFreeRtosPriority>
 8004420:	4602      	mov	r2, r0
 8004422:	f107 030c 	add.w	r3, r7, #12
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	9200      	str	r2, [sp, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	4632      	mov	r2, r6
 800442e:	4629      	mov	r1, r5
 8004430:	4620      	mov	r0, r4
 8004432:	f000 f92f 	bl	8004694 <xTaskCreate>
 8004436:	4603      	mov	r3, r0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d001      	beq.n	8004440 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004440:	68fb      	ldr	r3, [r7, #12]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800444a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <osDelay+0x16>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	e000      	b.n	8004462 <osDelay+0x18>
 8004460:	2301      	movs	r3, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fa4c 	bl	8004900 <vTaskDelay>
  
  return osOK;
 8004468:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f103 0208 	add.w	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f04f 32ff 	mov.w	r2, #4294967295
 800448a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f103 0208 	add.w	r2, r3, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f103 0208 	add.w	r2, r3, #8
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d103      	bne.n	8004534 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e00c      	b.n	800454e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3308      	adds	r3, #8
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e002      	b.n	8004542 <vListInsert+0x2e>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d2f6      	bcs.n	800453c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	601a      	str	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6892      	ldr	r2, [r2, #8]
 800459c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6852      	ldr	r2, [r2, #4]
 80045a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d103      	bne.n	80045ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1e5a      	subs	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b08e      	sub	sp, #56	; 0x38
 80045de:	af04      	add	r7, sp, #16
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <xTaskCreateStatic+0x46>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	61fb      	str	r3, [r7, #28]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004620:	2354      	movs	r3, #84	; 0x54
 8004622:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b54      	cmp	r3, #84	; 0x54
 8004628:	d00a      	beq.n	8004640 <xTaskCreateStatic+0x66>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	61bb      	str	r3, [r7, #24]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004640:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01e      	beq.n	8004686 <xTaskCreateStatic+0xac>
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004656:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004660:	2300      	movs	r3, #0
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	9302      	str	r3, [sp, #8]
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f850 	bl	800471e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800467e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004680:	f000 f8d4 	bl	800482c <prvAddNewTaskToReadyList>
 8004684:	e001      	b.n	800468a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800468a:	697b      	ldr	r3, [r7, #20]
	}
 800468c:	4618      	mov	r0, r3
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08c      	sub	sp, #48	; 0x30
 8004698:	af04      	add	r7, sp, #16
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fec5 	bl	8005438 <pvPortMalloc>
 80046ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00e      	beq.n	80046d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046b6:	2054      	movs	r0, #84	; 0x54
 80046b8:	f000 febe 	bl	8005438 <pvPortMalloc>
 80046bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ca:	e005      	b.n	80046d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	f000 ff7f 	bl	80055d0 <vPortFree>
 80046d2:	e001      	b.n	80046d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f80e 	bl	800471e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004702:	69f8      	ldr	r0, [r7, #28]
 8004704:	f000 f892 	bl	800482c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004708:	2301      	movs	r3, #1
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e002      	b.n	8004714 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004714:	69bb      	ldr	r3, [r7, #24]
	}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b088      	sub	sp, #32
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004736:	3b01      	subs	r3, #1
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f023 0307 	bic.w	r3, r3, #7
 8004744:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	617b      	str	r3, [r7, #20]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01f      	beq.n	80047ac <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e012      	b.n	8004798 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	4413      	add	r3, r2
 8004778:	7819      	ldrb	r1, [r3, #0]
 800477a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	3334      	adds	r3, #52	; 0x34
 8004782:	460a      	mov	r2, r1
 8004784:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	4413      	add	r3, r2
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	3301      	adds	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b0f      	cmp	r3, #15
 800479c:	d9e9      	bls.n	8004772 <prvInitialiseNewTask+0x54>
 800479e:	e000      	b.n	80047a2 <prvInitialiseNewTask+0x84>
			{
				break;
 80047a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047aa:	e003      	b.n	80047b4 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	2b06      	cmp	r3, #6
 80047b8:	d901      	bls.n	80047be <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047ba:	2306      	movs	r3, #6
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2200      	movs	r2, #0
 80047ce:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	3304      	adds	r3, #4
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff fe6c 	bl	80044b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	3318      	adds	r3, #24
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fe67 	bl	80044b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	f1c3 0207 	rsb	r2, r3, #7
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	2200      	movs	r2, #0
 80047fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	69b8      	ldr	r0, [r7, #24]
 800480e:	f000 fc05 	bl	800501c <pxPortInitialiseStack>
 8004812:	4602      	mov	r2, r0
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004834:	f000 fd1e 	bl	8005274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004838:	4b2a      	ldr	r3, [pc, #168]	; (80048e4 <prvAddNewTaskToReadyList+0xb8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	4a29      	ldr	r2, [pc, #164]	; (80048e4 <prvAddNewTaskToReadyList+0xb8>)
 8004840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004842:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <prvAddNewTaskToReadyList+0xbc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800484a:	4a27      	ldr	r2, [pc, #156]	; (80048e8 <prvAddNewTaskToReadyList+0xbc>)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004850:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <prvAddNewTaskToReadyList+0xb8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d110      	bne.n	800487a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004858:	f000 fabc 	bl	8004dd4 <prvInitialiseTaskLists>
 800485c:	e00d      	b.n	800487a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800485e:	4b23      	ldr	r3, [pc, #140]	; (80048ec <prvAddNewTaskToReadyList+0xc0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <prvAddNewTaskToReadyList+0xbc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	429a      	cmp	r2, r3
 8004872:	d802      	bhi.n	800487a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004874:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <prvAddNewTaskToReadyList+0xbc>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <prvAddNewTaskToReadyList+0xc4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3301      	adds	r3, #1
 8004880:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <prvAddNewTaskToReadyList+0xc4>)
 8004882:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	2201      	movs	r2, #1
 800488a:	409a      	lsls	r2, r3
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <prvAddNewTaskToReadyList+0xc8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4313      	orrs	r3, r2
 8004892:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <prvAddNewTaskToReadyList+0xc8>)
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <prvAddNewTaskToReadyList+0xcc>)
 80048a4:	441a      	add	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f7ff fe0d 	bl	80044cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048b2:	f000 fd0f 	bl	80052d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <prvAddNewTaskToReadyList+0xc0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00e      	beq.n	80048dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048be:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <prvAddNewTaskToReadyList+0xbc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d207      	bcs.n	80048dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <prvAddNewTaskToReadyList+0xd0>)
 80048ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000904 	.word	0x20000904
 80048e8:	20000804 	.word	0x20000804
 80048ec:	20000910 	.word	0x20000910
 80048f0:	20000920 	.word	0x20000920
 80048f4:	2000090c 	.word	0x2000090c
 80048f8:	20000808 	.word	0x20000808
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d017      	beq.n	8004942 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <vTaskDelay+0x60>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <vTaskDelay+0x30>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	60bb      	str	r3, [r7, #8]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004930:	f000 f87a 	bl	8004a28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004934:	2100      	movs	r1, #0
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fb0a 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800493c:	f000 f882 	bl	8004a44 <xTaskResumeAll>
 8004940:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <vTaskDelay+0x64>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	2000092c 	.word	0x2000092c
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08a      	sub	sp, #40	; 0x28
 800496c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004976:	463a      	mov	r2, r7
 8004978:	1d39      	adds	r1, r7, #4
 800497a:	f107 0308 	add.w	r3, r7, #8
 800497e:	4618      	mov	r0, r3
 8004980:	f7fb ffd0 	bl	8000924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	9202      	str	r2, [sp, #8]
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	2300      	movs	r3, #0
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2300      	movs	r3, #0
 8004994:	460a      	mov	r2, r1
 8004996:	491e      	ldr	r1, [pc, #120]	; (8004a10 <vTaskStartScheduler+0xa8>)
 8004998:	481e      	ldr	r0, [pc, #120]	; (8004a14 <vTaskStartScheduler+0xac>)
 800499a:	f7ff fe1e 	bl	80045da <xTaskCreateStatic>
 800499e:	4603      	mov	r3, r0
 80049a0:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <vTaskStartScheduler+0xb0>)
 80049a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049a4:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <vTaskStartScheduler+0xb0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049ac:	2301      	movs	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e001      	b.n	80049b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d116      	bne.n	80049ea <vTaskStartScheduler+0x82>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	613b      	str	r3, [r7, #16]
}
 80049ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049d0:	4b12      	ldr	r3, [pc, #72]	; (8004a1c <vTaskStartScheduler+0xb4>)
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295
 80049d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <vTaskStartScheduler+0xb8>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049de:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <vTaskStartScheduler+0xbc>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049e4:	f000 fba4 	bl	8005130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049e8:	e00e      	b.n	8004a08 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d10a      	bne.n	8004a08 <vTaskStartScheduler+0xa0>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60fb      	str	r3, [r7, #12]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <vTaskStartScheduler+0x9e>
}
 8004a08:	bf00      	nop
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	0800624c 	.word	0x0800624c
 8004a14:	08004da5 	.word	0x08004da5
 8004a18:	20000928 	.word	0x20000928
 8004a1c:	20000924 	.word	0x20000924
 8004a20:	20000910 	.word	0x20000910
 8004a24:	20000908 	.word	0x20000908

08004a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <vTaskSuspendAll+0x18>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <vTaskSuspendAll+0x18>)
 8004a34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	2000092c 	.word	0x2000092c

08004a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a52:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <xTaskResumeAll+0x114>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	603b      	str	r3, [r7, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a70:	f000 fc00 	bl	8005274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a74:	4b38      	ldr	r3, [pc, #224]	; (8004b58 <xTaskResumeAll+0x114>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	4a37      	ldr	r2, [pc, #220]	; (8004b58 <xTaskResumeAll+0x114>)
 8004a7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <xTaskResumeAll+0x114>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d161      	bne.n	8004b4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a86:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <xTaskResumeAll+0x118>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d05d      	beq.n	8004b4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a8e:	e02e      	b.n	8004aee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a90:	4b33      	ldr	r3, [pc, #204]	; (8004b60 <xTaskResumeAll+0x11c>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fd72 	bl	8004586 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fd6d 	bl	8004586 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <xTaskResumeAll+0x120>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	4a2a      	ldr	r2, [pc, #168]	; (8004b64 <xTaskResumeAll+0x120>)
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <xTaskResumeAll+0x124>)
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7ff fcf9 	bl	80044cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <xTaskResumeAll+0x128>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ae8:	4b21      	ldr	r3, [pc, #132]	; (8004b70 <xTaskResumeAll+0x12c>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aee:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <xTaskResumeAll+0x11c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1cc      	bne.n	8004a90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004afc:	f000 fa08 	bl	8004f10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b00:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <xTaskResumeAll+0x130>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b0c:	f000 f836 	bl	8004b7c <xTaskIncrementTick>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b16:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <xTaskResumeAll+0x12c>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f1      	bne.n	8004b0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004b28:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <xTaskResumeAll+0x130>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <xTaskResumeAll+0x12c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b36:	2301      	movs	r3, #1
 8004b38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <xTaskResumeAll+0x134>)
 8004b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b4a:	f000 fbc3 	bl	80052d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	2000092c 	.word	0x2000092c
 8004b5c:	20000904 	.word	0x20000904
 8004b60:	200008c4 	.word	0x200008c4
 8004b64:	2000090c 	.word	0x2000090c
 8004b68:	20000808 	.word	0x20000808
 8004b6c:	20000804 	.word	0x20000804
 8004b70:	20000918 	.word	0x20000918
 8004b74:	20000914 	.word	0x20000914
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b86:	4b4e      	ldr	r3, [pc, #312]	; (8004cc0 <xTaskIncrementTick+0x144>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 808e 	bne.w	8004cac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b90:	4b4c      	ldr	r3, [pc, #304]	; (8004cc4 <xTaskIncrementTick+0x148>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b98:	4a4a      	ldr	r2, [pc, #296]	; (8004cc4 <xTaskIncrementTick+0x148>)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d120      	bne.n	8004be6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ba4:	4b48      	ldr	r3, [pc, #288]	; (8004cc8 <xTaskIncrementTick+0x14c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	603b      	str	r3, [r7, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <xTaskIncrementTick+0x46>
 8004bc4:	4b40      	ldr	r3, [pc, #256]	; (8004cc8 <xTaskIncrementTick+0x14c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	4b40      	ldr	r3, [pc, #256]	; (8004ccc <xTaskIncrementTick+0x150>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a3e      	ldr	r2, [pc, #248]	; (8004cc8 <xTaskIncrementTick+0x14c>)
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4a3e      	ldr	r2, [pc, #248]	; (8004ccc <xTaskIncrementTick+0x150>)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	; (8004cd0 <xTaskIncrementTick+0x154>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <xTaskIncrementTick+0x154>)
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	f000 f995 	bl	8004f10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004be6:	4b3b      	ldr	r3, [pc, #236]	; (8004cd4 <xTaskIncrementTick+0x158>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d348      	bcc.n	8004c82 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf0:	4b35      	ldr	r3, [pc, #212]	; (8004cc8 <xTaskIncrementTick+0x14c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfa:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <xTaskIncrementTick+0x158>)
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	601a      	str	r2, [r3, #0]
					break;
 8004c02:	e03e      	b.n	8004c82 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c04:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <xTaskIncrementTick+0x14c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d203      	bcs.n	8004c24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c1c:	4a2d      	ldr	r2, [pc, #180]	; (8004cd4 <xTaskIncrementTick+0x158>)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c22:	e02e      	b.n	8004c82 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fcac 	bl	8004586 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	3318      	adds	r3, #24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fca3 	bl	8004586 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	2201      	movs	r2, #1
 8004c46:	409a      	lsls	r2, r3
 8004c48:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <xTaskIncrementTick+0x15c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <xTaskIncrementTick+0x15c>)
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <xTaskIncrementTick+0x160>)
 8004c60:	441a      	add	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4619      	mov	r1, r3
 8004c68:	4610      	mov	r0, r2
 8004c6a:	f7ff fc2f 	bl	80044cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <xTaskIncrementTick+0x164>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d3b9      	bcc.n	8004bf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c80:	e7b6      	b.n	8004bf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c82:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <xTaskIncrementTick+0x164>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4914      	ldr	r1, [pc, #80]	; (8004cdc <xTaskIncrementTick+0x160>)
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d901      	bls.n	8004c9e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c9e:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <xTaskIncrementTick+0x168>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e004      	b.n	8004cb6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <xTaskIncrementTick+0x16c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <xTaskIncrementTick+0x16c>)
 8004cb4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cb6:	697b      	ldr	r3, [r7, #20]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	2000092c 	.word	0x2000092c
 8004cc4:	20000908 	.word	0x20000908
 8004cc8:	200008bc 	.word	0x200008bc
 8004ccc:	200008c0 	.word	0x200008c0
 8004cd0:	2000091c 	.word	0x2000091c
 8004cd4:	20000924 	.word	0x20000924
 8004cd8:	2000090c 	.word	0x2000090c
 8004cdc:	20000808 	.word	0x20000808
 8004ce0:	20000804 	.word	0x20000804
 8004ce4:	20000918 	.word	0x20000918
 8004ce8:	20000914 	.word	0x20000914

08004cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cf2:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <vTaskSwitchContext+0xa4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cfa:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <vTaskSwitchContext+0xa8>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d00:	e03f      	b.n	8004d82 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <vTaskSwitchContext+0xa8>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d08:	4b23      	ldr	r3, [pc, #140]	; (8004d98 <vTaskSwitchContext+0xac>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	fab3 f383 	clz	r3, r3
 8004d14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d16:	7afb      	ldrb	r3, [r7, #11]
 8004d18:	f1c3 031f 	rsb	r3, r3, #31
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	491f      	ldr	r1, [pc, #124]	; (8004d9c <vTaskSwitchContext+0xb0>)
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	607b      	str	r3, [r7, #4]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <vTaskSwitchContext+0x5a>
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4a12      	ldr	r2, [pc, #72]	; (8004d9c <vTaskSwitchContext+0xb0>)
 8004d54:	4413      	add	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d104      	bne.n	8004d78 <vTaskSwitchContext+0x8c>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <vTaskSwitchContext+0xb4>)
 8004d80:	6013      	str	r3, [r2, #0]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	2000092c 	.word	0x2000092c
 8004d94:	20000918 	.word	0x20000918
 8004d98:	2000090c 	.word	0x2000090c
 8004d9c:	20000808 	.word	0x20000808
 8004da0:	20000804 	.word	0x20000804

08004da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dac:	f000 f852 	bl	8004e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <prvIdleTask+0x28>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d9f9      	bls.n	8004dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <prvIdleTask+0x2c>)
 8004dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dc8:	e7f0      	b.n	8004dac <prvIdleTask+0x8>
 8004dca:	bf00      	nop
 8004dcc:	20000808 	.word	0x20000808
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	e00c      	b.n	8004dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <prvInitialiseTaskLists+0x60>)
 8004dec:	4413      	add	r3, r2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff fb3f 	bl	8004472 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3301      	adds	r3, #1
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b06      	cmp	r3, #6
 8004dfe:	d9ef      	bls.n	8004de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e00:	480d      	ldr	r0, [pc, #52]	; (8004e38 <prvInitialiseTaskLists+0x64>)
 8004e02:	f7ff fb36 	bl	8004472 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e06:	480d      	ldr	r0, [pc, #52]	; (8004e3c <prvInitialiseTaskLists+0x68>)
 8004e08:	f7ff fb33 	bl	8004472 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e0c:	480c      	ldr	r0, [pc, #48]	; (8004e40 <prvInitialiseTaskLists+0x6c>)
 8004e0e:	f7ff fb30 	bl	8004472 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e12:	480c      	ldr	r0, [pc, #48]	; (8004e44 <prvInitialiseTaskLists+0x70>)
 8004e14:	f7ff fb2d 	bl	8004472 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e18:	480b      	ldr	r0, [pc, #44]	; (8004e48 <prvInitialiseTaskLists+0x74>)
 8004e1a:	f7ff fb2a 	bl	8004472 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <prvInitialiseTaskLists+0x78>)
 8004e20:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <prvInitialiseTaskLists+0x64>)
 8004e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <prvInitialiseTaskLists+0x7c>)
 8004e26:	4a05      	ldr	r2, [pc, #20]	; (8004e3c <prvInitialiseTaskLists+0x68>)
 8004e28:	601a      	str	r2, [r3, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000808 	.word	0x20000808
 8004e38:	20000894 	.word	0x20000894
 8004e3c:	200008a8 	.word	0x200008a8
 8004e40:	200008c4 	.word	0x200008c4
 8004e44:	200008d8 	.word	0x200008d8
 8004e48:	200008f0 	.word	0x200008f0
 8004e4c:	200008bc 	.word	0x200008bc
 8004e50:	200008c0 	.word	0x200008c0

08004e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e5a:	e019      	b.n	8004e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e5c:	f000 fa0a 	bl	8005274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e60:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <prvCheckTasksWaitingTermination+0x50>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fb8a 	bl	8004586 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <prvCheckTasksWaitingTermination+0x54>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <prvCheckTasksWaitingTermination+0x54>)
 8004e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e86:	f000 fa25 	bl	80052d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f810 	bl	8004eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e1      	bne.n	8004e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200008d8 	.word	0x200008d8
 8004ea8:	20000904 	.word	0x20000904
 8004eac:	200008ec 	.word	0x200008ec

08004eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d108      	bne.n	8004ed4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fb82 	bl	80055d0 <vPortFree>
				vPortFree( pxTCB );
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fb7f 	bl	80055d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ed2:	e018      	b.n	8004f06 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d103      	bne.n	8004ee6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fb76 	bl	80055d0 <vPortFree>
	}
 8004ee4:	e00f      	b.n	8004f06 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d00a      	beq.n	8004f06 <prvDeleteTCB+0x56>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	60fb      	str	r3, [r7, #12]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <prvDeleteTCB+0x54>
	}
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <prvResetNextTaskUnblockTime+0x38>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f20:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <prvResetNextTaskUnblockTime+0x3c>)
 8004f22:	f04f 32ff 	mov.w	r2, #4294967295
 8004f26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f28:	e008      	b.n	8004f3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <prvResetNextTaskUnblockTime+0x38>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <prvResetNextTaskUnblockTime+0x3c>)
 8004f3a:	6013      	str	r3, [r2, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	200008bc 	.word	0x200008bc
 8004f4c:	20000924 	.word	0x20000924

08004f50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f5a:	4b29      	ldr	r3, [pc, #164]	; (8005000 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f60:	4b28      	ldr	r3, [pc, #160]	; (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fb0d 	bl	8004586 <uxListRemove>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f72:	4b24      	ldr	r3, [pc, #144]	; (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	2201      	movs	r2, #1
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43da      	mvns	r2, r3
 8004f80:	4b21      	ldr	r3, [pc, #132]	; (8005008 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4013      	ands	r3, r2
 8004f86:	4a20      	ldr	r2, [pc, #128]	; (8005008 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d10a      	bne.n	8004fa8 <prvAddCurrentTaskToDelayedList+0x58>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f98:	4b1a      	ldr	r3, [pc, #104]	; (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	481a      	ldr	r0, [pc, #104]	; (800500c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fa2:	f7ff fa93 	bl	80044cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004fa6:	e026      	b.n	8004ff6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4413      	add	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d209      	bcs.n	8004fd4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f7ff faa1 	bl	8004514 <vListInsert>
}
 8004fd2:	e010      	b.n	8004ff6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f7ff fa97 	bl	8004514 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d202      	bcs.n	8004ff6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ff0:	4a09      	ldr	r2, [pc, #36]	; (8005018 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	6013      	str	r3, [r2, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000908 	.word	0x20000908
 8005004:	20000804 	.word	0x20000804
 8005008:	2000090c 	.word	0x2000090c
 800500c:	200008f0 	.word	0x200008f0
 8005010:	200008c0 	.word	0x200008c0
 8005014:	200008bc 	.word	0x200008bc
 8005018:	20000924 	.word	0x20000924

0800501c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3b04      	subs	r3, #4
 800502c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3b04      	subs	r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f023 0201 	bic.w	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b04      	subs	r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800504c:	4a0c      	ldr	r2, [pc, #48]	; (8005080 <pxPortInitialiseStack+0x64>)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3b14      	subs	r3, #20
 8005056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3b04      	subs	r3, #4
 8005062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f06f 0202 	mvn.w	r2, #2
 800506a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b20      	subs	r3, #32
 8005070:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005072:	68fb      	ldr	r3, [r7, #12]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	08005085 	.word	0x08005085

08005084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <prvTaskExitError+0x54>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d00a      	beq.n	80050ae <prvTaskExitError+0x2a>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	60fb      	str	r3, [r7, #12]
}
 80050aa:	bf00      	nop
 80050ac:	e7fe      	b.n	80050ac <prvTaskExitError+0x28>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60bb      	str	r3, [r7, #8]
}
 80050c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050c2:	bf00      	nop
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0fc      	beq.n	80050c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	20000020 	.word	0x20000020
 80050dc:	00000000 	.word	0x00000000

080050e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <pxCurrentTCBConst2>)
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	6808      	ldr	r0, [r1, #0]
 80050e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ea:	f380 8809 	msr	PSP, r0
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	4770      	bx	lr
 80050fc:	f3af 8000 	nop.w

08005100 <pxCurrentTCBConst2>:
 8005100:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop

08005108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005108:	4808      	ldr	r0, [pc, #32]	; (800512c <prvPortStartFirstTask+0x24>)
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f380 8808 	msr	MSP, r0
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8814 	msr	CONTROL, r0
 800511a:	b662      	cpsie	i
 800511c:	b661      	cpsie	f
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	df00      	svc	0
 8005128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800512a:	bf00      	nop
 800512c:	e000ed08 	.word	0xe000ed08

08005130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005136:	4b46      	ldr	r3, [pc, #280]	; (8005250 <xPortStartScheduler+0x120>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a46      	ldr	r2, [pc, #280]	; (8005254 <xPortStartScheduler+0x124>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10a      	bne.n	8005156 <xPortStartScheduler+0x26>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	613b      	str	r3, [r7, #16]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005156:	4b3e      	ldr	r3, [pc, #248]	; (8005250 <xPortStartScheduler+0x120>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a3f      	ldr	r2, [pc, #252]	; (8005258 <xPortStartScheduler+0x128>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10a      	bne.n	8005176 <xPortStartScheduler+0x46>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	60fb      	str	r3, [r7, #12]
}
 8005172:	bf00      	nop
 8005174:	e7fe      	b.n	8005174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005176:	4b39      	ldr	r3, [pc, #228]	; (800525c <xPortStartScheduler+0x12c>)
 8005178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	22ff      	movs	r2, #255	; 0xff
 8005186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4b31      	ldr	r3, [pc, #196]	; (8005260 <xPortStartScheduler+0x130>)
 800519c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800519e:	4b31      	ldr	r3, [pc, #196]	; (8005264 <xPortStartScheduler+0x134>)
 80051a0:	2207      	movs	r2, #7
 80051a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051a4:	e009      	b.n	80051ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80051a6:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <xPortStartScheduler+0x134>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <xPortStartScheduler+0x134>)
 80051ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d0ef      	beq.n	80051a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051c6:	4b27      	ldr	r3, [pc, #156]	; (8005264 <xPortStartScheduler+0x134>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f1c3 0307 	rsb	r3, r3, #7
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d00a      	beq.n	80051e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	60bb      	str	r3, [r7, #8]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051e8:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <xPortStartScheduler+0x134>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	4a1d      	ldr	r2, [pc, #116]	; (8005264 <xPortStartScheduler+0x134>)
 80051f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051f2:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <xPortStartScheduler+0x134>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <xPortStartScheduler+0x134>)
 80051fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005206:	4b18      	ldr	r3, [pc, #96]	; (8005268 <xPortStartScheduler+0x138>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a17      	ldr	r2, [pc, #92]	; (8005268 <xPortStartScheduler+0x138>)
 800520c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <xPortStartScheduler+0x138>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a14      	ldr	r2, [pc, #80]	; (8005268 <xPortStartScheduler+0x138>)
 8005218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800521c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800521e:	f000 f8dd 	bl	80053dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005222:	4b12      	ldr	r3, [pc, #72]	; (800526c <xPortStartScheduler+0x13c>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005228:	f000 f8fc 	bl	8005424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <xPortStartScheduler+0x140>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a0f      	ldr	r2, [pc, #60]	; (8005270 <xPortStartScheduler+0x140>)
 8005232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005238:	f7ff ff66 	bl	8005108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800523c:	f7ff fd56 	bl	8004cec <vTaskSwitchContext>
	prvTaskExitError();
 8005240:	f7ff ff20 	bl	8005084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	e000ed00 	.word	0xe000ed00
 8005254:	410fc271 	.word	0x410fc271
 8005258:	410fc270 	.word	0x410fc270
 800525c:	e000e400 	.word	0xe000e400
 8005260:	20000930 	.word	0x20000930
 8005264:	20000934 	.word	0x20000934
 8005268:	e000ed20 	.word	0xe000ed20
 800526c:	20000020 	.word	0x20000020
 8005270:	e000ef34 	.word	0xe000ef34

08005274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	607b      	str	r3, [r7, #4]
}
 800528c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <vPortEnterCritical+0x58>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3301      	adds	r3, #1
 8005294:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <vPortEnterCritical+0x58>)
 8005296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <vPortEnterCritical+0x58>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10f      	bne.n	80052c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <vPortEnterCritical+0x5c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	603b      	str	r3, [r7, #0]
}
 80052bc:	bf00      	nop
 80052be:	e7fe      	b.n	80052be <vPortEnterCritical+0x4a>
	}
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000020 	.word	0x20000020
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052da:	4b12      	ldr	r3, [pc, #72]	; (8005324 <vPortExitCritical+0x50>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <vPortExitCritical+0x24>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	607b      	str	r3, [r7, #4]
}
 80052f4:	bf00      	nop
 80052f6:	e7fe      	b.n	80052f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <vPortExitCritical+0x50>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <vPortExitCritical+0x50>)
 8005300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <vPortExitCritical+0x50>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d105      	bne.n	8005316 <vPortExitCritical+0x42>
 800530a:	2300      	movs	r3, #0
 800530c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000020 	.word	0x20000020
	...

08005330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005330:	f3ef 8009 	mrs	r0, PSP
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <pxCurrentTCBConst>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	f01e 0f10 	tst.w	lr, #16
 8005340:	bf08      	it	eq
 8005342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005354:	f380 8811 	msr	BASEPRI, r0
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f7ff fcc4 	bl	8004cec <vTaskSwitchContext>
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f380 8811 	msr	BASEPRI, r0
 800536c:	bc09      	pop	{r0, r3}
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	6808      	ldr	r0, [r1, #0]
 8005372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005376:	f01e 0f10 	tst.w	lr, #16
 800537a:	bf08      	it	eq
 800537c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005380:	f380 8809 	msr	PSP, r0
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	f3af 8000 	nop.w

08005390 <pxCurrentTCBConst>:
 8005390:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop

08005398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	607b      	str	r3, [r7, #4]
}
 80053b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053b2:	f7ff fbe3 	bl	8004b7c <xTaskIncrementTick>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053bc:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <SysTick_Handler+0x40>)
 80053be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f383 8811 	msr	BASEPRI, r3
}
 80053ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <vPortSetupTimerInterrupt+0x34>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <vPortSetupTimerInterrupt+0x38>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053ec:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <vPortSetupTimerInterrupt+0x3c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <vPortSetupTimerInterrupt+0x40>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	4a09      	ldr	r2, [pc, #36]	; (8005420 <vPortSetupTimerInterrupt+0x44>)
 80053fa:	3b01      	subs	r3, #1
 80053fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053fe:	4b04      	ldr	r3, [pc, #16]	; (8005410 <vPortSetupTimerInterrupt+0x34>)
 8005400:	2207      	movs	r2, #7
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	bf00      	nop
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	e000e010 	.word	0xe000e010
 8005414:	e000e018 	.word	0xe000e018
 8005418:	20000014 	.word	0x20000014
 800541c:	10624dd3 	.word	0x10624dd3
 8005420:	e000e014 	.word	0xe000e014

08005424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005434 <vPortEnableVFP+0x10>
 8005428:	6801      	ldr	r1, [r0, #0]
 800542a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800542e:	6001      	str	r1, [r0, #0]
 8005430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005432:	bf00      	nop
 8005434:	e000ed88 	.word	0xe000ed88

08005438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	; 0x28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005444:	f7ff faf0 	bl	8004a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005448:	4b5b      	ldr	r3, [pc, #364]	; (80055b8 <pvPortMalloc+0x180>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005450:	f000 f920 	bl	8005694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005454:	4b59      	ldr	r3, [pc, #356]	; (80055bc <pvPortMalloc+0x184>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 8093 	bne.w	8005588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01d      	beq.n	80054a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005468:	2208      	movs	r2, #8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	2b00      	cmp	r3, #0
 8005478:	d014      	beq.n	80054a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	3308      	adds	r3, #8
 8005482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <pvPortMalloc+0x6c>
	__asm volatile
 800548e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005492:	f383 8811 	msr	BASEPRI, r3
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	f3bf 8f4f 	dsb	sy
 800549e:	617b      	str	r3, [r7, #20]
}
 80054a0:	bf00      	nop
 80054a2:	e7fe      	b.n	80054a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d06e      	beq.n	8005588 <pvPortMalloc+0x150>
 80054aa:	4b45      	ldr	r3, [pc, #276]	; (80055c0 <pvPortMalloc+0x188>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d869      	bhi.n	8005588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054b4:	4b43      	ldr	r3, [pc, #268]	; (80055c4 <pvPortMalloc+0x18c>)
 80054b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054b8:	4b42      	ldr	r3, [pc, #264]	; (80055c4 <pvPortMalloc+0x18c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054be:	e004      	b.n	80054ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d903      	bls.n	80054dc <pvPortMalloc+0xa4>
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f1      	bne.n	80054c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054dc:	4b36      	ldr	r3, [pc, #216]	; (80055b8 <pvPortMalloc+0x180>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d050      	beq.n	8005588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2208      	movs	r2, #8
 80054ec:	4413      	add	r3, r2
 80054ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	1ad2      	subs	r2, r2, r3
 8005500:	2308      	movs	r3, #8
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	429a      	cmp	r2, r3
 8005506:	d91f      	bls.n	8005548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <pvPortMalloc+0xf8>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	613b      	str	r3, [r7, #16]
}
 800552c:	bf00      	nop
 800552e:	e7fe      	b.n	800552e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005542:	69b8      	ldr	r0, [r7, #24]
 8005544:	f000 f908 	bl	8005758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <pvPortMalloc+0x188>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <pvPortMalloc+0x188>)
 8005554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <pvPortMalloc+0x188>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <pvPortMalloc+0x190>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d203      	bcs.n	800556a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005562:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <pvPortMalloc+0x188>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <pvPortMalloc+0x190>)
 8005568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <pvPortMalloc+0x184>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	431a      	orrs	r2, r3
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800557e:	4b13      	ldr	r3, [pc, #76]	; (80055cc <pvPortMalloc+0x194>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a11      	ldr	r2, [pc, #68]	; (80055cc <pvPortMalloc+0x194>)
 8005586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005588:	f7ff fa5c 	bl	8004a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <pvPortMalloc+0x174>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	60fb      	str	r3, [r7, #12]
}
 80055a8:	bf00      	nop
 80055aa:	e7fe      	b.n	80055aa <pvPortMalloc+0x172>
	return pvReturn;
 80055ac:	69fb      	ldr	r3, [r7, #28]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3728      	adds	r7, #40	; 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20004540 	.word	0x20004540
 80055bc:	20004554 	.word	0x20004554
 80055c0:	20004544 	.word	0x20004544
 80055c4:	20004538 	.word	0x20004538
 80055c8:	20004548 	.word	0x20004548
 80055cc:	2000454c 	.word	0x2000454c

080055d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d04d      	beq.n	800567e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055e2:	2308      	movs	r3, #8
 80055e4:	425b      	negs	r3, r3
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4413      	add	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	4b24      	ldr	r3, [pc, #144]	; (8005688 <vPortFree+0xb8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <vPortFree+0x44>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	60fb      	str	r3, [r7, #12]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <vPortFree+0x62>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	60bb      	str	r3, [r7, #8]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	4b14      	ldr	r3, [pc, #80]	; (8005688 <vPortFree+0xb8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01e      	beq.n	800567e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11a      	bne.n	800567e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <vPortFree+0xb8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	43db      	mvns	r3, r3
 8005652:	401a      	ands	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005658:	f7ff f9e6 	bl	8004a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <vPortFree+0xbc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4413      	add	r3, r2
 8005666:	4a09      	ldr	r2, [pc, #36]	; (800568c <vPortFree+0xbc>)
 8005668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800566a:	6938      	ldr	r0, [r7, #16]
 800566c:	f000 f874 	bl	8005758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <vPortFree+0xc0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3301      	adds	r3, #1
 8005676:	4a06      	ldr	r2, [pc, #24]	; (8005690 <vPortFree+0xc0>)
 8005678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800567a:	f7ff f9e3 	bl	8004a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800567e:	bf00      	nop
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20004554 	.word	0x20004554
 800568c:	20004544 	.word	0x20004544
 8005690:	20004550 	.word	0x20004550

08005694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800569a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800569e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056a0:	4b27      	ldr	r3, [pc, #156]	; (8005740 <prvHeapInit+0xac>)
 80056a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00c      	beq.n	80056c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3307      	adds	r3, #7
 80056b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0307 	bic.w	r3, r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <prvHeapInit+0xac>)
 80056c4:	4413      	add	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056cc:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <prvHeapInit+0xb0>)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056d2:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <prvHeapInit+0xb0>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	4413      	add	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056e0:	2208      	movs	r2, #8
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0307 	bic.w	r3, r3, #7
 80056ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4a15      	ldr	r2, [pc, #84]	; (8005748 <prvHeapInit+0xb4>)
 80056f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <prvHeapInit+0xb4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2200      	movs	r2, #0
 80056fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <prvHeapInit+0xb4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005714:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <prvHeapInit+0xb4>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4a0a      	ldr	r2, [pc, #40]	; (800574c <prvHeapInit+0xb8>)
 8005722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	4a09      	ldr	r2, [pc, #36]	; (8005750 <prvHeapInit+0xbc>)
 800572a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <prvHeapInit+0xc0>)
 800572e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005732:	601a      	str	r2, [r3, #0]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000938 	.word	0x20000938
 8005744:	20004538 	.word	0x20004538
 8005748:	20004540 	.word	0x20004540
 800574c:	20004548 	.word	0x20004548
 8005750:	20004544 	.word	0x20004544
 8005754:	20004554 	.word	0x20004554

08005758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005760:	4b28      	ldr	r3, [pc, #160]	; (8005804 <prvInsertBlockIntoFreeList+0xac>)
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e002      	b.n	800576c <prvInsertBlockIntoFreeList+0x14>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	d8f7      	bhi.n	8005766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4413      	add	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d108      	bne.n	800579a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	441a      	add	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	441a      	add	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d118      	bne.n	80057e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <prvInsertBlockIntoFreeList+0xb0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d00d      	beq.n	80057d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	441a      	add	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e008      	b.n	80057e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <prvInsertBlockIntoFreeList+0xb0>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	e003      	b.n	80057e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d002      	beq.n	80057f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20004538 	.word	0x20004538
 8005808:	20004540 	.word	0x20004540

0800580c <siprintf>:
 800580c:	b40e      	push	{r1, r2, r3}
 800580e:	b500      	push	{lr}
 8005810:	b09c      	sub	sp, #112	; 0x70
 8005812:	ab1d      	add	r3, sp, #116	; 0x74
 8005814:	9002      	str	r0, [sp, #8]
 8005816:	9006      	str	r0, [sp, #24]
 8005818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800581c:	4809      	ldr	r0, [pc, #36]	; (8005844 <siprintf+0x38>)
 800581e:	9107      	str	r1, [sp, #28]
 8005820:	9104      	str	r1, [sp, #16]
 8005822:	4909      	ldr	r1, [pc, #36]	; (8005848 <siprintf+0x3c>)
 8005824:	f853 2b04 	ldr.w	r2, [r3], #4
 8005828:	9105      	str	r1, [sp, #20]
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	a902      	add	r1, sp, #8
 8005830:	f000 f9a0 	bl	8005b74 <_svfiprintf_r>
 8005834:	9b02      	ldr	r3, [sp, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	b01c      	add	sp, #112	; 0x70
 800583c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005840:	b003      	add	sp, #12
 8005842:	4770      	bx	lr
 8005844:	20000070 	.word	0x20000070
 8005848:	ffff0208 	.word	0xffff0208

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <__errno>:
 800585c:	4b01      	ldr	r3, [pc, #4]	; (8005864 <__errno+0x8>)
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000070 	.word	0x20000070

08005868 <__libc_init_array>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4d0d      	ldr	r5, [pc, #52]	; (80058a0 <__libc_init_array+0x38>)
 800586c:	4c0d      	ldr	r4, [pc, #52]	; (80058a4 <__libc_init_array+0x3c>)
 800586e:	1b64      	subs	r4, r4, r5
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	2600      	movs	r6, #0
 8005874:	42a6      	cmp	r6, r4
 8005876:	d109      	bne.n	800588c <__libc_init_array+0x24>
 8005878:	4d0b      	ldr	r5, [pc, #44]	; (80058a8 <__libc_init_array+0x40>)
 800587a:	4c0c      	ldr	r4, [pc, #48]	; (80058ac <__libc_init_array+0x44>)
 800587c:	f000 fc6a 	bl	8006154 <_init>
 8005880:	1b64      	subs	r4, r4, r5
 8005882:	10a4      	asrs	r4, r4, #2
 8005884:	2600      	movs	r6, #0
 8005886:	42a6      	cmp	r6, r4
 8005888:	d105      	bne.n	8005896 <__libc_init_array+0x2e>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005890:	4798      	blx	r3
 8005892:	3601      	adds	r6, #1
 8005894:	e7ee      	b.n	8005874 <__libc_init_array+0xc>
 8005896:	f855 3b04 	ldr.w	r3, [r5], #4
 800589a:	4798      	blx	r3
 800589c:	3601      	adds	r6, #1
 800589e:	e7f2      	b.n	8005886 <__libc_init_array+0x1e>
 80058a0:	08007004 	.word	0x08007004
 80058a4:	08007004 	.word	0x08007004
 80058a8:	08007004 	.word	0x08007004
 80058ac:	08007008 	.word	0x08007008

080058b0 <__retarget_lock_acquire_recursive>:
 80058b0:	4770      	bx	lr

080058b2 <__retarget_lock_release_recursive>:
 80058b2:	4770      	bx	lr

080058b4 <memcpy>:
 80058b4:	440a      	add	r2, r1
 80058b6:	4291      	cmp	r1, r2
 80058b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058bc:	d100      	bne.n	80058c0 <memcpy+0xc>
 80058be:	4770      	bx	lr
 80058c0:	b510      	push	{r4, lr}
 80058c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ca:	4291      	cmp	r1, r2
 80058cc:	d1f9      	bne.n	80058c2 <memcpy+0xe>
 80058ce:	bd10      	pop	{r4, pc}

080058d0 <_free_r>:
 80058d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058d2:	2900      	cmp	r1, #0
 80058d4:	d044      	beq.n	8005960 <_free_r+0x90>
 80058d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058da:	9001      	str	r0, [sp, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f1a1 0404 	sub.w	r4, r1, #4
 80058e2:	bfb8      	it	lt
 80058e4:	18e4      	addlt	r4, r4, r3
 80058e6:	f000 f8df 	bl	8005aa8 <__malloc_lock>
 80058ea:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <_free_r+0x94>)
 80058ec:	9801      	ldr	r0, [sp, #4]
 80058ee:	6813      	ldr	r3, [r2, #0]
 80058f0:	b933      	cbnz	r3, 8005900 <_free_r+0x30>
 80058f2:	6063      	str	r3, [r4, #4]
 80058f4:	6014      	str	r4, [r2, #0]
 80058f6:	b003      	add	sp, #12
 80058f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058fc:	f000 b8da 	b.w	8005ab4 <__malloc_unlock>
 8005900:	42a3      	cmp	r3, r4
 8005902:	d908      	bls.n	8005916 <_free_r+0x46>
 8005904:	6825      	ldr	r5, [r4, #0]
 8005906:	1961      	adds	r1, r4, r5
 8005908:	428b      	cmp	r3, r1
 800590a:	bf01      	itttt	eq
 800590c:	6819      	ldreq	r1, [r3, #0]
 800590e:	685b      	ldreq	r3, [r3, #4]
 8005910:	1949      	addeq	r1, r1, r5
 8005912:	6021      	streq	r1, [r4, #0]
 8005914:	e7ed      	b.n	80058f2 <_free_r+0x22>
 8005916:	461a      	mov	r2, r3
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b10b      	cbz	r3, 8005920 <_free_r+0x50>
 800591c:	42a3      	cmp	r3, r4
 800591e:	d9fa      	bls.n	8005916 <_free_r+0x46>
 8005920:	6811      	ldr	r1, [r2, #0]
 8005922:	1855      	adds	r5, r2, r1
 8005924:	42a5      	cmp	r5, r4
 8005926:	d10b      	bne.n	8005940 <_free_r+0x70>
 8005928:	6824      	ldr	r4, [r4, #0]
 800592a:	4421      	add	r1, r4
 800592c:	1854      	adds	r4, r2, r1
 800592e:	42a3      	cmp	r3, r4
 8005930:	6011      	str	r1, [r2, #0]
 8005932:	d1e0      	bne.n	80058f6 <_free_r+0x26>
 8005934:	681c      	ldr	r4, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	6053      	str	r3, [r2, #4]
 800593a:	440c      	add	r4, r1
 800593c:	6014      	str	r4, [r2, #0]
 800593e:	e7da      	b.n	80058f6 <_free_r+0x26>
 8005940:	d902      	bls.n	8005948 <_free_r+0x78>
 8005942:	230c      	movs	r3, #12
 8005944:	6003      	str	r3, [r0, #0]
 8005946:	e7d6      	b.n	80058f6 <_free_r+0x26>
 8005948:	6825      	ldr	r5, [r4, #0]
 800594a:	1961      	adds	r1, r4, r5
 800594c:	428b      	cmp	r3, r1
 800594e:	bf04      	itt	eq
 8005950:	6819      	ldreq	r1, [r3, #0]
 8005952:	685b      	ldreq	r3, [r3, #4]
 8005954:	6063      	str	r3, [r4, #4]
 8005956:	bf04      	itt	eq
 8005958:	1949      	addeq	r1, r1, r5
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	6054      	str	r4, [r2, #4]
 800595e:	e7ca      	b.n	80058f6 <_free_r+0x26>
 8005960:	b003      	add	sp, #12
 8005962:	bd30      	pop	{r4, r5, pc}
 8005964:	20004698 	.word	0x20004698

08005968 <sbrk_aligned>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	4e0e      	ldr	r6, [pc, #56]	; (80059a4 <sbrk_aligned+0x3c>)
 800596c:	460c      	mov	r4, r1
 800596e:	6831      	ldr	r1, [r6, #0]
 8005970:	4605      	mov	r5, r0
 8005972:	b911      	cbnz	r1, 800597a <sbrk_aligned+0x12>
 8005974:	f000 fba6 	bl	80060c4 <_sbrk_r>
 8005978:	6030      	str	r0, [r6, #0]
 800597a:	4621      	mov	r1, r4
 800597c:	4628      	mov	r0, r5
 800597e:	f000 fba1 	bl	80060c4 <_sbrk_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d00a      	beq.n	800599c <sbrk_aligned+0x34>
 8005986:	1cc4      	adds	r4, r0, #3
 8005988:	f024 0403 	bic.w	r4, r4, #3
 800598c:	42a0      	cmp	r0, r4
 800598e:	d007      	beq.n	80059a0 <sbrk_aligned+0x38>
 8005990:	1a21      	subs	r1, r4, r0
 8005992:	4628      	mov	r0, r5
 8005994:	f000 fb96 	bl	80060c4 <_sbrk_r>
 8005998:	3001      	adds	r0, #1
 800599a:	d101      	bne.n	80059a0 <sbrk_aligned+0x38>
 800599c:	f04f 34ff 	mov.w	r4, #4294967295
 80059a0:	4620      	mov	r0, r4
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	2000469c 	.word	0x2000469c

080059a8 <_malloc_r>:
 80059a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ac:	1ccd      	adds	r5, r1, #3
 80059ae:	f025 0503 	bic.w	r5, r5, #3
 80059b2:	3508      	adds	r5, #8
 80059b4:	2d0c      	cmp	r5, #12
 80059b6:	bf38      	it	cc
 80059b8:	250c      	movcc	r5, #12
 80059ba:	2d00      	cmp	r5, #0
 80059bc:	4607      	mov	r7, r0
 80059be:	db01      	blt.n	80059c4 <_malloc_r+0x1c>
 80059c0:	42a9      	cmp	r1, r5
 80059c2:	d905      	bls.n	80059d0 <_malloc_r+0x28>
 80059c4:	230c      	movs	r3, #12
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	2600      	movs	r6, #0
 80059ca:	4630      	mov	r0, r6
 80059cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005aa4 <_malloc_r+0xfc>
 80059d4:	f000 f868 	bl	8005aa8 <__malloc_lock>
 80059d8:	f8d8 3000 	ldr.w	r3, [r8]
 80059dc:	461c      	mov	r4, r3
 80059de:	bb5c      	cbnz	r4, 8005a38 <_malloc_r+0x90>
 80059e0:	4629      	mov	r1, r5
 80059e2:	4638      	mov	r0, r7
 80059e4:	f7ff ffc0 	bl	8005968 <sbrk_aligned>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	4604      	mov	r4, r0
 80059ec:	d155      	bne.n	8005a9a <_malloc_r+0xf2>
 80059ee:	f8d8 4000 	ldr.w	r4, [r8]
 80059f2:	4626      	mov	r6, r4
 80059f4:	2e00      	cmp	r6, #0
 80059f6:	d145      	bne.n	8005a84 <_malloc_r+0xdc>
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d048      	beq.n	8005a8e <_malloc_r+0xe6>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	4631      	mov	r1, r6
 8005a00:	4638      	mov	r0, r7
 8005a02:	eb04 0903 	add.w	r9, r4, r3
 8005a06:	f000 fb5d 	bl	80060c4 <_sbrk_r>
 8005a0a:	4581      	cmp	r9, r0
 8005a0c:	d13f      	bne.n	8005a8e <_malloc_r+0xe6>
 8005a0e:	6821      	ldr	r1, [r4, #0]
 8005a10:	1a6d      	subs	r5, r5, r1
 8005a12:	4629      	mov	r1, r5
 8005a14:	4638      	mov	r0, r7
 8005a16:	f7ff ffa7 	bl	8005968 <sbrk_aligned>
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d037      	beq.n	8005a8e <_malloc_r+0xe6>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	442b      	add	r3, r5
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	f8d8 3000 	ldr.w	r3, [r8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d038      	beq.n	8005a9e <_malloc_r+0xf6>
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	42a2      	cmp	r2, r4
 8005a30:	d12b      	bne.n	8005a8a <_malloc_r+0xe2>
 8005a32:	2200      	movs	r2, #0
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	e00f      	b.n	8005a58 <_malloc_r+0xb0>
 8005a38:	6822      	ldr	r2, [r4, #0]
 8005a3a:	1b52      	subs	r2, r2, r5
 8005a3c:	d41f      	bmi.n	8005a7e <_malloc_r+0xd6>
 8005a3e:	2a0b      	cmp	r2, #11
 8005a40:	d917      	bls.n	8005a72 <_malloc_r+0xca>
 8005a42:	1961      	adds	r1, r4, r5
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	6025      	str	r5, [r4, #0]
 8005a48:	bf18      	it	ne
 8005a4a:	6059      	strne	r1, [r3, #4]
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	bf08      	it	eq
 8005a50:	f8c8 1000 	streq.w	r1, [r8]
 8005a54:	5162      	str	r2, [r4, r5]
 8005a56:	604b      	str	r3, [r1, #4]
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f104 060b 	add.w	r6, r4, #11
 8005a5e:	f000 f829 	bl	8005ab4 <__malloc_unlock>
 8005a62:	f026 0607 	bic.w	r6, r6, #7
 8005a66:	1d23      	adds	r3, r4, #4
 8005a68:	1af2      	subs	r2, r6, r3
 8005a6a:	d0ae      	beq.n	80059ca <_malloc_r+0x22>
 8005a6c:	1b9b      	subs	r3, r3, r6
 8005a6e:	50a3      	str	r3, [r4, r2]
 8005a70:	e7ab      	b.n	80059ca <_malloc_r+0x22>
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	6862      	ldr	r2, [r4, #4]
 8005a76:	d1dd      	bne.n	8005a34 <_malloc_r+0x8c>
 8005a78:	f8c8 2000 	str.w	r2, [r8]
 8005a7c:	e7ec      	b.n	8005a58 <_malloc_r+0xb0>
 8005a7e:	4623      	mov	r3, r4
 8005a80:	6864      	ldr	r4, [r4, #4]
 8005a82:	e7ac      	b.n	80059de <_malloc_r+0x36>
 8005a84:	4634      	mov	r4, r6
 8005a86:	6876      	ldr	r6, [r6, #4]
 8005a88:	e7b4      	b.n	80059f4 <_malloc_r+0x4c>
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	e7cc      	b.n	8005a28 <_malloc_r+0x80>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	4638      	mov	r0, r7
 8005a94:	f000 f80e 	bl	8005ab4 <__malloc_unlock>
 8005a98:	e797      	b.n	80059ca <_malloc_r+0x22>
 8005a9a:	6025      	str	r5, [r4, #0]
 8005a9c:	e7dc      	b.n	8005a58 <_malloc_r+0xb0>
 8005a9e:	605b      	str	r3, [r3, #4]
 8005aa0:	deff      	udf	#255	; 0xff
 8005aa2:	bf00      	nop
 8005aa4:	20004698 	.word	0x20004698

08005aa8 <__malloc_lock>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	; (8005ab0 <__malloc_lock+0x8>)
 8005aaa:	f7ff bf01 	b.w	80058b0 <__retarget_lock_acquire_recursive>
 8005aae:	bf00      	nop
 8005ab0:	20004694 	.word	0x20004694

08005ab4 <__malloc_unlock>:
 8005ab4:	4801      	ldr	r0, [pc, #4]	; (8005abc <__malloc_unlock+0x8>)
 8005ab6:	f7ff befc 	b.w	80058b2 <__retarget_lock_release_recursive>
 8005aba:	bf00      	nop
 8005abc:	20004694 	.word	0x20004694

08005ac0 <__ssputs_r>:
 8005ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	688e      	ldr	r6, [r1, #8]
 8005ac6:	461f      	mov	r7, r3
 8005ac8:	42be      	cmp	r6, r7
 8005aca:	680b      	ldr	r3, [r1, #0]
 8005acc:	4682      	mov	sl, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	4690      	mov	r8, r2
 8005ad2:	d82c      	bhi.n	8005b2e <__ssputs_r+0x6e>
 8005ad4:	898a      	ldrh	r2, [r1, #12]
 8005ad6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ada:	d026      	beq.n	8005b2a <__ssputs_r+0x6a>
 8005adc:	6965      	ldr	r5, [r4, #20]
 8005ade:	6909      	ldr	r1, [r1, #16]
 8005ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ae4:	eba3 0901 	sub.w	r9, r3, r1
 8005ae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aec:	1c7b      	adds	r3, r7, #1
 8005aee:	444b      	add	r3, r9
 8005af0:	106d      	asrs	r5, r5, #1
 8005af2:	429d      	cmp	r5, r3
 8005af4:	bf38      	it	cc
 8005af6:	461d      	movcc	r5, r3
 8005af8:	0553      	lsls	r3, r2, #21
 8005afa:	d527      	bpl.n	8005b4c <__ssputs_r+0x8c>
 8005afc:	4629      	mov	r1, r5
 8005afe:	f7ff ff53 	bl	80059a8 <_malloc_r>
 8005b02:	4606      	mov	r6, r0
 8005b04:	b360      	cbz	r0, 8005b60 <__ssputs_r+0xa0>
 8005b06:	6921      	ldr	r1, [r4, #16]
 8005b08:	464a      	mov	r2, r9
 8005b0a:	f7ff fed3 	bl	80058b4 <memcpy>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	6126      	str	r6, [r4, #16]
 8005b1c:	6165      	str	r5, [r4, #20]
 8005b1e:	444e      	add	r6, r9
 8005b20:	eba5 0509 	sub.w	r5, r5, r9
 8005b24:	6026      	str	r6, [r4, #0]
 8005b26:	60a5      	str	r5, [r4, #8]
 8005b28:	463e      	mov	r6, r7
 8005b2a:	42be      	cmp	r6, r7
 8005b2c:	d900      	bls.n	8005b30 <__ssputs_r+0x70>
 8005b2e:	463e      	mov	r6, r7
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	4632      	mov	r2, r6
 8005b34:	4641      	mov	r1, r8
 8005b36:	f000 faab 	bl	8006090 <memmove>
 8005b3a:	68a3      	ldr	r3, [r4, #8]
 8005b3c:	1b9b      	subs	r3, r3, r6
 8005b3e:	60a3      	str	r3, [r4, #8]
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	4433      	add	r3, r6
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	2000      	movs	r0, #0
 8005b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4c:	462a      	mov	r2, r5
 8005b4e:	f000 fac9 	bl	80060e4 <_realloc_r>
 8005b52:	4606      	mov	r6, r0
 8005b54:	2800      	cmp	r0, #0
 8005b56:	d1e0      	bne.n	8005b1a <__ssputs_r+0x5a>
 8005b58:	6921      	ldr	r1, [r4, #16]
 8005b5a:	4650      	mov	r0, sl
 8005b5c:	f7ff feb8 	bl	80058d0 <_free_r>
 8005b60:	230c      	movs	r3, #12
 8005b62:	f8ca 3000 	str.w	r3, [sl]
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b72:	e7e9      	b.n	8005b48 <__ssputs_r+0x88>

08005b74 <_svfiprintf_r>:
 8005b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	4698      	mov	r8, r3
 8005b7a:	898b      	ldrh	r3, [r1, #12]
 8005b7c:	061b      	lsls	r3, r3, #24
 8005b7e:	b09d      	sub	sp, #116	; 0x74
 8005b80:	4607      	mov	r7, r0
 8005b82:	460d      	mov	r5, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	d50e      	bpl.n	8005ba6 <_svfiprintf_r+0x32>
 8005b88:	690b      	ldr	r3, [r1, #16]
 8005b8a:	b963      	cbnz	r3, 8005ba6 <_svfiprintf_r+0x32>
 8005b8c:	2140      	movs	r1, #64	; 0x40
 8005b8e:	f7ff ff0b 	bl	80059a8 <_malloc_r>
 8005b92:	6028      	str	r0, [r5, #0]
 8005b94:	6128      	str	r0, [r5, #16]
 8005b96:	b920      	cbnz	r0, 8005ba2 <_svfiprintf_r+0x2e>
 8005b98:	230c      	movs	r3, #12
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	e0d0      	b.n	8005d44 <_svfiprintf_r+0x1d0>
 8005ba2:	2340      	movs	r3, #64	; 0x40
 8005ba4:	616b      	str	r3, [r5, #20]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8005baa:	2320      	movs	r3, #32
 8005bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb4:	2330      	movs	r3, #48	; 0x30
 8005bb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d5c <_svfiprintf_r+0x1e8>
 8005bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bbe:	f04f 0901 	mov.w	r9, #1
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	469a      	mov	sl, r3
 8005bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bca:	b10a      	cbz	r2, 8005bd0 <_svfiprintf_r+0x5c>
 8005bcc:	2a25      	cmp	r2, #37	; 0x25
 8005bce:	d1f9      	bne.n	8005bc4 <_svfiprintf_r+0x50>
 8005bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd4:	d00b      	beq.n	8005bee <_svfiprintf_r+0x7a>
 8005bd6:	465b      	mov	r3, fp
 8005bd8:	4622      	mov	r2, r4
 8005bda:	4629      	mov	r1, r5
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f7ff ff6f 	bl	8005ac0 <__ssputs_r>
 8005be2:	3001      	adds	r0, #1
 8005be4:	f000 80a9 	beq.w	8005d3a <_svfiprintf_r+0x1c6>
 8005be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bea:	445a      	add	r2, fp
 8005bec:	9209      	str	r2, [sp, #36]	; 0x24
 8005bee:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80a1 	beq.w	8005d3a <_svfiprintf_r+0x1c6>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c02:	f10a 0a01 	add.w	sl, sl, #1
 8005c06:	9304      	str	r3, [sp, #16]
 8005c08:	9307      	str	r3, [sp, #28]
 8005c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8005c10:	4654      	mov	r4, sl
 8005c12:	2205      	movs	r2, #5
 8005c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c18:	4850      	ldr	r0, [pc, #320]	; (8005d5c <_svfiprintf_r+0x1e8>)
 8005c1a:	f7fa fb01 	bl	8000220 <memchr>
 8005c1e:	9a04      	ldr	r2, [sp, #16]
 8005c20:	b9d8      	cbnz	r0, 8005c5a <_svfiprintf_r+0xe6>
 8005c22:	06d0      	lsls	r0, r2, #27
 8005c24:	bf44      	itt	mi
 8005c26:	2320      	movmi	r3, #32
 8005c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c2c:	0711      	lsls	r1, r2, #28
 8005c2e:	bf44      	itt	mi
 8005c30:	232b      	movmi	r3, #43	; 0x2b
 8005c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c36:	f89a 3000 	ldrb.w	r3, [sl]
 8005c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3c:	d015      	beq.n	8005c6a <_svfiprintf_r+0xf6>
 8005c3e:	9a07      	ldr	r2, [sp, #28]
 8005c40:	4654      	mov	r4, sl
 8005c42:	2000      	movs	r0, #0
 8005c44:	f04f 0c0a 	mov.w	ip, #10
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4e:	3b30      	subs	r3, #48	; 0x30
 8005c50:	2b09      	cmp	r3, #9
 8005c52:	d94d      	bls.n	8005cf0 <_svfiprintf_r+0x17c>
 8005c54:	b1b0      	cbz	r0, 8005c84 <_svfiprintf_r+0x110>
 8005c56:	9207      	str	r2, [sp, #28]
 8005c58:	e014      	b.n	8005c84 <_svfiprintf_r+0x110>
 8005c5a:	eba0 0308 	sub.w	r3, r0, r8
 8005c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	9304      	str	r3, [sp, #16]
 8005c66:	46a2      	mov	sl, r4
 8005c68:	e7d2      	b.n	8005c10 <_svfiprintf_r+0x9c>
 8005c6a:	9b03      	ldr	r3, [sp, #12]
 8005c6c:	1d19      	adds	r1, r3, #4
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	9103      	str	r1, [sp, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfbb      	ittet	lt
 8005c76:	425b      	neglt	r3, r3
 8005c78:	f042 0202 	orrlt.w	r2, r2, #2
 8005c7c:	9307      	strge	r3, [sp, #28]
 8005c7e:	9307      	strlt	r3, [sp, #28]
 8005c80:	bfb8      	it	lt
 8005c82:	9204      	strlt	r2, [sp, #16]
 8005c84:	7823      	ldrb	r3, [r4, #0]
 8005c86:	2b2e      	cmp	r3, #46	; 0x2e
 8005c88:	d10c      	bne.n	8005ca4 <_svfiprintf_r+0x130>
 8005c8a:	7863      	ldrb	r3, [r4, #1]
 8005c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8e:	d134      	bne.n	8005cfa <_svfiprintf_r+0x186>
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	9203      	str	r2, [sp, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfb8      	it	lt
 8005c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ca0:	3402      	adds	r4, #2
 8005ca2:	9305      	str	r3, [sp, #20]
 8005ca4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005d6c <_svfiprintf_r+0x1f8>
 8005ca8:	7821      	ldrb	r1, [r4, #0]
 8005caa:	2203      	movs	r2, #3
 8005cac:	4650      	mov	r0, sl
 8005cae:	f7fa fab7 	bl	8000220 <memchr>
 8005cb2:	b138      	cbz	r0, 8005cc4 <_svfiprintf_r+0x150>
 8005cb4:	9b04      	ldr	r3, [sp, #16]
 8005cb6:	eba0 000a 	sub.w	r0, r0, sl
 8005cba:	2240      	movs	r2, #64	; 0x40
 8005cbc:	4082      	lsls	r2, r0
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	3401      	adds	r4, #1
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc8:	4825      	ldr	r0, [pc, #148]	; (8005d60 <_svfiprintf_r+0x1ec>)
 8005cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cce:	2206      	movs	r2, #6
 8005cd0:	f7fa faa6 	bl	8000220 <memchr>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d038      	beq.n	8005d4a <_svfiprintf_r+0x1d6>
 8005cd8:	4b22      	ldr	r3, [pc, #136]	; (8005d64 <_svfiprintf_r+0x1f0>)
 8005cda:	bb1b      	cbnz	r3, 8005d24 <_svfiprintf_r+0x1b0>
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	3307      	adds	r3, #7
 8005ce0:	f023 0307 	bic.w	r3, r3, #7
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cea:	4433      	add	r3, r6
 8005cec:	9309      	str	r3, [sp, #36]	; 0x24
 8005cee:	e768      	b.n	8005bc2 <_svfiprintf_r+0x4e>
 8005cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf4:	460c      	mov	r4, r1
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	e7a6      	b.n	8005c48 <_svfiprintf_r+0xd4>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	3401      	adds	r4, #1
 8005cfe:	9305      	str	r3, [sp, #20]
 8005d00:	4619      	mov	r1, r3
 8005d02:	f04f 0c0a 	mov.w	ip, #10
 8005d06:	4620      	mov	r0, r4
 8005d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d0c:	3a30      	subs	r2, #48	; 0x30
 8005d0e:	2a09      	cmp	r2, #9
 8005d10:	d903      	bls.n	8005d1a <_svfiprintf_r+0x1a6>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0c6      	beq.n	8005ca4 <_svfiprintf_r+0x130>
 8005d16:	9105      	str	r1, [sp, #20]
 8005d18:	e7c4      	b.n	8005ca4 <_svfiprintf_r+0x130>
 8005d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1e:	4604      	mov	r4, r0
 8005d20:	2301      	movs	r3, #1
 8005d22:	e7f0      	b.n	8005d06 <_svfiprintf_r+0x192>
 8005d24:	ab03      	add	r3, sp, #12
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	462a      	mov	r2, r5
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <_svfiprintf_r+0x1f4>)
 8005d2c:	a904      	add	r1, sp, #16
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f3af 8000 	nop.w
 8005d34:	1c42      	adds	r2, r0, #1
 8005d36:	4606      	mov	r6, r0
 8005d38:	d1d6      	bne.n	8005ce8 <_svfiprintf_r+0x174>
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	065b      	lsls	r3, r3, #25
 8005d3e:	f53f af2d 	bmi.w	8005b9c <_svfiprintf_r+0x28>
 8005d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d44:	b01d      	add	sp, #116	; 0x74
 8005d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4a:	ab03      	add	r3, sp, #12
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	462a      	mov	r2, r5
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <_svfiprintf_r+0x1f4>)
 8005d52:	a904      	add	r1, sp, #16
 8005d54:	4638      	mov	r0, r7
 8005d56:	f000 f879 	bl	8005e4c <_printf_i>
 8005d5a:	e7eb      	b.n	8005d34 <_svfiprintf_r+0x1c0>
 8005d5c:	08006fc8 	.word	0x08006fc8
 8005d60:	08006fd2 	.word	0x08006fd2
 8005d64:	00000000 	.word	0x00000000
 8005d68:	08005ac1 	.word	0x08005ac1
 8005d6c:	08006fce 	.word	0x08006fce

08005d70 <_printf_common>:
 8005d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	4616      	mov	r6, r2
 8005d76:	4699      	mov	r9, r3
 8005d78:	688a      	ldr	r2, [r1, #8]
 8005d7a:	690b      	ldr	r3, [r1, #16]
 8005d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	bfb8      	it	lt
 8005d84:	4613      	movlt	r3, r2
 8005d86:	6033      	str	r3, [r6, #0]
 8005d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	b10a      	cbz	r2, 8005d96 <_printf_common+0x26>
 8005d92:	3301      	adds	r3, #1
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	0699      	lsls	r1, r3, #26
 8005d9a:	bf42      	ittt	mi
 8005d9c:	6833      	ldrmi	r3, [r6, #0]
 8005d9e:	3302      	addmi	r3, #2
 8005da0:	6033      	strmi	r3, [r6, #0]
 8005da2:	6825      	ldr	r5, [r4, #0]
 8005da4:	f015 0506 	ands.w	r5, r5, #6
 8005da8:	d106      	bne.n	8005db8 <_printf_common+0x48>
 8005daa:	f104 0a19 	add.w	sl, r4, #25
 8005dae:	68e3      	ldr	r3, [r4, #12]
 8005db0:	6832      	ldr	r2, [r6, #0]
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	42ab      	cmp	r3, r5
 8005db6:	dc26      	bgt.n	8005e06 <_printf_common+0x96>
 8005db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dbc:	1e13      	subs	r3, r2, #0
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	bf18      	it	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	0692      	lsls	r2, r2, #26
 8005dc6:	d42b      	bmi.n	8005e20 <_printf_common+0xb0>
 8005dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d01e      	beq.n	8005e14 <_printf_common+0xa4>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	6922      	ldr	r2, [r4, #16]
 8005dda:	f003 0306 	and.w	r3, r3, #6
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	bf02      	ittt	eq
 8005de2:	68e5      	ldreq	r5, [r4, #12]
 8005de4:	6833      	ldreq	r3, [r6, #0]
 8005de6:	1aed      	subeq	r5, r5, r3
 8005de8:	68a3      	ldr	r3, [r4, #8]
 8005dea:	bf0c      	ite	eq
 8005dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df0:	2500      	movne	r5, #0
 8005df2:	4293      	cmp	r3, r2
 8005df4:	bfc4      	itt	gt
 8005df6:	1a9b      	subgt	r3, r3, r2
 8005df8:	18ed      	addgt	r5, r5, r3
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	341a      	adds	r4, #26
 8005dfe:	42b5      	cmp	r5, r6
 8005e00:	d11a      	bne.n	8005e38 <_printf_common+0xc8>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e008      	b.n	8005e18 <_printf_common+0xa8>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4652      	mov	r2, sl
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	47c0      	blx	r8
 8005e10:	3001      	adds	r0, #1
 8005e12:	d103      	bne.n	8005e1c <_printf_common+0xac>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	e7c6      	b.n	8005dae <_printf_common+0x3e>
 8005e20:	18e1      	adds	r1, r4, r3
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	2030      	movs	r0, #48	; 0x30
 8005e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e2a:	4422      	add	r2, r4
 8005e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e34:	3302      	adds	r3, #2
 8005e36:	e7c7      	b.n	8005dc8 <_printf_common+0x58>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d0e6      	beq.n	8005e14 <_printf_common+0xa4>
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7d9      	b.n	8005dfe <_printf_common+0x8e>
	...

08005e4c <_printf_i>:
 8005e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	7e0f      	ldrb	r7, [r1, #24]
 8005e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e54:	2f78      	cmp	r7, #120	; 0x78
 8005e56:	4691      	mov	r9, r2
 8005e58:	4680      	mov	r8, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	469a      	mov	sl, r3
 8005e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e62:	d807      	bhi.n	8005e74 <_printf_i+0x28>
 8005e64:	2f62      	cmp	r7, #98	; 0x62
 8005e66:	d80a      	bhi.n	8005e7e <_printf_i+0x32>
 8005e68:	2f00      	cmp	r7, #0
 8005e6a:	f000 80d4 	beq.w	8006016 <_printf_i+0x1ca>
 8005e6e:	2f58      	cmp	r7, #88	; 0x58
 8005e70:	f000 80c0 	beq.w	8005ff4 <_printf_i+0x1a8>
 8005e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e7c:	e03a      	b.n	8005ef4 <_printf_i+0xa8>
 8005e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e82:	2b15      	cmp	r3, #21
 8005e84:	d8f6      	bhi.n	8005e74 <_printf_i+0x28>
 8005e86:	a101      	add	r1, pc, #4	; (adr r1, 8005e8c <_printf_i+0x40>)
 8005e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e8c:	08005ee5 	.word	0x08005ee5
 8005e90:	08005ef9 	.word	0x08005ef9
 8005e94:	08005e75 	.word	0x08005e75
 8005e98:	08005e75 	.word	0x08005e75
 8005e9c:	08005e75 	.word	0x08005e75
 8005ea0:	08005e75 	.word	0x08005e75
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005e75 	.word	0x08005e75
 8005eac:	08005e75 	.word	0x08005e75
 8005eb0:	08005e75 	.word	0x08005e75
 8005eb4:	08005e75 	.word	0x08005e75
 8005eb8:	08005ffd 	.word	0x08005ffd
 8005ebc:	08005f25 	.word	0x08005f25
 8005ec0:	08005fb7 	.word	0x08005fb7
 8005ec4:	08005e75 	.word	0x08005e75
 8005ec8:	08005e75 	.word	0x08005e75
 8005ecc:	0800601f 	.word	0x0800601f
 8005ed0:	08005e75 	.word	0x08005e75
 8005ed4:	08005f25 	.word	0x08005f25
 8005ed8:	08005e75 	.word	0x08005e75
 8005edc:	08005e75 	.word	0x08005e75
 8005ee0:	08005fbf 	.word	0x08005fbf
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	602a      	str	r2, [r5, #0]
 8005eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e09f      	b.n	8006038 <_printf_i+0x1ec>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	0607      	lsls	r7, r0, #24
 8005efe:	f103 0104 	add.w	r1, r3, #4
 8005f02:	6029      	str	r1, [r5, #0]
 8005f04:	d501      	bpl.n	8005f0a <_printf_i+0xbe>
 8005f06:	681e      	ldr	r6, [r3, #0]
 8005f08:	e003      	b.n	8005f12 <_printf_i+0xc6>
 8005f0a:	0646      	lsls	r6, r0, #25
 8005f0c:	d5fb      	bpl.n	8005f06 <_printf_i+0xba>
 8005f0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	da03      	bge.n	8005f1e <_printf_i+0xd2>
 8005f16:	232d      	movs	r3, #45	; 0x2d
 8005f18:	4276      	negs	r6, r6
 8005f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f1e:	485a      	ldr	r0, [pc, #360]	; (8006088 <_printf_i+0x23c>)
 8005f20:	230a      	movs	r3, #10
 8005f22:	e012      	b.n	8005f4a <_printf_i+0xfe>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	6029      	str	r1, [r5, #0]
 8005f2c:	0605      	lsls	r5, r0, #24
 8005f2e:	d501      	bpl.n	8005f34 <_printf_i+0xe8>
 8005f30:	681e      	ldr	r6, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <_printf_i+0xee>
 8005f34:	0641      	lsls	r1, r0, #25
 8005f36:	d5fb      	bpl.n	8005f30 <_printf_i+0xe4>
 8005f38:	881e      	ldrh	r6, [r3, #0]
 8005f3a:	4853      	ldr	r0, [pc, #332]	; (8006088 <_printf_i+0x23c>)
 8005f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f3e:	bf0c      	ite	eq
 8005f40:	2308      	moveq	r3, #8
 8005f42:	230a      	movne	r3, #10
 8005f44:	2100      	movs	r1, #0
 8005f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4a:	6865      	ldr	r5, [r4, #4]
 8005f4c:	60a5      	str	r5, [r4, #8]
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	bfa2      	ittt	ge
 8005f52:	6821      	ldrge	r1, [r4, #0]
 8005f54:	f021 0104 	bicge.w	r1, r1, #4
 8005f58:	6021      	strge	r1, [r4, #0]
 8005f5a:	b90e      	cbnz	r6, 8005f60 <_printf_i+0x114>
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	d04b      	beq.n	8005ff8 <_printf_i+0x1ac>
 8005f60:	4615      	mov	r5, r2
 8005f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f66:	fb03 6711 	mls	r7, r3, r1, r6
 8005f6a:	5dc7      	ldrb	r7, [r0, r7]
 8005f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f70:	4637      	mov	r7, r6
 8005f72:	42bb      	cmp	r3, r7
 8005f74:	460e      	mov	r6, r1
 8005f76:	d9f4      	bls.n	8005f62 <_printf_i+0x116>
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d10b      	bne.n	8005f94 <_printf_i+0x148>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	07de      	lsls	r6, r3, #31
 8005f80:	d508      	bpl.n	8005f94 <_printf_i+0x148>
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	4299      	cmp	r1, r3
 8005f88:	bfde      	ittt	le
 8005f8a:	2330      	movle	r3, #48	; 0x30
 8005f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f94:	1b52      	subs	r2, r2, r5
 8005f96:	6122      	str	r2, [r4, #16]
 8005f98:	f8cd a000 	str.w	sl, [sp]
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	aa03      	add	r2, sp, #12
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f7ff fee4 	bl	8005d70 <_printf_common>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d14a      	bne.n	8006042 <_printf_i+0x1f6>
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	b004      	add	sp, #16
 8005fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	f043 0320 	orr.w	r3, r3, #32
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	4833      	ldr	r0, [pc, #204]	; (800608c <_printf_i+0x240>)
 8005fc0:	2778      	movs	r7, #120	; 0x78
 8005fc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	6829      	ldr	r1, [r5, #0]
 8005fca:	061f      	lsls	r7, r3, #24
 8005fcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fd0:	d402      	bmi.n	8005fd8 <_printf_i+0x18c>
 8005fd2:	065f      	lsls	r7, r3, #25
 8005fd4:	bf48      	it	mi
 8005fd6:	b2b6      	uxthmi	r6, r6
 8005fd8:	07df      	lsls	r7, r3, #31
 8005fda:	bf48      	it	mi
 8005fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8005fe0:	6029      	str	r1, [r5, #0]
 8005fe2:	bf48      	it	mi
 8005fe4:	6023      	strmi	r3, [r4, #0]
 8005fe6:	b91e      	cbnz	r6, 8005ff0 <_printf_i+0x1a4>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	f023 0320 	bic.w	r3, r3, #32
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	e7a7      	b.n	8005f44 <_printf_i+0xf8>
 8005ff4:	4824      	ldr	r0, [pc, #144]	; (8006088 <_printf_i+0x23c>)
 8005ff6:	e7e4      	b.n	8005fc2 <_printf_i+0x176>
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	e7bd      	b.n	8005f78 <_printf_i+0x12c>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	6826      	ldr	r6, [r4, #0]
 8006000:	6961      	ldr	r1, [r4, #20]
 8006002:	1d18      	adds	r0, r3, #4
 8006004:	6028      	str	r0, [r5, #0]
 8006006:	0635      	lsls	r5, r6, #24
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	d501      	bpl.n	8006010 <_printf_i+0x1c4>
 800600c:	6019      	str	r1, [r3, #0]
 800600e:	e002      	b.n	8006016 <_printf_i+0x1ca>
 8006010:	0670      	lsls	r0, r6, #25
 8006012:	d5fb      	bpl.n	800600c <_printf_i+0x1c0>
 8006014:	8019      	strh	r1, [r3, #0]
 8006016:	2300      	movs	r3, #0
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	4615      	mov	r5, r2
 800601c:	e7bc      	b.n	8005f98 <_printf_i+0x14c>
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	1d1a      	adds	r2, r3, #4
 8006022:	602a      	str	r2, [r5, #0]
 8006024:	681d      	ldr	r5, [r3, #0]
 8006026:	6862      	ldr	r2, [r4, #4]
 8006028:	2100      	movs	r1, #0
 800602a:	4628      	mov	r0, r5
 800602c:	f7fa f8f8 	bl	8000220 <memchr>
 8006030:	b108      	cbz	r0, 8006036 <_printf_i+0x1ea>
 8006032:	1b40      	subs	r0, r0, r5
 8006034:	6060      	str	r0, [r4, #4]
 8006036:	6863      	ldr	r3, [r4, #4]
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	2300      	movs	r3, #0
 800603c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006040:	e7aa      	b.n	8005f98 <_printf_i+0x14c>
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	462a      	mov	r2, r5
 8006046:	4649      	mov	r1, r9
 8006048:	4640      	mov	r0, r8
 800604a:	47d0      	blx	sl
 800604c:	3001      	adds	r0, #1
 800604e:	d0ad      	beq.n	8005fac <_printf_i+0x160>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	079b      	lsls	r3, r3, #30
 8006054:	d413      	bmi.n	800607e <_printf_i+0x232>
 8006056:	68e0      	ldr	r0, [r4, #12]
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	4298      	cmp	r0, r3
 800605c:	bfb8      	it	lt
 800605e:	4618      	movlt	r0, r3
 8006060:	e7a6      	b.n	8005fb0 <_printf_i+0x164>
 8006062:	2301      	movs	r3, #1
 8006064:	4632      	mov	r2, r6
 8006066:	4649      	mov	r1, r9
 8006068:	4640      	mov	r0, r8
 800606a:	47d0      	blx	sl
 800606c:	3001      	adds	r0, #1
 800606e:	d09d      	beq.n	8005fac <_printf_i+0x160>
 8006070:	3501      	adds	r5, #1
 8006072:	68e3      	ldr	r3, [r4, #12]
 8006074:	9903      	ldr	r1, [sp, #12]
 8006076:	1a5b      	subs	r3, r3, r1
 8006078:	42ab      	cmp	r3, r5
 800607a:	dcf2      	bgt.n	8006062 <_printf_i+0x216>
 800607c:	e7eb      	b.n	8006056 <_printf_i+0x20a>
 800607e:	2500      	movs	r5, #0
 8006080:	f104 0619 	add.w	r6, r4, #25
 8006084:	e7f5      	b.n	8006072 <_printf_i+0x226>
 8006086:	bf00      	nop
 8006088:	08006fd9 	.word	0x08006fd9
 800608c:	08006fea 	.word	0x08006fea

08006090 <memmove>:
 8006090:	4288      	cmp	r0, r1
 8006092:	b510      	push	{r4, lr}
 8006094:	eb01 0402 	add.w	r4, r1, r2
 8006098:	d902      	bls.n	80060a0 <memmove+0x10>
 800609a:	4284      	cmp	r4, r0
 800609c:	4623      	mov	r3, r4
 800609e:	d807      	bhi.n	80060b0 <memmove+0x20>
 80060a0:	1e43      	subs	r3, r0, #1
 80060a2:	42a1      	cmp	r1, r4
 80060a4:	d008      	beq.n	80060b8 <memmove+0x28>
 80060a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ae:	e7f8      	b.n	80060a2 <memmove+0x12>
 80060b0:	4402      	add	r2, r0
 80060b2:	4601      	mov	r1, r0
 80060b4:	428a      	cmp	r2, r1
 80060b6:	d100      	bne.n	80060ba <memmove+0x2a>
 80060b8:	bd10      	pop	{r4, pc}
 80060ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060c2:	e7f7      	b.n	80060b4 <memmove+0x24>

080060c4 <_sbrk_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d06      	ldr	r5, [pc, #24]	; (80060e0 <_sbrk_r+0x1c>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fb fb22 	bl	8001718 <_sbrk>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_sbrk_r+0x1a>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_sbrk_r+0x1a>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20004690 	.word	0x20004690

080060e4 <_realloc_r>:
 80060e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e8:	4680      	mov	r8, r0
 80060ea:	4614      	mov	r4, r2
 80060ec:	460e      	mov	r6, r1
 80060ee:	b921      	cbnz	r1, 80060fa <_realloc_r+0x16>
 80060f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060f4:	4611      	mov	r1, r2
 80060f6:	f7ff bc57 	b.w	80059a8 <_malloc_r>
 80060fa:	b92a      	cbnz	r2, 8006108 <_realloc_r+0x24>
 80060fc:	f7ff fbe8 	bl	80058d0 <_free_r>
 8006100:	4625      	mov	r5, r4
 8006102:	4628      	mov	r0, r5
 8006104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006108:	f000 f81b 	bl	8006142 <_malloc_usable_size_r>
 800610c:	4284      	cmp	r4, r0
 800610e:	4607      	mov	r7, r0
 8006110:	d802      	bhi.n	8006118 <_realloc_r+0x34>
 8006112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006116:	d812      	bhi.n	800613e <_realloc_r+0x5a>
 8006118:	4621      	mov	r1, r4
 800611a:	4640      	mov	r0, r8
 800611c:	f7ff fc44 	bl	80059a8 <_malloc_r>
 8006120:	4605      	mov	r5, r0
 8006122:	2800      	cmp	r0, #0
 8006124:	d0ed      	beq.n	8006102 <_realloc_r+0x1e>
 8006126:	42bc      	cmp	r4, r7
 8006128:	4622      	mov	r2, r4
 800612a:	4631      	mov	r1, r6
 800612c:	bf28      	it	cs
 800612e:	463a      	movcs	r2, r7
 8006130:	f7ff fbc0 	bl	80058b4 <memcpy>
 8006134:	4631      	mov	r1, r6
 8006136:	4640      	mov	r0, r8
 8006138:	f7ff fbca 	bl	80058d0 <_free_r>
 800613c:	e7e1      	b.n	8006102 <_realloc_r+0x1e>
 800613e:	4635      	mov	r5, r6
 8006140:	e7df      	b.n	8006102 <_realloc_r+0x1e>

08006142 <_malloc_usable_size_r>:
 8006142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006146:	1f18      	subs	r0, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	bfbc      	itt	lt
 800614c:	580b      	ldrlt	r3, [r1, r0]
 800614e:	18c0      	addlt	r0, r0, r3
 8006150:	4770      	bx	lr
	...

08006154 <_init>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	bf00      	nop
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr

08006160 <_fini>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	bf00      	nop
 8006164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006166:	bc08      	pop	{r3}
 8006168:	469e      	mov	lr, r3
 800616a:	4770      	bx	lr

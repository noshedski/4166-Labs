
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c44  08005c44  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c4c  08005c4c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c50  08005c50  00015c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000064  08005cb8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08005cb8  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013529  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c7e  00000000  00000000  00033600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  00036280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e91  00000000  00000000  00037500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023498  00000000  00000000  00038391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b23  00000000  00000000  0005b829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9c5f  00000000  00000000  0007334c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052fc  00000000  00000000  0014cfac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001522a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e74 	.word	0x08004e74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08004e74 	.word	0x08004e74

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	int done=1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
	while(done)
 80005c6:	e19b      	b.n	8000900 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	48b3      	ldr	r0, [pc, #716]	; (800089c <Get_Key+0x2e0>)
 80005d0:	f001 faf4 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	48b0      	ldr	r0, [pc, #704]	; (800089c <Get_Key+0x2e0>)
 80005da:	f001 faef 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	48ae      	ldr	r0, [pc, #696]	; (800089c <Get_Key+0x2e0>)
 80005e4:	f001 faea 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	48ab      	ldr	r0, [pc, #684]	; (800089c <Get_Key+0x2e0>)
 80005ee:	f001 fae5 	bl	8001bbc <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	48a9      	ldr	r0, [pc, #676]	; (800089c <Get_Key+0x2e0>)
 80005f6:	f001 fac9 	bl	8001b8c <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00b      	beq.n	8000618 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000600:	bf00      	nop
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	48a5      	ldr	r0, [pc, #660]	; (800089c <Get_Key+0x2e0>)
 8000606:	f001 fac1 	bl	8001b8c <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f8      	bne.n	8000602 <Get_Key+0x46>
		key='1';
 8000610:	4ba3      	ldr	r3, [pc, #652]	; (80008a0 <Get_Key+0x2e4>)
 8000612:	2231      	movs	r2, #49	; 0x31
 8000614:	701a      	strb	r2, [r3, #0]
		break;
 8000616:	e177      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	48a2      	ldr	r0, [pc, #648]	; (80008a4 <Get_Key+0x2e8>)
 800061c:	f001 fab6 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00b      	beq.n	800063e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000626:	bf00      	nop
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	489e      	ldr	r0, [pc, #632]	; (80008a4 <Get_Key+0x2e8>)
 800062c:	f001 faae 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f8      	bne.n	8000628 <Get_Key+0x6c>
		key='4';
 8000636:	4b9a      	ldr	r3, [pc, #616]	; (80008a0 <Get_Key+0x2e4>)
 8000638:	2234      	movs	r2, #52	; 0x34
 800063a:	701a      	strb	r2, [r3, #0]
		break;
 800063c:	e164      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4899      	ldr	r0, [pc, #612]	; (80008a8 <Get_Key+0x2ec>)
 8000644:	f001 faa2 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00c      	beq.n	8000668 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800064e:	bf00      	nop
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4894      	ldr	r0, [pc, #592]	; (80008a8 <Get_Key+0x2ec>)
 8000656:	f001 fa99 	bl	8001b8c <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f7      	bne.n	8000650 <Get_Key+0x94>
		key='7';
 8000660:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <Get_Key+0x2e4>)
 8000662:	2237      	movs	r2, #55	; 0x37
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e14f      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	488e      	ldr	r0, [pc, #568]	; (80008a8 <Get_Key+0x2ec>)
 800066e:	f001 fa8d 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00c      	beq.n	8000692 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000678:	bf00      	nop
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	488a      	ldr	r0, [pc, #552]	; (80008a8 <Get_Key+0x2ec>)
 8000680:	f001 fa84 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <Get_Key+0xbe>
		key='*';
 800068a:	4b85      	ldr	r3, [pc, #532]	; (80008a0 <Get_Key+0x2e4>)
 800068c:	222a      	movs	r2, #42	; 0x2a
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e13a      	b.n	8000908 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4880      	ldr	r0, [pc, #512]	; (800089c <Get_Key+0x2e0>)
 800069a:	f001 fa8f 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	487e      	ldr	r0, [pc, #504]	; (800089c <Get_Key+0x2e0>)
 80006a4:	f001 fa8a 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	487b      	ldr	r0, [pc, #492]	; (800089c <Get_Key+0x2e0>)
 80006ae:	f001 fa85 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4879      	ldr	r0, [pc, #484]	; (800089c <Get_Key+0x2e0>)
 80006b8:	f001 fa80 	bl	8001bbc <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4877      	ldr	r0, [pc, #476]	; (800089c <Get_Key+0x2e0>)
 80006c0:	f001 fa64 	bl	8001b8c <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00b      	beq.n	80006e2 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ca:	bf00      	nop
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4873      	ldr	r0, [pc, #460]	; (800089c <Get_Key+0x2e0>)
 80006d0:	f001 fa5c 	bl	8001b8c <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f8      	bne.n	80006cc <Get_Key+0x110>
		key='2';
 80006da:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <Get_Key+0x2e4>)
 80006dc:	2232      	movs	r2, #50	; 0x32
 80006de:	701a      	strb	r2, [r3, #0]
		break;
 80006e0:	e112      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	486f      	ldr	r0, [pc, #444]	; (80008a4 <Get_Key+0x2e8>)
 80006e6:	f001 fa51 	bl	8001b8c <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00b      	beq.n	8000708 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006f0:	bf00      	nop
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	486b      	ldr	r0, [pc, #428]	; (80008a4 <Get_Key+0x2e8>)
 80006f6:	f001 fa49 	bl	8001b8c <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f8      	bne.n	80006f2 <Get_Key+0x136>
		key='5';
 8000700:	4b67      	ldr	r3, [pc, #412]	; (80008a0 <Get_Key+0x2e4>)
 8000702:	2235      	movs	r2, #53	; 0x35
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	e0ff      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	4866      	ldr	r0, [pc, #408]	; (80008a8 <Get_Key+0x2ec>)
 800070e:	f001 fa3d 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00c      	beq.n	8000732 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000718:	bf00      	nop
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4862      	ldr	r0, [pc, #392]	; (80008a8 <Get_Key+0x2ec>)
 8000720:	f001 fa34 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f7      	bne.n	800071a <Get_Key+0x15e>
		key='8';
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <Get_Key+0x2e4>)
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	701a      	strb	r2, [r3, #0]
		break;
 8000730:	e0ea      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	485c      	ldr	r0, [pc, #368]	; (80008a8 <Get_Key+0x2ec>)
 8000738:	f001 fa28 	bl	8001b8c <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00c      	beq.n	800075c <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000742:	bf00      	nop
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4857      	ldr	r0, [pc, #348]	; (80008a8 <Get_Key+0x2ec>)
 800074a:	f001 fa1f 	bl	8001b8c <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f7      	bne.n	8000744 <Get_Key+0x188>
		key='0';
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <Get_Key+0x2e4>)
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	701a      	strb	r2, [r3, #0]
		break;
 800075a:	e0d5      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	484e      	ldr	r0, [pc, #312]	; (800089c <Get_Key+0x2e0>)
 8000764:	f001 fa2a 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	484b      	ldr	r0, [pc, #300]	; (800089c <Get_Key+0x2e0>)
 800076e:	f001 fa25 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	4849      	ldr	r0, [pc, #292]	; (800089c <Get_Key+0x2e0>)
 8000778:	f001 fa20 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	4846      	ldr	r0, [pc, #280]	; (800089c <Get_Key+0x2e0>)
 8000782:	f001 fa1b 	bl	8001bbc <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4844      	ldr	r0, [pc, #272]	; (800089c <Get_Key+0x2e0>)
 800078a:	f001 f9ff 	bl	8001b8c <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00b      	beq.n	80007ac <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000794:	bf00      	nop
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4840      	ldr	r0, [pc, #256]	; (800089c <Get_Key+0x2e0>)
 800079a:	f001 f9f7 	bl	8001b8c <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f8      	bne.n	8000796 <Get_Key+0x1da>
		key='3';
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <Get_Key+0x2e4>)
 80007a6:	2233      	movs	r2, #51	; 0x33
 80007a8:	701a      	strb	r2, [r3, #0]
		break;
 80007aa:	e0ad      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	483d      	ldr	r0, [pc, #244]	; (80008a4 <Get_Key+0x2e8>)
 80007b0:	f001 f9ec 	bl	8001b8c <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ba:	bf00      	nop
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <Get_Key+0x2e8>)
 80007c0:	f001 f9e4 	bl	8001b8c <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <Get_Key+0x200>
		key='6';
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <Get_Key+0x2e4>)
 80007cc:	2236      	movs	r2, #54	; 0x36
 80007ce:	701a      	strb	r2, [r3, #0]
		break;
 80007d0:	e09a      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4834      	ldr	r0, [pc, #208]	; (80008a8 <Get_Key+0x2ec>)
 80007d8:	f001 f9d8 	bl	8001b8c <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00c      	beq.n	80007fc <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007e2:	bf00      	nop
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <Get_Key+0x2ec>)
 80007ea:	f001 f9cf 	bl	8001b8c <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f7      	bne.n	80007e4 <Get_Key+0x228>
		key='9';
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <Get_Key+0x2e4>)
 80007f6:	2239      	movs	r2, #57	; 0x39
 80007f8:	701a      	strb	r2, [r3, #0]
		break;
 80007fa:	e085      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <Get_Key+0x2ec>)
 8000802:	f001 f9c3 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	4825      	ldr	r0, [pc, #148]	; (80008a8 <Get_Key+0x2ec>)
 8000814:	f001 f9ba 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x252>
		key='#';
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <Get_Key+0x2e4>)
 8000820:	2223      	movs	r2, #35	; 0x23
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e070      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <Get_Key+0x2e0>)
 800082e:	f001 f9c5 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <Get_Key+0x2e0>)
 8000838:	f001 f9c0 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <Get_Key+0x2e0>)
 8000842:	f001 f9bb 	bl	8001bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <Get_Key+0x2e0>)
 800084c:	f001 f9b6 	bl	8001bbc <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <Get_Key+0x2e0>)
 8000854:	f001 f99a 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800085e:	bf00      	nop
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <Get_Key+0x2e0>)
 8000864:	f001 f992 	bl	8001b8c <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f8      	bne.n	8000860 <Get_Key+0x2a4>
		key='A';
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <Get_Key+0x2e4>)
 8000870:	2241      	movs	r2, #65	; 0x41
 8000872:	701a      	strb	r2, [r3, #0]
		break;
 8000874:	e048      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <Get_Key+0x2e8>)
 800087a:	f001 f987 	bl	8001b8c <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000884:	bf00      	nop
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <Get_Key+0x2e8>)
 800088a:	f001 f97f 	bl	8001b8c <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f8      	bne.n	8000886 <Get_Key+0x2ca>
		key='B';
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <Get_Key+0x2e4>)
 8000896:	2242      	movs	r2, #66	; 0x42
 8000898:	701a      	strb	r2, [r3, #0]
		break;
 800089a:	e035      	b.n	8000908 <Get_Key+0x34c>
 800089c:	40020400 	.word	0x40020400
 80008a0:	20000080 	.word	0x20000080
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <Get_Key+0x360>)
 80008b2:	f001 f96b 	bl	8001b8c <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008bc:	bf00      	nop
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <Get_Key+0x360>)
 80008c4:	f001 f962 	bl	8001b8c <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f7      	bne.n	80008be <Get_Key+0x302>
		key='C';
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <Get_Key+0x364>)
 80008d0:	2243      	movs	r2, #67	; 0x43
 80008d2:	701a      	strb	r2, [r3, #0]
		break;
 80008d4:	e018      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <Get_Key+0x360>)
 80008dc:	f001 f956 	bl	8001b8c <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00c      	beq.n	8000900 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008e6:	bf00      	nop
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <Get_Key+0x360>)
 80008ee:	f001 f94d 	bl	8001b8c <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f7      	bne.n	80008e8 <Get_Key+0x32c>
		key='D';
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Get_Key+0x364>)
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	701a      	strb	r2, [r3, #0]
		break;
 80008fe:	e003      	b.n	8000908 <Get_Key+0x34c>
	while(done)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f47f ae60 	bne.w	80005c8 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000908:	2120      	movs	r1, #32
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <Get_Key+0x360>)
 800090c:	f001 f96f 	bl	8001bee <HAL_GPIO_TogglePin>
	return(key);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Get_Key+0x364>)
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020000 	.word	0x40020000
 8000920:	20000080 	.word	0x20000080

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000928:	f000 fe54 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092c:	f000 f852 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f000 f916 	bl	8000b60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000934:	f000 f8ea 	bl	8000b0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000938:	f000 f8ba 	bl	8000ab0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 800093c:	f000 f9c4 	bl	8000cc8 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f000 fb2a 	bl	8000f9c <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("Enter Code:", &Font_11x18, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	491c      	ldr	r1, [pc, #112]	; (80009bc <main+0x98>)
 800094c:	481c      	ldr	r0, [pc, #112]	; (80009c0 <main+0x9c>)
 800094e:	f000 fbbb 	bl	80010c8 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000952:	211e      	movs	r1, #30
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fb21 	bl	8000f9c <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 800095a:	f000 fa79 	bl	8000e50 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 800095e:	f000 fa77 	bl	8000e50 <SSD1306_UpdateScreen>
    HAL_Delay (500);
 8000962:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000966:	f000 fe77 	bl	8001658 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
	  key = Get_Key();
 800096a:	f7ff fe27 	bl	80005bc <Get_Key>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <main+0xa0>)
 8000974:	701a      	strb	r2, [r3, #0]
	  sprintf(hold, "%c", key);
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <main+0xa0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	4912      	ldr	r1, [pc, #72]	; (80009c8 <main+0xa4>)
 800097e:	4813      	ldr	r0, [pc, #76]	; (80009cc <main+0xa8>)
 8000980:	f003 fdd4 	bl	800452c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100);
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <main+0xa8>)
 8000986:	f7ff fc43 	bl	8000210 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	2364      	movs	r3, #100	; 0x64
 8000990:	490e      	ldr	r1, [pc, #56]	; (80009cc <main+0xa8>)
 8000992:	480f      	ldr	r0, [pc, #60]	; (80009d0 <main+0xac>)
 8000994:	f003 f81e 	bl	80039d4 <HAL_UART_Transmit>
	  SSD1306_GotoXY (0, 30);
 8000998:	211e      	movs	r1, #30
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fafe 	bl	8000f9c <SSD1306_GotoXY>
	  SSD1306_UpdateScreen();
 80009a0:	f000 fa56 	bl	8000e50 <SSD1306_UpdateScreen>
	  SSD1306_Puts (hold, &Font_11x18, 1);
 80009a4:	2201      	movs	r2, #1
 80009a6:	4905      	ldr	r1, [pc, #20]	; (80009bc <main+0x98>)
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <main+0xa8>)
 80009aa:	f000 fb8d 	bl	80010c8 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80009ae:	f000 fa4f 	bl	8000e50 <SSD1306_UpdateScreen>
	  HAL_Delay (500);
 80009b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b6:	f000 fe4f 	bl	8001658 <HAL_Delay>
	  key = Get_Key();
 80009ba:	e7d6      	b.n	800096a <main+0x46>
 80009bc:	20000000 	.word	0x20000000
 80009c0:	08004e8c 	.word	0x08004e8c
 80009c4:	20000080 	.word	0x20000080
 80009c8:	08004e98 	.word	0x08004e98
 80009cc:	20000120 	.word	0x20000120
 80009d0:	200000d8 	.word	0x200000d8

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2234      	movs	r2, #52	; 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fdc2 	bl	800456c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <SystemClock_Config+0xd4>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <SystemClock_Config+0xd8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a20:	4a22      	ldr	r2, [pc, #136]	; (8000aac <SystemClock_Config+0xd8>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <SystemClock_Config+0xd8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fa26 	bl	8002eb4 <HAL_RCC_OscConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a6e:	f000 f925 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2302      	movs	r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fe94 	bl	80027bc <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a9a:	f000 f90f 	bl	8000cbc <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3750      	adds	r7, #80	; 0x50
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_I2C1_Init+0x54>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x58>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_I2C1_Init+0x50>)
 8000aee:	f001 f899 	bl	8001c24 <HAL_I2C_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 f8e0 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000084 	.word	0x20000084
 8000b04:	40005400 	.word	0x40005400
 8000b08:	00061a80 	.word	0x00061a80

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART2_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f002 fef6 	bl	8003934 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f8b5 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000d8 	.word	0x200000d8
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a3b      	ldr	r2, [pc, #236]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b39      	ldr	r3, [pc, #228]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a2d      	ldr	r2, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	4828      	ldr	r0, [pc, #160]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000bec:	f000 ffe6 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bf6:	4826      	ldr	r0, [pc, #152]	; (8000c90 <MX_GPIO_Init+0x130>)
 8000bf8:	f000 ffe0 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	481e      	ldr	r0, [pc, #120]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000c14:	f000 fe26 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c18:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4817      	ldr	r0, [pc, #92]	; (8000c90 <MX_GPIO_Init+0x130>)
 8000c32:	f000 fe17 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000c4a:	f000 fe0b 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000c64:	f000 fdfe 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_GPIO_Init+0x130>)
 8000c7c:	f000 fdf2 	bl	8001864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 fcb5 	bl	8001618 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40001000 	.word	0x40001000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000cce:	f000 fa21 	bl	8001114 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000cd2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2178      	movs	r1, #120	; 0x78
 8000cda:	485b      	ldr	r0, [pc, #364]	; (8000e48 <SSD1306_Init+0x180>)
 8000cdc:	f001 f9e4 	bl	80020a8 <HAL_I2C_IsDeviceReady>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e0a9      	b.n	8000e3e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000cea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000cee:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cf0:	e002      	b.n	8000cf8 <SSD1306_Init+0x30>
		p--;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f9      	bne.n	8000cf2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000cfe:	22ae      	movs	r2, #174	; 0xae
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	; 0x78
 8000d04:	f000 fa82 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	; 0x78
 8000d0e:	f000 fa7d 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d12:	2210      	movs	r2, #16
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	; 0x78
 8000d18:	f000 fa78 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d1c:	22b0      	movs	r2, #176	; 0xb0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	; 0x78
 8000d22:	f000 fa73 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d26:	22c8      	movs	r2, #200	; 0xc8
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	; 0x78
 8000d2c:	f000 fa6e 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	; 0x78
 8000d36:	f000 fa69 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	; 0x78
 8000d40:	f000 fa64 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	; 0x78
 8000d4a:	f000 fa5f 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d4e:	2281      	movs	r2, #129	; 0x81
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	f000 fa5a 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	; 0x78
 8000d5e:	f000 fa55 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d62:	22a1      	movs	r2, #161	; 0xa1
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	; 0x78
 8000d68:	f000 fa50 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d6c:	22a6      	movs	r2, #166	; 0xa6
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	; 0x78
 8000d72:	f000 fa4b 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d76:	22a8      	movs	r2, #168	; 0xa8
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2078      	movs	r0, #120	; 0x78
 8000d7c:	f000 fa46 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d80:	223f      	movs	r2, #63	; 0x3f
 8000d82:	2100      	movs	r1, #0
 8000d84:	2078      	movs	r0, #120	; 0x78
 8000d86:	f000 fa41 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d8a:	22a4      	movs	r2, #164	; 0xa4
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2078      	movs	r0, #120	; 0x78
 8000d90:	f000 fa3c 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d94:	22d3      	movs	r2, #211	; 0xd3
 8000d96:	2100      	movs	r1, #0
 8000d98:	2078      	movs	r0, #120	; 0x78
 8000d9a:	f000 fa37 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2078      	movs	r0, #120	; 0x78
 8000da4:	f000 fa32 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000da8:	22d5      	movs	r2, #213	; 0xd5
 8000daa:	2100      	movs	r1, #0
 8000dac:	2078      	movs	r0, #120	; 0x78
 8000dae:	f000 fa2d 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000db2:	22f0      	movs	r2, #240	; 0xf0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2078      	movs	r0, #120	; 0x78
 8000db8:	f000 fa28 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000dbc:	22d9      	movs	r2, #217	; 0xd9
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2078      	movs	r0, #120	; 0x78
 8000dc2:	f000 fa23 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000dc6:	2222      	movs	r2, #34	; 0x22
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2078      	movs	r0, #120	; 0x78
 8000dcc:	f000 fa1e 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000dd0:	22da      	movs	r2, #218	; 0xda
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2078      	movs	r0, #120	; 0x78
 8000dd6:	f000 fa19 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000dda:	2212      	movs	r2, #18
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2078      	movs	r0, #120	; 0x78
 8000de0:	f000 fa14 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000de4:	22db      	movs	r2, #219	; 0xdb
 8000de6:	2100      	movs	r1, #0
 8000de8:	2078      	movs	r0, #120	; 0x78
 8000dea:	f000 fa0f 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000dee:	2220      	movs	r2, #32
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	; 0x78
 8000df4:	f000 fa0a 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000df8:	228d      	movs	r2, #141	; 0x8d
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2078      	movs	r0, #120	; 0x78
 8000dfe:	f000 fa05 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e02:	2214      	movs	r2, #20
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	; 0x78
 8000e08:	f000 fa00 	bl	800120c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e0c:	22af      	movs	r2, #175	; 0xaf
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2078      	movs	r0, #120	; 0x78
 8000e12:	f000 f9fb 	bl	800120c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e16:	222e      	movs	r2, #46	; 0x2e
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	; 0x78
 8000e1c:	f000 f9f6 	bl	800120c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 f843 	bl	8000eac <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000e26:	f000 f813 	bl	8000e50 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SSD1306_Init+0x184>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SSD1306_Init+0x184>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SSD1306_Init+0x184>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000084 	.word	0x20000084
 8000e4c:	20000524 	.word	0x20000524

08000e50 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	e01d      	b.n	8000e98 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	3b50      	subs	r3, #80	; 0x50
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	2078      	movs	r0, #120	; 0x78
 8000e68:	f000 f9d0 	bl	800120c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2078      	movs	r0, #120	; 0x78
 8000e72:	f000 f9cb 	bl	800120c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e76:	2210      	movs	r2, #16
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2078      	movs	r0, #120	; 0x78
 8000e7c:	f000 f9c6 	bl	800120c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <SSD1306_UpdateScreen+0x58>)
 8000e86:	441a      	add	r2, r3
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	2078      	movs	r0, #120	; 0x78
 8000e8e:	f000 f957 	bl	8001140 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	3301      	adds	r3, #1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b07      	cmp	r3, #7
 8000e9c:	d9de      	bls.n	8000e5c <SSD1306_UpdateScreen+0xc>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000124 	.word	0x20000124

08000eac <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <SSD1306_Fill+0x14>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e000      	b.n	8000ec2 <SSD1306_Fill+0x16>
 8000ec0:	23ff      	movs	r3, #255	; 0xff
 8000ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <SSD1306_Fill+0x2c>)
 8000eca:	f003 fb4f 	bl	800456c <memset>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000124 	.word	0x20000124

08000edc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	80bb      	strh	r3, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	70fb      	strb	r3, [r7, #3]
	if (
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef2:	d848      	bhi.n	8000f86 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ef8:	d845      	bhi.n	8000f86 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <SSD1306_DrawPixel+0xb8>)
 8000efc:	791b      	ldrb	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bf0c      	ite	eq
 8000f08:	2301      	moveq	r3, #1
 8000f0a:	2300      	movne	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d11a      	bne.n	8000f4c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	88bb      	ldrh	r3, [r7, #4]
 8000f1a:	08db      	lsrs	r3, r3, #3
 8000f1c:	b298      	uxth	r0, r3
 8000f1e:	4603      	mov	r3, r0
 8000f20:	01db      	lsls	r3, r3, #7
 8000f22:	4413      	add	r3, r2
 8000f24:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <SSD1306_DrawPixel+0xbc>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	b25a      	sxtb	r2, r3
 8000f2a:	88bb      	ldrh	r3, [r7, #4]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b259      	sxtb	r1, r3
 8000f3c:	88fa      	ldrh	r2, [r7, #6]
 8000f3e:	4603      	mov	r3, r0
 8000f40:	01db      	lsls	r3, r3, #7
 8000f42:	4413      	add	r3, r2
 8000f44:	b2c9      	uxtb	r1, r1
 8000f46:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <SSD1306_DrawPixel+0xbc>)
 8000f48:	54d1      	strb	r1, [r2, r3]
 8000f4a:	e01d      	b.n	8000f88 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f4c:	88fa      	ldrh	r2, [r7, #6]
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	b298      	uxth	r0, r3
 8000f54:	4603      	mov	r3, r0
 8000f56:	01db      	lsls	r3, r3, #7
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <SSD1306_DrawPixel+0xbc>)
 8000f5c:	5cd3      	ldrb	r3, [r2, r3]
 8000f5e:	b25a      	sxtb	r2, r3
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	4013      	ands	r3, r2
 8000f74:	b259      	sxtb	r1, r3
 8000f76:	88fa      	ldrh	r2, [r7, #6]
 8000f78:	4603      	mov	r3, r0
 8000f7a:	01db      	lsls	r3, r3, #7
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b2c9      	uxtb	r1, r1
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <SSD1306_DrawPixel+0xbc>)
 8000f82:	54d1      	strb	r1, [r2, r3]
 8000f84:	e000      	b.n	8000f88 <SSD1306_DrawPixel+0xac>
		return;
 8000f86:	bf00      	nop
	}
}
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000524 	.word	0x20000524
 8000f98:	20000124 	.word	0x20000124

08000f9c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	80fb      	strh	r3, [r7, #6]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000fac:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SSD1306_GotoXY+0x28>)
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <SSD1306_GotoXY+0x28>)
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	8053      	strh	r3, [r2, #2]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	20000524 	.word	0x20000524

08000fc8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <SSD1306_Putc+0xfc>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
	if (
 8000fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe6:	dc07      	bgt.n	8000ff8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <SSD1306_Putc+0xfc>)
 8000fea:	885b      	ldrh	r3, [r3, #2]
 8000fec:	461a      	mov	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ff4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff6:	dd01      	ble.n	8000ffc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e05e      	b.n	80010ba <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e04b      	b.n	800109a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	3b20      	subs	r3, #32
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	7849      	ldrb	r1, [r1, #1]
 800100e:	fb01 f303 	mul.w	r3, r1, r3
 8001012:	4619      	mov	r1, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	440b      	add	r3, r1
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	e030      	b.n	8001088 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d010      	beq.n	8001058 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <SSD1306_Putc+0xfc>)
 8001038:	881a      	ldrh	r2, [r3, #0]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	b29b      	uxth	r3, r3
 800103e:	4413      	add	r3, r2
 8001040:	b298      	uxth	r0, r3
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <SSD1306_Putc+0xfc>)
 8001044:	885a      	ldrh	r2, [r3, #2]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	79ba      	ldrb	r2, [r7, #6]
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff ff43 	bl	8000edc <SSD1306_DrawPixel>
 8001056:	e014      	b.n	8001082 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <SSD1306_Putc+0xfc>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	b29b      	uxth	r3, r3
 8001060:	4413      	add	r3, r2
 8001062:	b298      	uxth	r0, r3
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <SSD1306_Putc+0xfc>)
 8001066:	885a      	ldrh	r2, [r3, #2]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	b299      	uxth	r1, r3
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	f7ff ff2d 	bl	8000edc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	3301      	adds	r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4293      	cmp	r3, r2
 8001092:	d3c8      	bcc.n	8001026 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d3ad      	bcc.n	8001002 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <SSD1306_Putc+0xfc>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <SSD1306_Putc+0xfc>)
 80010b6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000524 	.word	0x20000524

080010c8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	4613      	mov	r3, r2
 80010d4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80010d6:	e012      	b.n	80010fe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff71 	bl	8000fc8 <SSD1306_Putc>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d002      	beq.n	80010f8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	e008      	b.n	800110a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1e8      	bne.n	80010d8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <ssd1306_I2C_Init+0x28>)
 800111c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800111e:	e002      	b.n	8001126 <ssd1306_I2C_Init+0x12>
		p--;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f9      	bne.n	8001120 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	0003d090 	.word	0x0003d090

08001140 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b0c7      	sub	sp, #284	; 0x11c
 8001144:	af02      	add	r7, sp, #8
 8001146:	4604      	mov	r4, r0
 8001148:	4608      	mov	r0, r1
 800114a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800114e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001152:	600a      	str	r2, [r1, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800115a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800115e:	4622      	mov	r2, r4
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001166:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800116a:	4602      	mov	r2, r0
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001172:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001176:	460a      	mov	r2, r1
 8001178:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800117a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800117e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001182:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001186:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001194:	e015      	b.n	80011c2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001196:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800119a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800119e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	441a      	add	r2, r3
 80011a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011aa:	3301      	adds	r3, #1
 80011ac:	7811      	ldrb	r1, [r2, #0]
 80011ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011b2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80011b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80011b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011bc:	3301      	adds	r3, #1
 80011be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011cc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80011d0:	8812      	ldrh	r2, [r2, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8df      	bhi.n	8001196 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80011d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011da:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b299      	uxth	r1, r3
 80011e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f107 020c 	add.w	r2, r7, #12
 80011f4:	200a      	movs	r0, #10
 80011f6:	9000      	str	r0, [sp, #0]
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <ssd1306_I2C_WriteMulti+0xc8>)
 80011fa:	f000 fe57 	bl	8001eac <HAL_I2C_Master_Transmit>
}
 80011fe:	bf00      	nop
 8001200:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	20000084 	.word	0x20000084

0800120c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	460b      	mov	r3, r1
 8001218:	71bb      	strb	r3, [r7, #6]
 800121a:	4613      	mov	r3, r2
 800121c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	b299      	uxth	r1, r3
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	230a      	movs	r3, #10
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2302      	movs	r3, #2
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <ssd1306_I2C_Write+0x38>)
 8001236:	f000 fe39 	bl	8001eac <HAL_I2C_Master_Transmit>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000084 	.word	0x20000084

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_MspInit+0x4c>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_MspInit+0x4c>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_I2C_MspInit+0x84>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12c      	bne.n	8001314 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80012d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e8:	2304      	movs	r3, #4
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <HAL_I2C_MspInit+0x8c>)
 80012f4:	f000 fab6 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_I2C_MspInit+0x88>)
 8001302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_I2C_MspInit+0x88>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40005400 	.word	0x40005400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_UART_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12b      	bne.n	80013a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_UART_MspInit+0x8c>)
 800139e:	f000 fa61 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <HAL_InitTick+0xe4>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a32      	ldr	r2, [pc, #200]	; (800149c <HAL_InitTick+0xe4>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b30      	ldr	r3, [pc, #192]	; (800149c <HAL_InitTick+0xe4>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e4:	f107 0210 	add.w	r2, r7, #16
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 fafe 	bl	80029f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fe:	f001 facf 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8001402:	6378      	str	r0, [r7, #52]	; 0x34
 8001404:	e004      	b.n	8001410 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001406:	f001 facb 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 800140a:	4603      	mov	r3, r0
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_InitTick+0xe8>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9b      	lsrs	r3, r3, #18
 800141a:	3b01      	subs	r3, #1
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_InitTick+0xec>)
 8001420:	4a21      	ldr	r2, [pc, #132]	; (80014a8 <HAL_InitTick+0xf0>)
 8001422:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_InitTick+0xec>)
 8001426:	f240 32e7 	movw	r2, #999	; 0x3e7
 800142a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800142c:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_InitTick+0xec>)
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_InitTick+0xec>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_InitTick+0xec>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_InitTick+0xec>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <HAL_InitTick+0xec>)
 8001446:	f001 ffd3 	bl	80033f0 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001454:	2b00      	cmp	r3, #0
 8001456:	d11b      	bne.n	8001490 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <HAL_InitTick+0xec>)
 800145a:	f002 f823 	bl	80034a4 <HAL_TIM_Base_Start_IT>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001464:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800146c:	2036      	movs	r0, #54	; 0x36
 800146e:	f000 f9eb 	bl	8001848 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d808      	bhi.n	800148a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	2036      	movs	r0, #54	; 0x36
 800147e:	f000 f9c7 	bl	8001810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_InitTick+0xf4>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e002      	b.n	8001490 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001494:	4618      	mov	r0, r3
 8001496:	3738      	adds	r7, #56	; 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	431bde83 	.word	0x431bde83
 80014a4:	2000052c 	.word	0x2000052c
 80014a8:	40001000 	.word	0x40001000
 80014ac:	2000000c 	.word	0x2000000c

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM6_DAC_IRQHandler+0x10>)
 80014e2:	f002 f84f 	bl	8003584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000052c 	.word	0x2000052c

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f003 f82c 	bl	800457c <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20020000 	.word	0x20020000
 8001550:	00000400 	.word	0x00000400
 8001554:	20000574 	.word	0x20000574
 8001558:	20000778 	.word	0x20000778

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001584:	f7ff ffea 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	; (80015cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f002 ffeb 	bl	8004588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b2:	f7ff f9b7 	bl	8000924 <main>
  bx  lr    
 80015b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80015c4:	08005c54 	.word	0x08005c54
  ldr r2, =_sbss
 80015c8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80015cc:	20000778 	.word	0x20000778

080015d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <HAL_Init+0x40>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_Init+0x40>)
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x40>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f8fc 	bl	80017fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fed8 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fe1e 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000010 	.word	0x20000010
 800163c:	20000578 	.word	0x20000578

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000578 	.word	0x20000578

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff ffee 	bl	8001640 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d005      	beq.n	800167e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_Delay+0x44>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167e:	bf00      	nop
 8001680:	f7ff ffde 	bl	8001640 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	429a      	cmp	r2, r3
 800168e:	d8f7      	bhi.n	8001680 <HAL_Delay+0x28>
  {
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000010 	.word	0x20000010

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d2:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	60d3      	str	r3, [r2, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff4c 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001822:	f7ff ff61 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001826:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	6978      	ldr	r0, [r7, #20]
 800182e:	f7ff ffb1 	bl	8001794 <NVIC_EncodePriority>
 8001832:	4602      	mov	r2, r0
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff80 	bl	8001740 <__NVIC_SetPriority>
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff54 	bl	8001704 <__NVIC_EnableIRQ>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e165      	b.n	8001b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 8154 	bne.w	8001b46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80ae 	beq.w	8001b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b5d      	ldr	r3, [pc, #372]	; (8001b64 <HAL_GPIO_Init+0x300>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a5c      	ldr	r2, [pc, #368]	; (8001b64 <HAL_GPIO_Init+0x300>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <HAL_GPIO_Init+0x300>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a4f      	ldr	r2, [pc, #316]	; (8001b6c <HAL_GPIO_Init+0x308>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d025      	beq.n	8001a7e <HAL_GPIO_Init+0x21a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4e      	ldr	r2, [pc, #312]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d01f      	beq.n	8001a7a <HAL_GPIO_Init+0x216>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4d      	ldr	r2, [pc, #308]	; (8001b74 <HAL_GPIO_Init+0x310>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4c      	ldr	r2, [pc, #304]	; (8001b78 <HAL_GPIO_Init+0x314>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x20e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4b      	ldr	r2, [pc, #300]	; (8001b7c <HAL_GPIO_Init+0x318>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x20a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <HAL_GPIO_Init+0x31c>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x206>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a49      	ldr	r2, [pc, #292]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x202>
 8001a62:	2306      	movs	r3, #6
 8001a64:	e00c      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a66:	2307      	movs	r3, #7
 8001a68:	e00a      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	e008      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x21c>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f002 0203 	and.w	r2, r2, #3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a90:	4935      	ldr	r1, [pc, #212]	; (8001b68 <HAL_GPIO_Init+0x304>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac2:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f67f ae96 	bls.w	8001880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40021400 	.word	0x40021400
 8001b84:	40021800 	.word	0x40021800
 8001b88:	40013c00 	.word	0x40013c00

08001b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e001      	b.n	8001bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd8:	e003      	b.n	8001be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	041a      	lsls	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	619a      	str	r2, [r3, #24]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c00:	887a      	ldrh	r2, [r7, #2]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	041a      	lsls	r2, r3, #16
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	400b      	ands	r3, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e12b      	b.n	8001e8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fb24 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2224      	movs	r2, #36	; 0x24
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c88:	f000 fe8a 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8001c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4a81      	ldr	r2, [pc, #516]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d807      	bhi.n	8001ca8 <HAL_I2C_Init+0x84>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a80      	ldr	r2, [pc, #512]	; (8001e9c <HAL_I2C_Init+0x278>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e006      	b.n	8001cb6 <HAL_I2C_Init+0x92>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a7d      	ldr	r2, [pc, #500]	; (8001ea0 <HAL_I2C_Init+0x27c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bf94      	ite	ls
 8001cb0:	2301      	movls	r3, #1
 8001cb2:	2300      	movhi	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0e7      	b.n	8001e8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a78      	ldr	r2, [pc, #480]	; (8001ea4 <HAL_I2C_Init+0x280>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9b      	lsrs	r3, r3, #18
 8001cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a6a      	ldr	r2, [pc, #424]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d802      	bhi.n	8001cf8 <HAL_I2C_Init+0xd4>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	e009      	b.n	8001d0c <HAL_I2C_Init+0xe8>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	4a69      	ldr	r2, [pc, #420]	; (8001ea8 <HAL_I2C_Init+0x284>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	495c      	ldr	r1, [pc, #368]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001d28:	428b      	cmp	r3, r1
 8001d2a:	d819      	bhi.n	8001d60 <HAL_I2C_Init+0x13c>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e59      	subs	r1, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3a:	1c59      	adds	r1, r3, #1
 8001d3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d40:	400b      	ands	r3, r1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_I2C_Init+0x138>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1e59      	subs	r1, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5a:	e051      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	e04f      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_I2C_Init+0x168>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1e58      	subs	r0, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	440b      	add	r3, r1
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	e012      	b.n	8001db2 <HAL_I2C_Init+0x18e>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	0099      	lsls	r1, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Init+0x196>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e022      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10e      	bne.n	8001de0 <HAL_I2C_Init+0x1bc>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1e58      	subs	r0, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	440b      	add	r3, r1
 8001dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dde:	e00f      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e58      	subs	r0, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	0099      	lsls	r1, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	6809      	ldr	r1, [r1, #0]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6911      	ldr	r1, [r2, #16]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68d2      	ldr	r2, [r2, #12]
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	000186a0 	.word	0x000186a0
 8001e9c:	001e847f 	.word	0x001e847f
 8001ea0:	003d08ff 	.word	0x003d08ff
 8001ea4:	431bde83 	.word	0x431bde83
 8001ea8:	10624dd3 	.word	0x10624dd3

08001eac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	460b      	mov	r3, r1
 8001eba:	817b      	strh	r3, [r7, #10]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff fbbe 	bl	8001640 <HAL_GetTick>
 8001ec4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	f040 80e0 	bne.w	8002094 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2319      	movs	r3, #25
 8001eda:	2201      	movs	r2, #1
 8001edc:	4970      	ldr	r1, [pc, #448]	; (80020a0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fa92 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
 8001eec:	e0d3      	b.n	8002096 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_I2C_Master_Transmit+0x50>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0cc      	b.n	8002096 <HAL_I2C_Master_Transmit+0x1ea>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d007      	beq.n	8001f22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2221      	movs	r2, #33	; 0x21
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	893a      	ldrh	r2, [r7, #8]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a50      	ldr	r2, [pc, #320]	; (80020a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	6a3a      	ldr	r2, [r7, #32]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f9ca 	bl	8002304 <I2C_MasterRequestWrite>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e08d      	b.n	8002096 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f90:	e066      	b.n	8002060 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	6a39      	ldr	r1, [r7, #32]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 fb50 	bl	800263c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d107      	bne.n	8001fba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06b      	b.n	8002096 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d11b      	bne.n	8002034 <HAL_I2C_Master_Transmit+0x188>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d017      	beq.n	8002034 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	6a39      	ldr	r1, [r7, #32]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fb47 	bl	80026cc <I2C_WaitOnBTFFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2b04      	cmp	r3, #4
 800204a:	d107      	bne.n	800205c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e01a      	b.n	8002096 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	d194      	bne.n	8001f92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002094:	2302      	movs	r3, #2
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	00100002 	.word	0x00100002
 80020a4:	ffff0000 	.word	0xffff0000

080020a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	460b      	mov	r3, r1
 80020b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff fac2 	bl	8001640 <HAL_GetTick>
 80020bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	f040 8111 	bne.w	80022f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	2201      	movs	r2, #1
 80020d8:	4988      	ldr	r1, [pc, #544]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f994 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
 80020e8:	e104      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_I2C_IsDeviceReady+0x50>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e0fd      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d007      	beq.n	800211e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2224      	movs	r2, #36	; 0x24
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a70      	ldr	r2, [pc, #448]	; (8002300 <HAL_I2C_IsDeviceReady+0x258>)
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002150:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2200      	movs	r2, #0
 800215a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f952 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00d      	beq.n	8002186 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002178:	d103      	bne.n	8002182 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0b6      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002186:	897b      	ldrh	r3, [r7, #10]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002194:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff fa53 	bl	8001640 <HAL_GetTick>
 800219a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	bf0c      	ite	eq
 80021c2:	2301      	moveq	r3, #1
 80021c4:	2300      	movne	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021ca:	e025      	b.n	8002218 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021cc:	f7ff fa38 	bl	8001640 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d302      	bcc.n	80021e2 <HAL_I2C_IsDeviceReady+0x13a>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	22a0      	movs	r2, #160	; 0xa0
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2ba0      	cmp	r3, #160	; 0xa0
 8002222:	d005      	beq.n	8002230 <HAL_I2C_IsDeviceReady+0x188>
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_I2C_IsDeviceReady+0x188>
 800222a:	7dbb      	ldrb	r3, [r7, #22]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0cd      	beq.n	80021cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d129      	bne.n	800229a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002254:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2319      	movs	r3, #25
 8002272:	2201      	movs	r2, #1
 8002274:	4921      	ldr	r1, [pc, #132]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f8c6 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e036      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e02c      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2319      	movs	r3, #25
 80022ba:	2201      	movs	r2, #1
 80022bc:	490f      	ldr	r1, [pc, #60]	; (80022fc <HAL_I2C_IsDeviceReady+0x254>)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f8a2 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e012      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f4ff af32 	bcc.w	8002142 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	00100002 	.word	0x00100002
 8002300:	ffff0000 	.word	0xffff0000

08002304 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	460b      	mov	r3, r1
 8002312:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d006      	beq.n	800232e <I2C_MasterRequestWrite+0x2a>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d003      	beq.n	800232e <I2C_MasterRequestWrite+0x2a>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800232c:	d108      	bne.n	8002340 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e00b      	b.n	8002358 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	2b12      	cmp	r3, #18
 8002346:	d107      	bne.n	8002358 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002356:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f84f 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237e:	d103      	bne.n	8002388 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e035      	b.n	80023f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002394:	d108      	bne.n	80023a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002396:	897b      	ldrh	r3, [r7, #10]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	e01b      	b.n	80023e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023a8:	897b      	ldrh	r3, [r7, #10]
 80023aa:	11db      	asrs	r3, r3, #7
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 0306 	and.w	r3, r3, #6
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f063 030f 	orn	r3, r3, #15
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <I2C_MasterRequestWrite+0xfc>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f898 	bl	80024fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e010      	b.n	80023f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023d6:	897b      	ldrh	r3, [r7, #10]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <I2C_MasterRequestWrite+0x100>)
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f888 	bl	80024fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	00010008 	.word	0x00010008
 8002404:	00010002 	.word	0x00010002

08002408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002418:	e048      	b.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d044      	beq.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002422:	f7ff f90d 	bl	8001640 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d139      	bne.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	0c1b      	lsrs	r3, r3, #16
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10d      	bne.n	800245e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	43da      	mvns	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	e00c      	b.n	8002478 <I2C_WaitOnFlagUntilTimeout+0x70>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	43da      	mvns	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	429a      	cmp	r2, r3
 800247c:	d116      	bne.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e023      	b.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	0c1b      	lsrs	r3, r3, #16
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10d      	bne.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	43da      	mvns	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	4013      	ands	r3, r2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	e00c      	b.n	80024ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	43da      	mvns	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4013      	ands	r3, r2
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d093      	beq.n	800241a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800250a:	e071      	b.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251a:	d123      	bne.n	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002534:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f043 0204 	orr.w	r2, r3, #4
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e067      	b.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d041      	beq.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256c:	f7ff f868 	bl	8001640 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d302      	bcc.n	8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d136      	bne.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d10c      	bne.n	80025a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4013      	ands	r3, r2
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf14      	ite	ne
 800259e:	2301      	movne	r3, #1
 80025a0:	2300      	moveq	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	e00b      	b.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4013      	ands	r3, r2
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f043 0220 	orr.w	r2, r3, #32
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e021      	b.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10c      	bne.n	8002614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	43da      	mvns	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e00b      	b.n	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4013      	ands	r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	f47f af6d 	bne.w	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002648:	e034      	b.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f886 	bl	800275c <I2C_IsAcknowledgeFailed>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e034      	b.n	80026c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d028      	beq.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7fe ffed 	bl	8001640 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11d      	bne.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d016      	beq.n	80026b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e007      	b.n	80026c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	d1c3      	bne.n	800264a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026d8:	e034      	b.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f83e 	bl	800275c <I2C_IsAcknowledgeFailed>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e034      	b.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d028      	beq.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7fe ffa5 	bl	8001640 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11d      	bne.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d016      	beq.n	8002744 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f043 0220 	orr.w	r2, r3, #32
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e007      	b.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b04      	cmp	r3, #4
 8002750:	d1c3      	bne.n	80026da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d11b      	bne.n	80027ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800277c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0cc      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b68      	ldr	r3, [pc, #416]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b63      	ldr	r3, [pc, #396]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b8      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b59      	ldr	r3, [pc, #356]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a58      	ldr	r2, [pc, #352]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494d      	ldr	r1, [pc, #308]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e067      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4934      	ldr	r1, [pc, #208]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fec8 	bl	8001640 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fec4 	bl	8001640 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e032      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4916      	ldr	r1, [pc, #88]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490e      	ldr	r1, [pc, #56]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f887 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002946:	4602      	mov	r2, r0
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	490a      	ldr	r1, [pc, #40]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	5ccb      	ldrb	r3, [r1, r3]
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	4a09      	ldr	r2, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fd28 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023c00 	.word	0x40023c00
 8002978:	40023800 	.word	0x40023800
 800297c:	08005bf8 	.word	0x08005bf8
 8002980:	20000008 	.word	0x20000008
 8002984:	2000000c 	.word	0x2000000c

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_GetHCLKFreq+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000008 	.word	0x20000008

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029a4:	f7ff fff0 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08005c08 	.word	0x08005c08

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029cc:	f7ff ffdc 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0b5b      	lsrs	r3, r3, #13
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08005c08 	.word	0x08005c08

080029f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	220f      	movs	r2, #15
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0203 	and.w	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_GetClockConfig+0x5c>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <HAL_RCC_GetClockConfig+0x60>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 020f 	and.w	r2, r3, #15
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40023c00 	.word	0x40023c00

08002a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b0ae      	sub	sp, #184	; 0xb8
 8002a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a7a:	4bcb      	ldr	r3, [pc, #812]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	f200 8206 	bhi.w	8002e94 <HAL_RCC_GetSysClockFreq+0x440>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002ac5 	.word	0x08002ac5
 8002a94:	08002e95 	.word	0x08002e95
 8002a98:	08002e95 	.word	0x08002e95
 8002a9c:	08002e95 	.word	0x08002e95
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002e95 	.word	0x08002e95
 8002aa8:	08002e95 	.word	0x08002e95
 8002aac:	08002e95 	.word	0x08002e95
 8002ab0:	08002ad5 	.word	0x08002ad5
 8002ab4:	08002e95 	.word	0x08002e95
 8002ab8:	08002e95 	.word	0x08002e95
 8002abc:	08002e95 	.word	0x08002e95
 8002ac0:	08002cc5 	.word	0x08002cc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4bb9      	ldr	r3, [pc, #740]	; (8002dac <HAL_RCC_GetSysClockFreq+0x358>)
 8002ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002aca:	e1e7      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002acc:	4bb8      	ldr	r3, [pc, #736]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ad2:	e1e3      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad4:	4bb4      	ldr	r3, [pc, #720]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae0:	4bb1      	ldr	r3, [pc, #708]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d071      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aec:	4bae      	ldr	r3, [pc, #696]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002af8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	f04f 0000 	mov.w	r0, #0
 8002b1a:	f04f 0100 	mov.w	r1, #0
 8002b1e:	0159      	lsls	r1, r3, #5
 8002b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b24:	0150      	lsls	r0, r2, #5
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	1a51      	subs	r1, r2, r1
 8002b2e:	6439      	str	r1, [r7, #64]	; 0x40
 8002b30:	4629      	mov	r1, r5
 8002b32:	eb63 0301 	sbc.w	r3, r3, r1
 8002b36:	647b      	str	r3, [r7, #68]	; 0x44
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b44:	4649      	mov	r1, r9
 8002b46:	018b      	lsls	r3, r1, #6
 8002b48:	4641      	mov	r1, r8
 8002b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4e:	4641      	mov	r1, r8
 8002b50:	018a      	lsls	r2, r1, #6
 8002b52:	4641      	mov	r1, r8
 8002b54:	1a51      	subs	r1, r2, r1
 8002b56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b58:	4649      	mov	r1, r9
 8002b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	00cb      	lsls	r3, r1, #3
 8002b70:	4641      	mov	r1, r8
 8002b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b76:	4641      	mov	r1, r8
 8002b78:	00ca      	lsls	r2, r1, #3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4622      	mov	r2, r4
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	633b      	str	r3, [r7, #48]	; 0x30
 8002b86:	462b      	mov	r3, r5
 8002b88:	460a      	mov	r2, r1
 8002b8a:	eb42 0303 	adc.w	r3, r2, r3
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	024b      	lsls	r3, r1, #9
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	024a      	lsls	r2, r1, #9
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bc0:	f7fd fb7e 	bl	80002c0 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bce:	e067      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd0:	4b75      	ldr	r3, [pc, #468]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bdc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002be0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bea:	2300      	movs	r3, #0
 8002bec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	462b      	mov	r3, r5
 8002bf6:	f04f 0000 	mov.w	r0, #0
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	0159      	lsls	r1, r3, #5
 8002c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c04:	0150      	lsls	r0, r2, #5
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	1a51      	subs	r1, r2, r1
 8002c0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c10:	4629      	mov	r1, r5
 8002c12:	eb63 0301 	sbc.w	r3, r3, r1
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c24:	4649      	mov	r1, r9
 8002c26:	018b      	lsls	r3, r1, #6
 8002c28:	4641      	mov	r1, r8
 8002c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c2e:	4641      	mov	r1, r8
 8002c30:	018a      	lsls	r2, r1, #6
 8002c32:	4641      	mov	r1, r8
 8002c34:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c38:	4649      	mov	r1, r9
 8002c3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c52:	4692      	mov	sl, r2
 8002c54:	469b      	mov	fp, r3
 8002c56:	4623      	mov	r3, r4
 8002c58:	eb1a 0303 	adds.w	r3, sl, r3
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	462b      	mov	r3, r5
 8002c60:	eb4b 0303 	adc.w	r3, fp, r3
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c72:	4629      	mov	r1, r5
 8002c74:	028b      	lsls	r3, r1, #10
 8002c76:	4621      	mov	r1, r4
 8002c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	028a      	lsls	r2, r1, #10
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c88:	2200      	movs	r2, #0
 8002c8a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c8c:	677a      	str	r2, [r7, #116]	; 0x74
 8002c8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c92:	f7fd fb15 	bl	80002c0 <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cc2:	e0eb      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc4:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd0:	4b35      	ldr	r3, [pc, #212]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d06b      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cdc:	4b32      	ldr	r3, [pc, #200]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cee:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	667b      	str	r3, [r7, #100]	; 0x64
 8002cf4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	462b      	mov	r3, r5
 8002cfc:	f04f 0000 	mov.w	r0, #0
 8002d00:	f04f 0100 	mov.w	r1, #0
 8002d04:	0159      	lsls	r1, r3, #5
 8002d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0a:	0150      	lsls	r0, r2, #5
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4621      	mov	r1, r4
 8002d12:	1a51      	subs	r1, r2, r1
 8002d14:	61b9      	str	r1, [r7, #24]
 8002d16:	4629      	mov	r1, r5
 8002d18:	eb63 0301 	sbc.w	r3, r3, r1
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d2a:	4659      	mov	r1, fp
 8002d2c:	018b      	lsls	r3, r1, #6
 8002d2e:	4651      	mov	r1, sl
 8002d30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d34:	4651      	mov	r1, sl
 8002d36:	018a      	lsls	r2, r1, #6
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ebb2 0801 	subs.w	r8, r2, r1
 8002d3e:	4659      	mov	r1, fp
 8002d40:	eb63 0901 	sbc.w	r9, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d58:	4690      	mov	r8, r2
 8002d5a:	4699      	mov	r9, r3
 8002d5c:	4623      	mov	r3, r4
 8002d5e:	eb18 0303 	adds.w	r3, r8, r3
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	462b      	mov	r3, r5
 8002d66:	eb49 0303 	adc.w	r3, r9, r3
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d78:	4629      	mov	r1, r5
 8002d7a:	024b      	lsls	r3, r1, #9
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d82:	4621      	mov	r1, r4
 8002d84:	024a      	lsls	r2, r1, #9
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d8e:	2200      	movs	r2, #0
 8002d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d98:	f7fd fa92 	bl	80002c0 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4613      	mov	r3, r2
 8002da2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da6:	e065      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x420>
 8002da8:	40023800 	.word	0x40023800
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_RCC_GetSysClockFreq+0x458>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc4:	653b      	str	r3, [r7, #80]	; 0x50
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	657b      	str	r3, [r7, #84]	; 0x54
 8002dca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002dce:	4642      	mov	r2, r8
 8002dd0:	464b      	mov	r3, r9
 8002dd2:	f04f 0000 	mov.w	r0, #0
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	0159      	lsls	r1, r3, #5
 8002ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de0:	0150      	lsls	r0, r2, #5
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4641      	mov	r1, r8
 8002de8:	1a51      	subs	r1, r2, r1
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	4649      	mov	r1, r9
 8002dee:	eb63 0301 	sbc.w	r3, r3, r1
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e00:	4659      	mov	r1, fp
 8002e02:	018b      	lsls	r3, r1, #6
 8002e04:	4651      	mov	r1, sl
 8002e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	018a      	lsls	r2, r1, #6
 8002e0e:	4651      	mov	r1, sl
 8002e10:	1a54      	subs	r4, r2, r1
 8002e12:	4659      	mov	r1, fp
 8002e14:	eb63 0501 	sbc.w	r5, r3, r1
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	00eb      	lsls	r3, r5, #3
 8002e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e26:	00e2      	lsls	r2, r4, #3
 8002e28:	4614      	mov	r4, r2
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	4643      	mov	r3, r8
 8002e2e:	18e3      	adds	r3, r4, r3
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	464b      	mov	r3, r9
 8002e34:	eb45 0303 	adc.w	r3, r5, r3
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e46:	4629      	mov	r1, r5
 8002e48:	028b      	lsls	r3, r1, #10
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e50:	4621      	mov	r1, r4
 8002e52:	028a      	lsls	r2, r1, #10
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e66:	f7fd fa2b 	bl	80002c0 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4613      	mov	r3, r2
 8002e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_RCC_GetSysClockFreq+0x458>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0f1b      	lsrs	r3, r3, #28
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e92:	e003      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	37b8      	adds	r7, #184	; 0xb8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400

08002eb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e28d      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8083 	beq.w	8002fda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ed4:	4b94      	ldr	r3, [pc, #592]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d019      	beq.n	8002f14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ee0:	4b91      	ldr	r3, [pc, #580]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eec:	4b8e      	ldr	r3, [pc, #568]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef8:	d00c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4b8b      	ldr	r3, [pc, #556]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f02:	2b0c      	cmp	r3, #12
 8002f04:	d112      	bne.n	8002f2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b88      	ldr	r3, [pc, #544]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	4b84      	ldr	r3, [pc, #528]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05b      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x124>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d157      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e25a      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x90>
 8002f36:	4b7c      	ldr	r3, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7b      	ldr	r2, [pc, #492]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xcc>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0xb4>
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a75      	ldr	r2, [pc, #468]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a72      	ldr	r2, [pc, #456]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xcc>
 8002f68:	4b6f      	ldr	r3, [pc, #444]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6e      	ldr	r2, [pc, #440]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6b      	ldr	r2, [pc, #428]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fb5a 	bl	8001640 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fb56 	bl	8001640 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e21f      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xdc>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fb46 	bl	8001640 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fb42 	bl	8001640 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e20b      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b57      	ldr	r3, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x104>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d06f      	beq.n	80030c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fe6:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d017      	beq.n	8003022 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ff2:	4b4d      	ldr	r3, [pc, #308]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d105      	bne.n	800300a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d11c      	bne.n	8003050 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003016:	4b44      	ldr	r3, [pc, #272]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_RCC_OscConfig+0x186>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d001      	beq.n	800303a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e1d3      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4937      	ldr	r1, [pc, #220]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	e03a      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003058:	4b34      	ldr	r3, [pc, #208]	; (800312c <HAL_RCC_OscConfig+0x278>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe faef 	bl	8001640 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003066:	f7fe faeb 	bl	8001640 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e1b4      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003084:	4b28      	ldr	r3, [pc, #160]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4925      	ldr	r1, [pc, #148]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]
 8003098:	e015      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309a:	4b24      	ldr	r3, [pc, #144]	; (800312c <HAL_RCC_OscConfig+0x278>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe face 	bl	8001640 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a8:	f7fe faca 	bl	8001640 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e193      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d036      	beq.n	8003140 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <HAL_RCC_OscConfig+0x27c>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fe faae 	bl	8001640 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e8:	f7fe faaa 	bl	8001640 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e173      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 80030fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x234>
 8003106:	e01b      	b.n	8003140 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_RCC_OscConfig+0x27c>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310e:	f7fe fa97 	bl	8001640 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	e00e      	b.n	8003134 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003116:	f7fe fa93 	bl	8001640 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d907      	bls.n	8003134 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e15c      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
 8003128:	40023800 	.word	0x40023800
 800312c:	42470000 	.word	0x42470000
 8003130:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003134:	4b8a      	ldr	r3, [pc, #552]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ea      	bne.n	8003116 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8097 	beq.w	800327c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003152:	4b83      	ldr	r3, [pc, #524]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10f      	bne.n	800317e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	4b7f      	ldr	r3, [pc, #508]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a7e      	ldr	r2, [pc, #504]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316c:	6413      	str	r3, [r2, #64]	; 0x40
 800316e:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317a:	2301      	movs	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	4b79      	ldr	r3, [pc, #484]	; (8003364 <HAL_RCC_OscConfig+0x4b0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d118      	bne.n	80031bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCC_OscConfig+0x4b0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a75      	ldr	r2, [pc, #468]	; (8003364 <HAL_RCC_OscConfig+0x4b0>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003196:	f7fe fa53 	bl	8001640 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fe fa4f 	bl	8001640 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e118      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	4b6c      	ldr	r3, [pc, #432]	; (8003364 <HAL_RCC_OscConfig+0x4b0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x31e>
 80031c4:	4b66      	ldr	r3, [pc, #408]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a65      	ldr	r2, [pc, #404]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	e01c      	b.n	800320c <HAL_RCC_OscConfig+0x358>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x340>
 80031da:	4b61      	ldr	r3, [pc, #388]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a60      	ldr	r2, [pc, #384]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	4b5e      	ldr	r3, [pc, #376]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	4a5d      	ldr	r2, [pc, #372]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6713      	str	r3, [r2, #112]	; 0x70
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0x358>
 80031f4:	4b5a      	ldr	r3, [pc, #360]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a59      	ldr	r2, [pc, #356]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003200:	4b57      	ldr	r3, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a56      	ldr	r2, [pc, #344]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003206:	f023 0304 	bic.w	r3, r3, #4
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fe fa14 	bl	8001640 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321a:	e00a      	b.n	8003232 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fe fa10 	bl	8001640 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0d7      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003232:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0ee      	beq.n	800321c <HAL_RCC_OscConfig+0x368>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe f9fe 	bl	8001640 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe f9fa 	bl	8001640 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0c1      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325e:	4b40      	ldr	r3, [pc, #256]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1ee      	bne.n	8003248 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800326a:	7dfb      	ldrb	r3, [r7, #23]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	4a3a      	ldr	r2, [pc, #232]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80ad 	beq.w	80033e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b08      	cmp	r3, #8
 8003290:	d060      	beq.n	8003354 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d145      	bne.n	8003326 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCC_OscConfig+0x4b4>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe f9ce 	bl	8001640 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe f9ca 	bl	8001640 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e093      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	019b      	lsls	r3, r3, #6
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	085b      	lsrs	r3, r3, #1
 80032de:	3b01      	subs	r3, #1
 80032e0:	041b      	lsls	r3, r3, #16
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	491b      	ldr	r1, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x4b4>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe f99f 	bl	8001640 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe f99b 	bl	8001640 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e064      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x452>
 8003324:	e05c      	b.n	80033e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x4b4>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe f988 	bl	8001640 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe f984 	bl	8001640 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e04d      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x4ac>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x480>
 8003352:	e045      	b.n	80033e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e040      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
 8003360:	40023800 	.word	0x40023800
 8003364:	40007000 	.word	0x40007000
 8003368:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <HAL_RCC_OscConfig+0x538>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d030      	beq.n	80033dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d129      	bne.n	80033dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d122      	bne.n	80033dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800339c:	4013      	ands	r3, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d119      	bne.n	80033dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	085b      	lsrs	r3, r3, #1
 80033b4:	3b01      	subs	r3, #1
 80033b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d10f      	bne.n	80033dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d107      	bne.n	80033dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800

080033f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f839 	bl	800348e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 f9c0 	bl	80037b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d001      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e04e      	b.n	800355a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a23      	ldr	r2, [pc, #140]	; (8003568 <HAL_TIM_Base_Start_IT+0xc4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d022      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d01d      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_TIM_Base_Start_IT+0xc8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d018      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1e      	ldr	r2, [pc, #120]	; (8003570 <HAL_TIM_Base_Start_IT+0xcc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <HAL_TIM_Base_Start_IT+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00e      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <HAL_TIM_Base_Start_IT+0xd4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_TIM_Base_Start_IT+0xd8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x80>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_Base_Start_IT+0xdc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d111      	bne.n	8003548 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d010      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003546:	e007      	b.n	8003558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40010400 	.word	0x40010400
 800357c:	40014000 	.word	0x40014000
 8003580:	40001800 	.word	0x40001800

08003584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d020      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01b      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0202 	mvn.w	r2, #2
 80035b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8d2 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8c4 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8d5 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0204 	mvn.w	r2, #4
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8ac 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f89e 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f8af 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d020      	beq.n	8003680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0208 	mvn.w	r2, #8
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2204      	movs	r2, #4
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f886 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f878 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f889 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0210 	mvn.w	r2, #16
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2208      	movs	r2, #8
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f860 	bl	8003778 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f852 	bl	8003764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f863 	bl	800378c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0201 	mvn.w	r2, #1
 80036e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd fad4 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800370c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f906 	bl	8003920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00c      	beq.n	8003738 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f834 	bl	80037a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0220 	mvn.w	r2, #32
 8003754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8d8 	bl	800390c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a46      	ldr	r2, [pc, #280]	; (80038e0 <TIM_Base_SetConfig+0x12c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d00f      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <TIM_Base_SetConfig+0x130>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a42      	ldr	r2, [pc, #264]	; (80038e8 <TIM_Base_SetConfig+0x134>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a41      	ldr	r2, [pc, #260]	; (80038ec <TIM_Base_SetConfig+0x138>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a40      	ldr	r2, [pc, #256]	; (80038f0 <TIM_Base_SetConfig+0x13c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d108      	bne.n	8003806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a35      	ldr	r2, [pc, #212]	; (80038e0 <TIM_Base_SetConfig+0x12c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d027      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a32      	ldr	r2, [pc, #200]	; (80038e4 <TIM_Base_SetConfig+0x130>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d023      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <TIM_Base_SetConfig+0x134>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a30      	ldr	r2, [pc, #192]	; (80038ec <TIM_Base_SetConfig+0x138>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2f      	ldr	r2, [pc, #188]	; (80038f0 <TIM_Base_SetConfig+0x13c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d017      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <TIM_Base_SetConfig+0x140>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <TIM_Base_SetConfig+0x144>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <TIM_Base_SetConfig+0x148>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <TIM_Base_SetConfig+0x14c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <TIM_Base_SetConfig+0x150>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a29      	ldr	r2, [pc, #164]	; (8003908 <TIM_Base_SetConfig+0x154>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d108      	bne.n	8003878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <TIM_Base_SetConfig+0x12c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0xf8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <TIM_Base_SetConfig+0x13c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d103      	bne.n	80038b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f023 0201 	bic.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	611a      	str	r2, [r3, #16]
  }
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40010400 	.word	0x40010400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40014800 	.word	0x40014800
 8003900:	40001800 	.word	0x40001800
 8003904:	40001c00 	.word	0x40001c00
 8003908:	40002000 	.word	0x40002000

0800390c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e042      	b.n	80039cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd fce4 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	; 0x24
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f973 	bl	8003c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800398c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800399c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d175      	bne.n	8003ae0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_UART_Transmit+0x2c>
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e06e      	b.n	8003ae2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2221      	movs	r2, #33	; 0x21
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a12:	f7fd fe15 	bl	8001640 <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	88fa      	ldrh	r2, [r7, #6]
 8003a22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2c:	d108      	bne.n	8003a40 <HAL_UART_Transmit+0x6c>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d104      	bne.n	8003a40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	e003      	b.n	8003a48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a48:	e02e      	b.n	8003aa8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f848 	bl	8003aea <UART_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e03a      	b.n	8003ae2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3302      	adds	r3, #2
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	e007      	b.n	8003a9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	3301      	adds	r3, #1
 8003a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1cb      	bne.n	8003a4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f814 	bl	8003aea <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e006      	b.n	8003ae2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3720      	adds	r7, #32
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4613      	mov	r3, r2
 8003af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afa:	e03b      	b.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d037      	beq.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b04:	f7fd fd9c 	bl	8001640 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	6a3a      	ldr	r2, [r7, #32]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d302      	bcc.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e03a      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d020      	beq.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d01d      	beq.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d116      	bne.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f81d 	bl	8003b9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2208      	movs	r2, #8
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e00f      	b.n	8003b94 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d0b4      	beq.n	8003afc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b095      	sub	sp, #84	; 0x54
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc4:	643a      	str	r2, [r7, #64]	; 0x40
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e5      	bne.n	8003ba4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d119      	bne.n	8003c48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	e853 3f00 	ldrex	r3, [r3]
 8003c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f023 0310 	bic.w	r3, r3, #16
 8003c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c34:	61ba      	str	r2, [r7, #24]
 8003c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6979      	ldr	r1, [r7, #20]
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	613b      	str	r3, [r7, #16]
   return(result);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e5      	bne.n	8003c14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c56:	bf00      	nop
 8003c58:	3754      	adds	r7, #84	; 0x54
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b0c0      	sub	sp, #256	; 0x100
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c80:	68d9      	ldr	r1, [r3, #12]
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	ea40 0301 	orr.w	r3, r0, r1
 8003c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cbc:	f021 010c 	bic.w	r1, r1, #12
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cde:	6999      	ldr	r1, [r3, #24]
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	ea40 0301 	orr.w	r3, r0, r1
 8003cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b8f      	ldr	r3, [pc, #572]	; (8003f30 <UART_SetConfig+0x2cc>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d005      	beq.n	8003d04 <UART_SetConfig+0xa0>
 8003cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b8d      	ldr	r3, [pc, #564]	; (8003f34 <UART_SetConfig+0x2d0>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d104      	bne.n	8003d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d04:	f7fe fe60 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 8003d08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d0c:	e003      	b.n	8003d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0e:	f7fe fe47 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8003d12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d20:	f040 810c 	bne.w	8003f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d36:	4622      	mov	r2, r4
 8003d38:	462b      	mov	r3, r5
 8003d3a:	1891      	adds	r1, r2, r2
 8003d3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d3e:	415b      	adcs	r3, r3
 8003d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d46:	4621      	mov	r1, r4
 8003d48:	eb12 0801 	adds.w	r8, r2, r1
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	eb43 0901 	adc.w	r9, r3, r1
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d66:	4690      	mov	r8, r2
 8003d68:	4699      	mov	r9, r3
 8003d6a:	4623      	mov	r3, r4
 8003d6c:	eb18 0303 	adds.w	r3, r8, r3
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d74:	462b      	mov	r3, r5
 8003d76:	eb49 0303 	adc.w	r3, r9, r3
 8003d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d92:	460b      	mov	r3, r1
 8003d94:	18db      	adds	r3, r3, r3
 8003d96:	653b      	str	r3, [r7, #80]	; 0x50
 8003d98:	4613      	mov	r3, r2
 8003d9a:	eb42 0303 	adc.w	r3, r2, r3
 8003d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003da8:	f7fc fa8a 	bl	80002c0 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003db2:	fba3 2302 	umull	r2, r3, r3, r2
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	011c      	lsls	r4, r3, #4
 8003dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	1891      	adds	r1, r2, r2
 8003dd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dd4:	415b      	adcs	r3, r3
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ddc:	4641      	mov	r1, r8
 8003dde:	eb12 0a01 	adds.w	sl, r2, r1
 8003de2:	4649      	mov	r1, r9
 8003de4:	eb43 0b01 	adc.w	fp, r3, r1
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfc:	4692      	mov	sl, r2
 8003dfe:	469b      	mov	fp, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	eb1a 0303 	adds.w	r3, sl, r3
 8003e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	18db      	adds	r3, r3, r3
 8003e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2e:	4613      	mov	r3, r2
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	647b      	str	r3, [r7, #68]	; 0x44
 8003e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e3e:	f7fc fa3f 	bl	80002c0 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2264      	movs	r2, #100	; 0x64
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	1acb      	subs	r3, r1, r3
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e5e:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003e60:	fba3 2302 	umull	r2, r3, r3, r2
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e6c:	441c      	add	r4, r3
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e90:	4641      	mov	r1, r8
 8003e92:	1851      	adds	r1, r2, r1
 8003e94:	6339      	str	r1, [r7, #48]	; 0x30
 8003e96:	4649      	mov	r1, r9
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	00cb      	lsls	r3, r1, #3
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	00ca      	lsls	r2, r1, #3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003edc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	18db      	adds	r3, r3, r3
 8003ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eea:	4613      	mov	r3, r2
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003efa:	f7fc f9e1 	bl	80002c0 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003f04:	fba3 1302 	umull	r1, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	2164      	movs	r1, #100	; 0x64
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	3332      	adds	r3, #50	; 0x32
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <UART_SetConfig+0x2d4>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 0207 	and.w	r2, r3, #7
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4422      	add	r2, r4
 8003f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f2c:	e106      	b.n	800413c <UART_SetConfig+0x4d8>
 8003f2e:	bf00      	nop
 8003f30:	40011000 	.word	0x40011000
 8003f34:	40011400 	.word	0x40011400
 8003f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f40:	2200      	movs	r2, #0
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f4e:	4642      	mov	r2, r8
 8003f50:	464b      	mov	r3, r9
 8003f52:	1891      	adds	r1, r2, r2
 8003f54:	6239      	str	r1, [r7, #32]
 8003f56:	415b      	adcs	r3, r3
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f5e:	4641      	mov	r1, r8
 8003f60:	1854      	adds	r4, r2, r1
 8003f62:	4649      	mov	r1, r9
 8003f64:	eb43 0501 	adc.w	r5, r3, r1
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	00eb      	lsls	r3, r5, #3
 8003f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f76:	00e2      	lsls	r2, r4, #3
 8003f78:	4614      	mov	r4, r2
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	18e3      	adds	r3, r4, r3
 8003f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f84:	464b      	mov	r3, r9
 8003f86:	eb45 0303 	adc.w	r3, r5, r3
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003faa:	4629      	mov	r1, r5
 8003fac:	008b      	lsls	r3, r1, #2
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	008a      	lsls	r2, r1, #2
 8003fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fbc:	f7fc f980 	bl	80002c0 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4b60      	ldr	r3, [pc, #384]	; (8004148 <UART_SetConfig+0x4e4>)
 8003fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	011c      	lsls	r4, r3, #4
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	1891      	adds	r1, r2, r2
 8003fe6:	61b9      	str	r1, [r7, #24]
 8003fe8:	415b      	adcs	r3, r3
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	1851      	adds	r1, r2, r1
 8003ff4:	6139      	str	r1, [r7, #16]
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	414b      	adcs	r3, r1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004008:	4659      	mov	r1, fp
 800400a:	00cb      	lsls	r3, r1, #3
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004012:	4651      	mov	r1, sl
 8004014:	00ca      	lsls	r2, r1, #3
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	4603      	mov	r3, r0
 800401c:	4642      	mov	r2, r8
 800401e:	189b      	adds	r3, r3, r2
 8004020:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004024:	464b      	mov	r3, r9
 8004026:	460a      	mov	r2, r1
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	67bb      	str	r3, [r7, #120]	; 0x78
 800403a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004048:	4649      	mov	r1, r9
 800404a:	008b      	lsls	r3, r1, #2
 800404c:	4641      	mov	r1, r8
 800404e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004052:	4641      	mov	r1, r8
 8004054:	008a      	lsls	r2, r1, #2
 8004056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800405a:	f7fc f931 	bl	80002c0 <__aeabi_uldivmod>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4611      	mov	r1, r2
 8004064:	4b38      	ldr	r3, [pc, #224]	; (8004148 <UART_SetConfig+0x4e4>)
 8004066:	fba3 2301 	umull	r2, r3, r3, r1
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2264      	movs	r2, #100	; 0x64
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	1acb      	subs	r3, r1, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	; 0x32
 8004078:	4a33      	ldr	r2, [pc, #204]	; (8004148 <UART_SetConfig+0x4e4>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	441c      	add	r4, r3
 8004086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408a:	2200      	movs	r2, #0
 800408c:	673b      	str	r3, [r7, #112]	; 0x70
 800408e:	677a      	str	r2, [r7, #116]	; 0x74
 8004090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	415b      	adcs	r3, r3
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6039      	str	r1, [r7, #0]
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d6:	464b      	mov	r3, r9
 80040d8:	460a      	mov	r2, r1
 80040da:	eb42 0303 	adc.w	r3, r2, r3
 80040de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	663b      	str	r3, [r7, #96]	; 0x60
 80040ea:	667a      	str	r2, [r7, #100]	; 0x64
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040f8:	4649      	mov	r1, r9
 80040fa:	008b      	lsls	r3, r1, #2
 80040fc:	4641      	mov	r1, r8
 80040fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004102:	4641      	mov	r1, r8
 8004104:	008a      	lsls	r2, r1, #2
 8004106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800410a:	f7fc f8d9 	bl	80002c0 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <UART_SetConfig+0x4e4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <UART_SetConfig+0x4e4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4422      	add	r2, r4
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004142:	46bd      	mov	sp, r7
 8004144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004148:	51eb851f 	.word	0x51eb851f

0800414c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	601a      	str	r2, [r3, #0]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6892      	ldr	r2, [r2, #8]
 80041aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6852      	ldr	r2, [r2, #4]
 80041b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d103      	bne.n	80041c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	1e5a      	subs	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f2:	4b4e      	ldr	r3, [pc, #312]	; (800432c <xTaskIncrementTick+0x144>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 808e 	bne.w	8004318 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041fc:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <xTaskIncrementTick+0x148>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004204:	4a4a      	ldr	r2, [pc, #296]	; (8004330 <xTaskIncrementTick+0x148>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d120      	bne.n	8004252 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004210:	4b48      	ldr	r3, [pc, #288]	; (8004334 <xTaskIncrementTick+0x14c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <xTaskIncrementTick+0x46>
 8004230:	4b40      	ldr	r3, [pc, #256]	; (8004334 <xTaskIncrementTick+0x14c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b40      	ldr	r3, [pc, #256]	; (8004338 <xTaskIncrementTick+0x150>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3e      	ldr	r2, [pc, #248]	; (8004334 <xTaskIncrementTick+0x14c>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4a3e      	ldr	r2, [pc, #248]	; (8004338 <xTaskIncrementTick+0x150>)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b3d      	ldr	r3, [pc, #244]	; (800433c <xTaskIncrementTick+0x154>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a3c      	ldr	r2, [pc, #240]	; (800433c <xTaskIncrementTick+0x154>)
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	f000 f8df 	bl	8004410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004252:	4b3b      	ldr	r3, [pc, #236]	; (8004340 <xTaskIncrementTick+0x158>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	429a      	cmp	r2, r3
 800425a:	d348      	bcc.n	80042ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800425c:	4b35      	ldr	r3, [pc, #212]	; (8004334 <xTaskIncrementTick+0x14c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004266:	4b36      	ldr	r3, [pc, #216]	; (8004340 <xTaskIncrementTick+0x158>)
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	601a      	str	r2, [r3, #0]
					break;
 800426e:	e03e      	b.n	80042ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004270:	4b30      	ldr	r3, [pc, #192]	; (8004334 <xTaskIncrementTick+0x14c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d203      	bcs.n	8004290 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004288:	4a2d      	ldr	r2, [pc, #180]	; (8004340 <xTaskIncrementTick+0x158>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800428e:	e02e      	b.n	80042ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff7d 	bl	8004194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3318      	adds	r3, #24
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff74 	bl	8004194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	2201      	movs	r2, #1
 80042b2:	409a      	lsls	r2, r3
 80042b4:	4b23      	ldr	r3, [pc, #140]	; (8004344 <xTaskIncrementTick+0x15c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	4a22      	ldr	r2, [pc, #136]	; (8004344 <xTaskIncrementTick+0x15c>)
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <xTaskIncrementTick+0x160>)
 80042cc:	441a      	add	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	4610      	mov	r0, r2
 80042d6:	f7ff ff39 	bl	800414c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	4b1b      	ldr	r3, [pc, #108]	; (800434c <xTaskIncrementTick+0x164>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d3b9      	bcc.n	800425c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ec:	e7b6      	b.n	800425c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042ee:	4b17      	ldr	r3, [pc, #92]	; (800434c <xTaskIncrementTick+0x164>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f4:	4914      	ldr	r1, [pc, #80]	; (8004348 <xTaskIncrementTick+0x160>)
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d901      	bls.n	800430a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004306:	2301      	movs	r3, #1
 8004308:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800430a:	4b11      	ldr	r3, [pc, #68]	; (8004350 <xTaskIncrementTick+0x168>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004312:	2301      	movs	r3, #1
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e004      	b.n	8004322 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004318:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <xTaskIncrementTick+0x16c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <xTaskIncrementTick+0x16c>)
 8004320:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004322:	697b      	ldr	r3, [r7, #20]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	2000062c 	.word	0x2000062c
 8004330:	20000614 	.word	0x20000614
 8004334:	2000060c 	.word	0x2000060c
 8004338:	20000610 	.word	0x20000610
 800433c:	20000624 	.word	0x20000624
 8004340:	20000628 	.word	0x20000628
 8004344:	20000618 	.word	0x20000618
 8004348:	20000580 	.word	0x20000580
 800434c:	2000057c 	.word	0x2000057c
 8004350:	20000620 	.word	0x20000620
 8004354:	2000061c 	.word	0x2000061c

08004358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800435e:	4b27      	ldr	r3, [pc, #156]	; (80043fc <vTaskSwitchContext+0xa4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <vTaskSwitchContext+0xa8>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800436c:	e03f      	b.n	80043ee <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <vTaskSwitchContext+0xa8>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004374:	4b23      	ldr	r3, [pc, #140]	; (8004404 <vTaskSwitchContext+0xac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004382:	7afb      	ldrb	r3, [r7, #11]
 8004384:	f1c3 031f 	rsb	r3, r3, #31
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	491f      	ldr	r1, [pc, #124]	; (8004408 <vTaskSwitchContext+0xb0>)
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	607b      	str	r3, [r7, #4]
}
 80043b0:	bf00      	nop
 80043b2:	e7fe      	b.n	80043b2 <vTaskSwitchContext+0x5a>
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4a12      	ldr	r2, [pc, #72]	; (8004408 <vTaskSwitchContext+0xb0>)
 80043c0:	4413      	add	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3308      	adds	r3, #8
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d104      	bne.n	80043e4 <vTaskSwitchContext+0x8c>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <vTaskSwitchContext+0xb4>)
 80043ec:	6013      	str	r3, [r2, #0]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	2000062c 	.word	0x2000062c
 8004400:	20000620 	.word	0x20000620
 8004404:	20000618 	.word	0x20000618
 8004408:	20000580 	.word	0x20000580
 800440c:	2000057c 	.word	0x2000057c

08004410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <prvResetNextTaskUnblockTime+0x38>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <prvResetNextTaskUnblockTime+0x3c>)
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004428:	e008      	b.n	800443c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442a:	4b07      	ldr	r3, [pc, #28]	; (8004448 <prvResetNextTaskUnblockTime+0x38>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <prvResetNextTaskUnblockTime+0x3c>)
 800443a:	6013      	str	r3, [r2, #0]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	2000060c 	.word	0x2000060c
 800444c:	20000628 	.word	0x20000628

08004450 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <pxCurrentTCBConst2>)
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	f380 8809 	msr	PSP, r0
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8811 	msr	BASEPRI, r0
 800446a:	4770      	bx	lr
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst2>:
 8004470:	2000057c 	.word	0x2000057c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
	...

08004480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004480:	f3ef 8009 	mrs	r0, PSP
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <pxCurrentTCBConst>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f01e 0f10 	tst.w	lr, #16
 8004490:	bf08      	it	eq
 8004492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449a:	6010      	str	r0, [r2, #0]
 800449c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044a4:	f380 8811 	msr	BASEPRI, r0
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f7ff ff52 	bl	8004358 <vTaskSwitchContext>
 80044b4:	f04f 0000 	mov.w	r0, #0
 80044b8:	f380 8811 	msr	BASEPRI, r0
 80044bc:	bc09      	pop	{r0, r3}
 80044be:	6819      	ldr	r1, [r3, #0]
 80044c0:	6808      	ldr	r0, [r1, #0]
 80044c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c6:	f01e 0f10 	tst.w	lr, #16
 80044ca:	bf08      	it	eq
 80044cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044d0:	f380 8809 	msr	PSP, r0
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	f3af 8000 	nop.w

080044e0 <pxCurrentTCBConst>:
 80044e0:	2000057c 	.word	0x2000057c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
}
 8004500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004502:	f7ff fe71 	bl	80041e8 <xTaskIncrementTick>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800450c:	4b06      	ldr	r3, [pc, #24]	; (8004528 <SysTick_Handler+0x40>)
 800450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800451e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <siprintf>:
 800452c:	b40e      	push	{r1, r2, r3}
 800452e:	b500      	push	{lr}
 8004530:	b09c      	sub	sp, #112	; 0x70
 8004532:	ab1d      	add	r3, sp, #116	; 0x74
 8004534:	9002      	str	r0, [sp, #8]
 8004536:	9006      	str	r0, [sp, #24]
 8004538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800453c:	4809      	ldr	r0, [pc, #36]	; (8004564 <siprintf+0x38>)
 800453e:	9107      	str	r1, [sp, #28]
 8004540:	9104      	str	r1, [sp, #16]
 8004542:	4909      	ldr	r1, [pc, #36]	; (8004568 <siprintf+0x3c>)
 8004544:	f853 2b04 	ldr.w	r2, [r3], #4
 8004548:	9105      	str	r1, [sp, #20]
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	a902      	add	r1, sp, #8
 8004550:	f000 f9a0 	bl	8004894 <_svfiprintf_r>
 8004554:	9b02      	ldr	r3, [sp, #8]
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	b01c      	add	sp, #112	; 0x70
 800455c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004560:	b003      	add	sp, #12
 8004562:	4770      	bx	lr
 8004564:	20000060 	.word	0x20000060
 8004568:	ffff0208 	.word	0xffff0208

0800456c <memset>:
 800456c:	4402      	add	r2, r0
 800456e:	4603      	mov	r3, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <__errno>:
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <__errno+0x8>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000060 	.word	0x20000060

08004588 <__libc_init_array>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	4d0d      	ldr	r5, [pc, #52]	; (80045c0 <__libc_init_array+0x38>)
 800458c:	4c0d      	ldr	r4, [pc, #52]	; (80045c4 <__libc_init_array+0x3c>)
 800458e:	1b64      	subs	r4, r4, r5
 8004590:	10a4      	asrs	r4, r4, #2
 8004592:	2600      	movs	r6, #0
 8004594:	42a6      	cmp	r6, r4
 8004596:	d109      	bne.n	80045ac <__libc_init_array+0x24>
 8004598:	4d0b      	ldr	r5, [pc, #44]	; (80045c8 <__libc_init_array+0x40>)
 800459a:	4c0c      	ldr	r4, [pc, #48]	; (80045cc <__libc_init_array+0x44>)
 800459c:	f000 fc6a 	bl	8004e74 <_init>
 80045a0:	1b64      	subs	r4, r4, r5
 80045a2:	10a4      	asrs	r4, r4, #2
 80045a4:	2600      	movs	r6, #0
 80045a6:	42a6      	cmp	r6, r4
 80045a8:	d105      	bne.n	80045b6 <__libc_init_array+0x2e>
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b0:	4798      	blx	r3
 80045b2:	3601      	adds	r6, #1
 80045b4:	e7ee      	b.n	8004594 <__libc_init_array+0xc>
 80045b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ba:	4798      	blx	r3
 80045bc:	3601      	adds	r6, #1
 80045be:	e7f2      	b.n	80045a6 <__libc_init_array+0x1e>
 80045c0:	08005c4c 	.word	0x08005c4c
 80045c4:	08005c4c 	.word	0x08005c4c
 80045c8:	08005c4c 	.word	0x08005c4c
 80045cc:	08005c50 	.word	0x08005c50

080045d0 <__retarget_lock_acquire_recursive>:
 80045d0:	4770      	bx	lr

080045d2 <__retarget_lock_release_recursive>:
 80045d2:	4770      	bx	lr

080045d4 <memcpy>:
 80045d4:	440a      	add	r2, r1
 80045d6:	4291      	cmp	r1, r2
 80045d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045dc:	d100      	bne.n	80045e0 <memcpy+0xc>
 80045de:	4770      	bx	lr
 80045e0:	b510      	push	{r4, lr}
 80045e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045ea:	4291      	cmp	r1, r2
 80045ec:	d1f9      	bne.n	80045e2 <memcpy+0xe>
 80045ee:	bd10      	pop	{r4, pc}

080045f0 <_free_r>:
 80045f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045f2:	2900      	cmp	r1, #0
 80045f4:	d044      	beq.n	8004680 <_free_r+0x90>
 80045f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fa:	9001      	str	r0, [sp, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004602:	bfb8      	it	lt
 8004604:	18e4      	addlt	r4, r4, r3
 8004606:	f000 f8df 	bl	80047c8 <__malloc_lock>
 800460a:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <_free_r+0x94>)
 800460c:	9801      	ldr	r0, [sp, #4]
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b933      	cbnz	r3, 8004620 <_free_r+0x30>
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	b003      	add	sp, #12
 8004618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800461c:	f000 b8da 	b.w	80047d4 <__malloc_unlock>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d908      	bls.n	8004636 <_free_r+0x46>
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	1961      	adds	r1, r4, r5
 8004628:	428b      	cmp	r3, r1
 800462a:	bf01      	itttt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	1949      	addeq	r1, r1, r5
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	e7ed      	b.n	8004612 <_free_r+0x22>
 8004636:	461a      	mov	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b10b      	cbz	r3, 8004640 <_free_r+0x50>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x46>
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	1855      	adds	r5, r2, r1
 8004644:	42a5      	cmp	r5, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x70>
 8004648:	6824      	ldr	r4, [r4, #0]
 800464a:	4421      	add	r1, r4
 800464c:	1854      	adds	r4, r2, r1
 800464e:	42a3      	cmp	r3, r4
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	d1e0      	bne.n	8004616 <_free_r+0x26>
 8004654:	681c      	ldr	r4, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	6053      	str	r3, [r2, #4]
 800465a:	440c      	add	r4, r1
 800465c:	6014      	str	r4, [r2, #0]
 800465e:	e7da      	b.n	8004616 <_free_r+0x26>
 8004660:	d902      	bls.n	8004668 <_free_r+0x78>
 8004662:	230c      	movs	r3, #12
 8004664:	6003      	str	r3, [r0, #0]
 8004666:	e7d6      	b.n	8004616 <_free_r+0x26>
 8004668:	6825      	ldr	r5, [r4, #0]
 800466a:	1961      	adds	r1, r4, r5
 800466c:	428b      	cmp	r3, r1
 800466e:	bf04      	itt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	bf04      	itt	eq
 8004678:	1949      	addeq	r1, r1, r5
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	6054      	str	r4, [r2, #4]
 800467e:	e7ca      	b.n	8004616 <_free_r+0x26>
 8004680:	b003      	add	sp, #12
 8004682:	bd30      	pop	{r4, r5, pc}
 8004684:	20000770 	.word	0x20000770

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0e      	ldr	r6, [pc, #56]	; (80046c4 <sbrk_aligned+0x3c>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fba6 	bl	8004de4 <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fba1 	bl	8004de4 <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d00a      	beq.n	80046bc <sbrk_aligned+0x34>
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	f024 0403 	bic.w	r4, r4, #3
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d007      	beq.n	80046c0 <sbrk_aligned+0x38>
 80046b0:	1a21      	subs	r1, r4, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fb96 	bl	8004de4 <_sbrk_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d101      	bne.n	80046c0 <sbrk_aligned+0x38>
 80046bc:	f04f 34ff 	mov.w	r4, #4294967295
 80046c0:	4620      	mov	r0, r4
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	20000774 	.word	0x20000774

080046c8 <_malloc_r>:
 80046c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046cc:	1ccd      	adds	r5, r1, #3
 80046ce:	f025 0503 	bic.w	r5, r5, #3
 80046d2:	3508      	adds	r5, #8
 80046d4:	2d0c      	cmp	r5, #12
 80046d6:	bf38      	it	cc
 80046d8:	250c      	movcc	r5, #12
 80046da:	2d00      	cmp	r5, #0
 80046dc:	4607      	mov	r7, r0
 80046de:	db01      	blt.n	80046e4 <_malloc_r+0x1c>
 80046e0:	42a9      	cmp	r1, r5
 80046e2:	d905      	bls.n	80046f0 <_malloc_r+0x28>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	2600      	movs	r6, #0
 80046ea:	4630      	mov	r0, r6
 80046ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047c4 <_malloc_r+0xfc>
 80046f4:	f000 f868 	bl	80047c8 <__malloc_lock>
 80046f8:	f8d8 3000 	ldr.w	r3, [r8]
 80046fc:	461c      	mov	r4, r3
 80046fe:	bb5c      	cbnz	r4, 8004758 <_malloc_r+0x90>
 8004700:	4629      	mov	r1, r5
 8004702:	4638      	mov	r0, r7
 8004704:	f7ff ffc0 	bl	8004688 <sbrk_aligned>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	4604      	mov	r4, r0
 800470c:	d155      	bne.n	80047ba <_malloc_r+0xf2>
 800470e:	f8d8 4000 	ldr.w	r4, [r8]
 8004712:	4626      	mov	r6, r4
 8004714:	2e00      	cmp	r6, #0
 8004716:	d145      	bne.n	80047a4 <_malloc_r+0xdc>
 8004718:	2c00      	cmp	r4, #0
 800471a:	d048      	beq.n	80047ae <_malloc_r+0xe6>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	4631      	mov	r1, r6
 8004720:	4638      	mov	r0, r7
 8004722:	eb04 0903 	add.w	r9, r4, r3
 8004726:	f000 fb5d 	bl	8004de4 <_sbrk_r>
 800472a:	4581      	cmp	r9, r0
 800472c:	d13f      	bne.n	80047ae <_malloc_r+0xe6>
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	1a6d      	subs	r5, r5, r1
 8004732:	4629      	mov	r1, r5
 8004734:	4638      	mov	r0, r7
 8004736:	f7ff ffa7 	bl	8004688 <sbrk_aligned>
 800473a:	3001      	adds	r0, #1
 800473c:	d037      	beq.n	80047ae <_malloc_r+0xe6>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	442b      	add	r3, r5
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	f8d8 3000 	ldr.w	r3, [r8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d038      	beq.n	80047be <_malloc_r+0xf6>
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	42a2      	cmp	r2, r4
 8004750:	d12b      	bne.n	80047aa <_malloc_r+0xe2>
 8004752:	2200      	movs	r2, #0
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	e00f      	b.n	8004778 <_malloc_r+0xb0>
 8004758:	6822      	ldr	r2, [r4, #0]
 800475a:	1b52      	subs	r2, r2, r5
 800475c:	d41f      	bmi.n	800479e <_malloc_r+0xd6>
 800475e:	2a0b      	cmp	r2, #11
 8004760:	d917      	bls.n	8004792 <_malloc_r+0xca>
 8004762:	1961      	adds	r1, r4, r5
 8004764:	42a3      	cmp	r3, r4
 8004766:	6025      	str	r5, [r4, #0]
 8004768:	bf18      	it	ne
 800476a:	6059      	strne	r1, [r3, #4]
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	bf08      	it	eq
 8004770:	f8c8 1000 	streq.w	r1, [r8]
 8004774:	5162      	str	r2, [r4, r5]
 8004776:	604b      	str	r3, [r1, #4]
 8004778:	4638      	mov	r0, r7
 800477a:	f104 060b 	add.w	r6, r4, #11
 800477e:	f000 f829 	bl	80047d4 <__malloc_unlock>
 8004782:	f026 0607 	bic.w	r6, r6, #7
 8004786:	1d23      	adds	r3, r4, #4
 8004788:	1af2      	subs	r2, r6, r3
 800478a:	d0ae      	beq.n	80046ea <_malloc_r+0x22>
 800478c:	1b9b      	subs	r3, r3, r6
 800478e:	50a3      	str	r3, [r4, r2]
 8004790:	e7ab      	b.n	80046ea <_malloc_r+0x22>
 8004792:	42a3      	cmp	r3, r4
 8004794:	6862      	ldr	r2, [r4, #4]
 8004796:	d1dd      	bne.n	8004754 <_malloc_r+0x8c>
 8004798:	f8c8 2000 	str.w	r2, [r8]
 800479c:	e7ec      	b.n	8004778 <_malloc_r+0xb0>
 800479e:	4623      	mov	r3, r4
 80047a0:	6864      	ldr	r4, [r4, #4]
 80047a2:	e7ac      	b.n	80046fe <_malloc_r+0x36>
 80047a4:	4634      	mov	r4, r6
 80047a6:	6876      	ldr	r6, [r6, #4]
 80047a8:	e7b4      	b.n	8004714 <_malloc_r+0x4c>
 80047aa:	4613      	mov	r3, r2
 80047ac:	e7cc      	b.n	8004748 <_malloc_r+0x80>
 80047ae:	230c      	movs	r3, #12
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4638      	mov	r0, r7
 80047b4:	f000 f80e 	bl	80047d4 <__malloc_unlock>
 80047b8:	e797      	b.n	80046ea <_malloc_r+0x22>
 80047ba:	6025      	str	r5, [r4, #0]
 80047bc:	e7dc      	b.n	8004778 <_malloc_r+0xb0>
 80047be:	605b      	str	r3, [r3, #4]
 80047c0:	deff      	udf	#255	; 0xff
 80047c2:	bf00      	nop
 80047c4:	20000770 	.word	0x20000770

080047c8 <__malloc_lock>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__malloc_lock+0x8>)
 80047ca:	f7ff bf01 	b.w	80045d0 <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	2000076c 	.word	0x2000076c

080047d4 <__malloc_unlock>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__malloc_unlock+0x8>)
 80047d6:	f7ff befc 	b.w	80045d2 <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	2000076c 	.word	0x2000076c

080047e0 <__ssputs_r>:
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	688e      	ldr	r6, [r1, #8]
 80047e6:	461f      	mov	r7, r3
 80047e8:	42be      	cmp	r6, r7
 80047ea:	680b      	ldr	r3, [r1, #0]
 80047ec:	4682      	mov	sl, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	4690      	mov	r8, r2
 80047f2:	d82c      	bhi.n	800484e <__ssputs_r+0x6e>
 80047f4:	898a      	ldrh	r2, [r1, #12]
 80047f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047fa:	d026      	beq.n	800484a <__ssputs_r+0x6a>
 80047fc:	6965      	ldr	r5, [r4, #20]
 80047fe:	6909      	ldr	r1, [r1, #16]
 8004800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004804:	eba3 0901 	sub.w	r9, r3, r1
 8004808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800480c:	1c7b      	adds	r3, r7, #1
 800480e:	444b      	add	r3, r9
 8004810:	106d      	asrs	r5, r5, #1
 8004812:	429d      	cmp	r5, r3
 8004814:	bf38      	it	cc
 8004816:	461d      	movcc	r5, r3
 8004818:	0553      	lsls	r3, r2, #21
 800481a:	d527      	bpl.n	800486c <__ssputs_r+0x8c>
 800481c:	4629      	mov	r1, r5
 800481e:	f7ff ff53 	bl	80046c8 <_malloc_r>
 8004822:	4606      	mov	r6, r0
 8004824:	b360      	cbz	r0, 8004880 <__ssputs_r+0xa0>
 8004826:	6921      	ldr	r1, [r4, #16]
 8004828:	464a      	mov	r2, r9
 800482a:	f7ff fed3 	bl	80045d4 <memcpy>
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004838:	81a3      	strh	r3, [r4, #12]
 800483a:	6126      	str	r6, [r4, #16]
 800483c:	6165      	str	r5, [r4, #20]
 800483e:	444e      	add	r6, r9
 8004840:	eba5 0509 	sub.w	r5, r5, r9
 8004844:	6026      	str	r6, [r4, #0]
 8004846:	60a5      	str	r5, [r4, #8]
 8004848:	463e      	mov	r6, r7
 800484a:	42be      	cmp	r6, r7
 800484c:	d900      	bls.n	8004850 <__ssputs_r+0x70>
 800484e:	463e      	mov	r6, r7
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	4632      	mov	r2, r6
 8004854:	4641      	mov	r1, r8
 8004856:	f000 faab 	bl	8004db0 <memmove>
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	1b9b      	subs	r3, r3, r6
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	4433      	add	r3, r6
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	2000      	movs	r0, #0
 8004868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486c:	462a      	mov	r2, r5
 800486e:	f000 fac9 	bl	8004e04 <_realloc_r>
 8004872:	4606      	mov	r6, r0
 8004874:	2800      	cmp	r0, #0
 8004876:	d1e0      	bne.n	800483a <__ssputs_r+0x5a>
 8004878:	6921      	ldr	r1, [r4, #16]
 800487a:	4650      	mov	r0, sl
 800487c:	f7ff feb8 	bl	80045f0 <_free_r>
 8004880:	230c      	movs	r3, #12
 8004882:	f8ca 3000 	str.w	r3, [sl]
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	f04f 30ff 	mov.w	r0, #4294967295
 8004892:	e7e9      	b.n	8004868 <__ssputs_r+0x88>

08004894 <_svfiprintf_r>:
 8004894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	4698      	mov	r8, r3
 800489a:	898b      	ldrh	r3, [r1, #12]
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	b09d      	sub	sp, #116	; 0x74
 80048a0:	4607      	mov	r7, r0
 80048a2:	460d      	mov	r5, r1
 80048a4:	4614      	mov	r4, r2
 80048a6:	d50e      	bpl.n	80048c6 <_svfiprintf_r+0x32>
 80048a8:	690b      	ldr	r3, [r1, #16]
 80048aa:	b963      	cbnz	r3, 80048c6 <_svfiprintf_r+0x32>
 80048ac:	2140      	movs	r1, #64	; 0x40
 80048ae:	f7ff ff0b 	bl	80046c8 <_malloc_r>
 80048b2:	6028      	str	r0, [r5, #0]
 80048b4:	6128      	str	r0, [r5, #16]
 80048b6:	b920      	cbnz	r0, 80048c2 <_svfiprintf_r+0x2e>
 80048b8:	230c      	movs	r3, #12
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	e0d0      	b.n	8004a64 <_svfiprintf_r+0x1d0>
 80048c2:	2340      	movs	r3, #64	; 0x40
 80048c4:	616b      	str	r3, [r5, #20]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ca:	2320      	movs	r3, #32
 80048cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d4:	2330      	movs	r3, #48	; 0x30
 80048d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a7c <_svfiprintf_r+0x1e8>
 80048da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048de:	f04f 0901 	mov.w	r9, #1
 80048e2:	4623      	mov	r3, r4
 80048e4:	469a      	mov	sl, r3
 80048e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ea:	b10a      	cbz	r2, 80048f0 <_svfiprintf_r+0x5c>
 80048ec:	2a25      	cmp	r2, #37	; 0x25
 80048ee:	d1f9      	bne.n	80048e4 <_svfiprintf_r+0x50>
 80048f0:	ebba 0b04 	subs.w	fp, sl, r4
 80048f4:	d00b      	beq.n	800490e <_svfiprintf_r+0x7a>
 80048f6:	465b      	mov	r3, fp
 80048f8:	4622      	mov	r2, r4
 80048fa:	4629      	mov	r1, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ff6f 	bl	80047e0 <__ssputs_r>
 8004902:	3001      	adds	r0, #1
 8004904:	f000 80a9 	beq.w	8004a5a <_svfiprintf_r+0x1c6>
 8004908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800490a:	445a      	add	r2, fp
 800490c:	9209      	str	r2, [sp, #36]	; 0x24
 800490e:	f89a 3000 	ldrb.w	r3, [sl]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80a1 	beq.w	8004a5a <_svfiprintf_r+0x1c6>
 8004918:	2300      	movs	r3, #0
 800491a:	f04f 32ff 	mov.w	r2, #4294967295
 800491e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004922:	f10a 0a01 	add.w	sl, sl, #1
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	9307      	str	r3, [sp, #28]
 800492a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800492e:	931a      	str	r3, [sp, #104]	; 0x68
 8004930:	4654      	mov	r4, sl
 8004932:	2205      	movs	r2, #5
 8004934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004938:	4850      	ldr	r0, [pc, #320]	; (8004a7c <_svfiprintf_r+0x1e8>)
 800493a:	f7fb fc71 	bl	8000220 <memchr>
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	b9d8      	cbnz	r0, 800497a <_svfiprintf_r+0xe6>
 8004942:	06d0      	lsls	r0, r2, #27
 8004944:	bf44      	itt	mi
 8004946:	2320      	movmi	r3, #32
 8004948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800494c:	0711      	lsls	r1, r2, #28
 800494e:	bf44      	itt	mi
 8004950:	232b      	movmi	r3, #43	; 0x2b
 8004952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004956:	f89a 3000 	ldrb.w	r3, [sl]
 800495a:	2b2a      	cmp	r3, #42	; 0x2a
 800495c:	d015      	beq.n	800498a <_svfiprintf_r+0xf6>
 800495e:	9a07      	ldr	r2, [sp, #28]
 8004960:	4654      	mov	r4, sl
 8004962:	2000      	movs	r0, #0
 8004964:	f04f 0c0a 	mov.w	ip, #10
 8004968:	4621      	mov	r1, r4
 800496a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800496e:	3b30      	subs	r3, #48	; 0x30
 8004970:	2b09      	cmp	r3, #9
 8004972:	d94d      	bls.n	8004a10 <_svfiprintf_r+0x17c>
 8004974:	b1b0      	cbz	r0, 80049a4 <_svfiprintf_r+0x110>
 8004976:	9207      	str	r2, [sp, #28]
 8004978:	e014      	b.n	80049a4 <_svfiprintf_r+0x110>
 800497a:	eba0 0308 	sub.w	r3, r0, r8
 800497e:	fa09 f303 	lsl.w	r3, r9, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	9304      	str	r3, [sp, #16]
 8004986:	46a2      	mov	sl, r4
 8004988:	e7d2      	b.n	8004930 <_svfiprintf_r+0x9c>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	1d19      	adds	r1, r3, #4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	9103      	str	r1, [sp, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	bfbb      	ittet	lt
 8004996:	425b      	neglt	r3, r3
 8004998:	f042 0202 	orrlt.w	r2, r2, #2
 800499c:	9307      	strge	r3, [sp, #28]
 800499e:	9307      	strlt	r3, [sp, #28]
 80049a0:	bfb8      	it	lt
 80049a2:	9204      	strlt	r2, [sp, #16]
 80049a4:	7823      	ldrb	r3, [r4, #0]
 80049a6:	2b2e      	cmp	r3, #46	; 0x2e
 80049a8:	d10c      	bne.n	80049c4 <_svfiprintf_r+0x130>
 80049aa:	7863      	ldrb	r3, [r4, #1]
 80049ac:	2b2a      	cmp	r3, #42	; 0x2a
 80049ae:	d134      	bne.n	8004a1a <_svfiprintf_r+0x186>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	9203      	str	r2, [sp, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bfb8      	it	lt
 80049bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80049c0:	3402      	adds	r4, #2
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004a8c <_svfiprintf_r+0x1f8>
 80049c8:	7821      	ldrb	r1, [r4, #0]
 80049ca:	2203      	movs	r2, #3
 80049cc:	4650      	mov	r0, sl
 80049ce:	f7fb fc27 	bl	8000220 <memchr>
 80049d2:	b138      	cbz	r0, 80049e4 <_svfiprintf_r+0x150>
 80049d4:	9b04      	ldr	r3, [sp, #16]
 80049d6:	eba0 000a 	sub.w	r0, r0, sl
 80049da:	2240      	movs	r2, #64	; 0x40
 80049dc:	4082      	lsls	r2, r0
 80049de:	4313      	orrs	r3, r2
 80049e0:	3401      	adds	r4, #1
 80049e2:	9304      	str	r3, [sp, #16]
 80049e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e8:	4825      	ldr	r0, [pc, #148]	; (8004a80 <_svfiprintf_r+0x1ec>)
 80049ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ee:	2206      	movs	r2, #6
 80049f0:	f7fb fc16 	bl	8000220 <memchr>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d038      	beq.n	8004a6a <_svfiprintf_r+0x1d6>
 80049f8:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <_svfiprintf_r+0x1f0>)
 80049fa:	bb1b      	cbnz	r3, 8004a44 <_svfiprintf_r+0x1b0>
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	3307      	adds	r3, #7
 8004a00:	f023 0307 	bic.w	r3, r3, #7
 8004a04:	3308      	adds	r3, #8
 8004a06:	9303      	str	r3, [sp, #12]
 8004a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0a:	4433      	add	r3, r6
 8004a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0e:	e768      	b.n	80048e2 <_svfiprintf_r+0x4e>
 8004a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a14:	460c      	mov	r4, r1
 8004a16:	2001      	movs	r0, #1
 8004a18:	e7a6      	b.n	8004968 <_svfiprintf_r+0xd4>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	3401      	adds	r4, #1
 8004a1e:	9305      	str	r3, [sp, #20]
 8004a20:	4619      	mov	r1, r3
 8004a22:	f04f 0c0a 	mov.w	ip, #10
 8004a26:	4620      	mov	r0, r4
 8004a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a2c:	3a30      	subs	r2, #48	; 0x30
 8004a2e:	2a09      	cmp	r2, #9
 8004a30:	d903      	bls.n	8004a3a <_svfiprintf_r+0x1a6>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0c6      	beq.n	80049c4 <_svfiprintf_r+0x130>
 8004a36:	9105      	str	r1, [sp, #20]
 8004a38:	e7c4      	b.n	80049c4 <_svfiprintf_r+0x130>
 8004a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a3e:	4604      	mov	r4, r0
 8004a40:	2301      	movs	r3, #1
 8004a42:	e7f0      	b.n	8004a26 <_svfiprintf_r+0x192>
 8004a44:	ab03      	add	r3, sp, #12
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	462a      	mov	r2, r5
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <_svfiprintf_r+0x1f4>)
 8004a4c:	a904      	add	r1, sp, #16
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f3af 8000 	nop.w
 8004a54:	1c42      	adds	r2, r0, #1
 8004a56:	4606      	mov	r6, r0
 8004a58:	d1d6      	bne.n	8004a08 <_svfiprintf_r+0x174>
 8004a5a:	89ab      	ldrh	r3, [r5, #12]
 8004a5c:	065b      	lsls	r3, r3, #25
 8004a5e:	f53f af2d 	bmi.w	80048bc <_svfiprintf_r+0x28>
 8004a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a64:	b01d      	add	sp, #116	; 0x74
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	ab03      	add	r3, sp, #12
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <_svfiprintf_r+0x1f4>)
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	4638      	mov	r0, r7
 8004a76:	f000 f879 	bl	8004b6c <_printf_i>
 8004a7a:	e7eb      	b.n	8004a54 <_svfiprintf_r+0x1c0>
 8004a7c:	08005c10 	.word	0x08005c10
 8004a80:	08005c1a 	.word	0x08005c1a
 8004a84:	00000000 	.word	0x00000000
 8004a88:	080047e1 	.word	0x080047e1
 8004a8c:	08005c16 	.word	0x08005c16

08004a90 <_printf_common>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	4616      	mov	r6, r2
 8004a96:	4699      	mov	r9, r3
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bfb8      	it	lt
 8004aa4:	4613      	movlt	r3, r2
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aac:	4607      	mov	r7, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_printf_common+0x26>
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	0699      	lsls	r1, r3, #26
 8004aba:	bf42      	ittt	mi
 8004abc:	6833      	ldrmi	r3, [r6, #0]
 8004abe:	3302      	addmi	r3, #2
 8004ac0:	6033      	strmi	r3, [r6, #0]
 8004ac2:	6825      	ldr	r5, [r4, #0]
 8004ac4:	f015 0506 	ands.w	r5, r5, #6
 8004ac8:	d106      	bne.n	8004ad8 <_printf_common+0x48>
 8004aca:	f104 0a19 	add.w	sl, r4, #25
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dc26      	bgt.n	8004b26 <_printf_common+0x96>
 8004ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004adc:	1e13      	subs	r3, r2, #0
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	bf18      	it	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	0692      	lsls	r2, r2, #26
 8004ae6:	d42b      	bmi.n	8004b40 <_printf_common+0xb0>
 8004ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aec:	4649      	mov	r1, r9
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	3001      	adds	r0, #1
 8004af4:	d01e      	beq.n	8004b34 <_printf_common+0xa4>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	f003 0306 	and.w	r3, r3, #6
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	bf02      	ittt	eq
 8004b02:	68e5      	ldreq	r5, [r4, #12]
 8004b04:	6833      	ldreq	r3, [r6, #0]
 8004b06:	1aed      	subeq	r5, r5, r3
 8004b08:	68a3      	ldr	r3, [r4, #8]
 8004b0a:	bf0c      	ite	eq
 8004b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b10:	2500      	movne	r5, #0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bfc4      	itt	gt
 8004b16:	1a9b      	subgt	r3, r3, r2
 8004b18:	18ed      	addgt	r5, r5, r3
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	341a      	adds	r4, #26
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	d11a      	bne.n	8004b58 <_printf_common+0xc8>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e008      	b.n	8004b38 <_printf_common+0xa8>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c0      	blx	r8
 8004b30:	3001      	adds	r0, #1
 8004b32:	d103      	bne.n	8004b3c <_printf_common+0xac>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7c6      	b.n	8004ace <_printf_common+0x3e>
 8004b40:	18e1      	adds	r1, r4, r3
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	2030      	movs	r0, #48	; 0x30
 8004b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b4a:	4422      	add	r2, r4
 8004b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b54:	3302      	adds	r3, #2
 8004b56:	e7c7      	b.n	8004ae8 <_printf_common+0x58>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c0      	blx	r8
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa4>
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7d9      	b.n	8004b1e <_printf_common+0x8e>
	...

08004b6c <_printf_i>:
 8004b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	7e0f      	ldrb	r7, [r1, #24]
 8004b72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b74:	2f78      	cmp	r7, #120	; 0x78
 8004b76:	4691      	mov	r9, r2
 8004b78:	4680      	mov	r8, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b82:	d807      	bhi.n	8004b94 <_printf_i+0x28>
 8004b84:	2f62      	cmp	r7, #98	; 0x62
 8004b86:	d80a      	bhi.n	8004b9e <_printf_i+0x32>
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	f000 80d4 	beq.w	8004d36 <_printf_i+0x1ca>
 8004b8e:	2f58      	cmp	r7, #88	; 0x58
 8004b90:	f000 80c0 	beq.w	8004d14 <_printf_i+0x1a8>
 8004b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b9c:	e03a      	b.n	8004c14 <_printf_i+0xa8>
 8004b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba2:	2b15      	cmp	r3, #21
 8004ba4:	d8f6      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba6:	a101      	add	r1, pc, #4	; (adr r1, 8004bac <_printf_i+0x40>)
 8004ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004b95 	.word	0x08004b95
 8004bb8:	08004b95 	.word	0x08004b95
 8004bbc:	08004b95 	.word	0x08004b95
 8004bc0:	08004b95 	.word	0x08004b95
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b95 	.word	0x08004b95
 8004bcc:	08004b95 	.word	0x08004b95
 8004bd0:	08004b95 	.word	0x08004b95
 8004bd4:	08004b95 	.word	0x08004b95
 8004bd8:	08004d1d 	.word	0x08004d1d
 8004bdc:	08004c45 	.word	0x08004c45
 8004be0:	08004cd7 	.word	0x08004cd7
 8004be4:	08004b95 	.word	0x08004b95
 8004be8:	08004b95 	.word	0x08004b95
 8004bec:	08004d3f 	.word	0x08004d3f
 8004bf0:	08004b95 	.word	0x08004b95
 8004bf4:	08004c45 	.word	0x08004c45
 8004bf8:	08004b95 	.word	0x08004b95
 8004bfc:	08004b95 	.word	0x08004b95
 8004c00:	08004cdf 	.word	0x08004cdf
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	602a      	str	r2, [r5, #0]
 8004c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c14:	2301      	movs	r3, #1
 8004c16:	e09f      	b.n	8004d58 <_printf_i+0x1ec>
 8004c18:	6820      	ldr	r0, [r4, #0]
 8004c1a:	682b      	ldr	r3, [r5, #0]
 8004c1c:	0607      	lsls	r7, r0, #24
 8004c1e:	f103 0104 	add.w	r1, r3, #4
 8004c22:	6029      	str	r1, [r5, #0]
 8004c24:	d501      	bpl.n	8004c2a <_printf_i+0xbe>
 8004c26:	681e      	ldr	r6, [r3, #0]
 8004c28:	e003      	b.n	8004c32 <_printf_i+0xc6>
 8004c2a:	0646      	lsls	r6, r0, #25
 8004c2c:	d5fb      	bpl.n	8004c26 <_printf_i+0xba>
 8004c2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c32:	2e00      	cmp	r6, #0
 8004c34:	da03      	bge.n	8004c3e <_printf_i+0xd2>
 8004c36:	232d      	movs	r3, #45	; 0x2d
 8004c38:	4276      	negs	r6, r6
 8004c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c3e:	485a      	ldr	r0, [pc, #360]	; (8004da8 <_printf_i+0x23c>)
 8004c40:	230a      	movs	r3, #10
 8004c42:	e012      	b.n	8004c6a <_printf_i+0xfe>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	1d19      	adds	r1, r3, #4
 8004c4a:	6029      	str	r1, [r5, #0]
 8004c4c:	0605      	lsls	r5, r0, #24
 8004c4e:	d501      	bpl.n	8004c54 <_printf_i+0xe8>
 8004c50:	681e      	ldr	r6, [r3, #0]
 8004c52:	e002      	b.n	8004c5a <_printf_i+0xee>
 8004c54:	0641      	lsls	r1, r0, #25
 8004c56:	d5fb      	bpl.n	8004c50 <_printf_i+0xe4>
 8004c58:	881e      	ldrh	r6, [r3, #0]
 8004c5a:	4853      	ldr	r0, [pc, #332]	; (8004da8 <_printf_i+0x23c>)
 8004c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8004c5e:	bf0c      	ite	eq
 8004c60:	2308      	moveq	r3, #8
 8004c62:	230a      	movne	r3, #10
 8004c64:	2100      	movs	r1, #0
 8004c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c6a:	6865      	ldr	r5, [r4, #4]
 8004c6c:	60a5      	str	r5, [r4, #8]
 8004c6e:	2d00      	cmp	r5, #0
 8004c70:	bfa2      	ittt	ge
 8004c72:	6821      	ldrge	r1, [r4, #0]
 8004c74:	f021 0104 	bicge.w	r1, r1, #4
 8004c78:	6021      	strge	r1, [r4, #0]
 8004c7a:	b90e      	cbnz	r6, 8004c80 <_printf_i+0x114>
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	d04b      	beq.n	8004d18 <_printf_i+0x1ac>
 8004c80:	4615      	mov	r5, r2
 8004c82:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c86:	fb03 6711 	mls	r7, r3, r1, r6
 8004c8a:	5dc7      	ldrb	r7, [r0, r7]
 8004c8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c90:	4637      	mov	r7, r6
 8004c92:	42bb      	cmp	r3, r7
 8004c94:	460e      	mov	r6, r1
 8004c96:	d9f4      	bls.n	8004c82 <_printf_i+0x116>
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d10b      	bne.n	8004cb4 <_printf_i+0x148>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	07de      	lsls	r6, r3, #31
 8004ca0:	d508      	bpl.n	8004cb4 <_printf_i+0x148>
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	6861      	ldr	r1, [r4, #4]
 8004ca6:	4299      	cmp	r1, r3
 8004ca8:	bfde      	ittt	le
 8004caa:	2330      	movle	r3, #48	; 0x30
 8004cac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cb4:	1b52      	subs	r2, r2, r5
 8004cb6:	6122      	str	r2, [r4, #16]
 8004cb8:	f8cd a000 	str.w	sl, [sp]
 8004cbc:	464b      	mov	r3, r9
 8004cbe:	aa03      	add	r2, sp, #12
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	f7ff fee4 	bl	8004a90 <_printf_common>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d14a      	bne.n	8004d62 <_printf_i+0x1f6>
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	b004      	add	sp, #16
 8004cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	f043 0320 	orr.w	r3, r3, #32
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	4833      	ldr	r0, [pc, #204]	; (8004dac <_printf_i+0x240>)
 8004ce0:	2778      	movs	r7, #120	; 0x78
 8004ce2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	6829      	ldr	r1, [r5, #0]
 8004cea:	061f      	lsls	r7, r3, #24
 8004cec:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cf0:	d402      	bmi.n	8004cf8 <_printf_i+0x18c>
 8004cf2:	065f      	lsls	r7, r3, #25
 8004cf4:	bf48      	it	mi
 8004cf6:	b2b6      	uxthmi	r6, r6
 8004cf8:	07df      	lsls	r7, r3, #31
 8004cfa:	bf48      	it	mi
 8004cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8004d00:	6029      	str	r1, [r5, #0]
 8004d02:	bf48      	it	mi
 8004d04:	6023      	strmi	r3, [r4, #0]
 8004d06:	b91e      	cbnz	r6, 8004d10 <_printf_i+0x1a4>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	f023 0320 	bic.w	r3, r3, #32
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	2310      	movs	r3, #16
 8004d12:	e7a7      	b.n	8004c64 <_printf_i+0xf8>
 8004d14:	4824      	ldr	r0, [pc, #144]	; (8004da8 <_printf_i+0x23c>)
 8004d16:	e7e4      	b.n	8004ce2 <_printf_i+0x176>
 8004d18:	4615      	mov	r5, r2
 8004d1a:	e7bd      	b.n	8004c98 <_printf_i+0x12c>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	6826      	ldr	r6, [r4, #0]
 8004d20:	6961      	ldr	r1, [r4, #20]
 8004d22:	1d18      	adds	r0, r3, #4
 8004d24:	6028      	str	r0, [r5, #0]
 8004d26:	0635      	lsls	r5, r6, #24
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	d501      	bpl.n	8004d30 <_printf_i+0x1c4>
 8004d2c:	6019      	str	r1, [r3, #0]
 8004d2e:	e002      	b.n	8004d36 <_printf_i+0x1ca>
 8004d30:	0670      	lsls	r0, r6, #25
 8004d32:	d5fb      	bpl.n	8004d2c <_printf_i+0x1c0>
 8004d34:	8019      	strh	r1, [r3, #0]
 8004d36:	2300      	movs	r3, #0
 8004d38:	6123      	str	r3, [r4, #16]
 8004d3a:	4615      	mov	r5, r2
 8004d3c:	e7bc      	b.n	8004cb8 <_printf_i+0x14c>
 8004d3e:	682b      	ldr	r3, [r5, #0]
 8004d40:	1d1a      	adds	r2, r3, #4
 8004d42:	602a      	str	r2, [r5, #0]
 8004d44:	681d      	ldr	r5, [r3, #0]
 8004d46:	6862      	ldr	r2, [r4, #4]
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f7fb fa68 	bl	8000220 <memchr>
 8004d50:	b108      	cbz	r0, 8004d56 <_printf_i+0x1ea>
 8004d52:	1b40      	subs	r0, r0, r5
 8004d54:	6060      	str	r0, [r4, #4]
 8004d56:	6863      	ldr	r3, [r4, #4]
 8004d58:	6123      	str	r3, [r4, #16]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d60:	e7aa      	b.n	8004cb8 <_printf_i+0x14c>
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	462a      	mov	r2, r5
 8004d66:	4649      	mov	r1, r9
 8004d68:	4640      	mov	r0, r8
 8004d6a:	47d0      	blx	sl
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	d0ad      	beq.n	8004ccc <_printf_i+0x160>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	079b      	lsls	r3, r3, #30
 8004d74:	d413      	bmi.n	8004d9e <_printf_i+0x232>
 8004d76:	68e0      	ldr	r0, [r4, #12]
 8004d78:	9b03      	ldr	r3, [sp, #12]
 8004d7a:	4298      	cmp	r0, r3
 8004d7c:	bfb8      	it	lt
 8004d7e:	4618      	movlt	r0, r3
 8004d80:	e7a6      	b.n	8004cd0 <_printf_i+0x164>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4632      	mov	r2, r6
 8004d86:	4649      	mov	r1, r9
 8004d88:	4640      	mov	r0, r8
 8004d8a:	47d0      	blx	sl
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d09d      	beq.n	8004ccc <_printf_i+0x160>
 8004d90:	3501      	adds	r5, #1
 8004d92:	68e3      	ldr	r3, [r4, #12]
 8004d94:	9903      	ldr	r1, [sp, #12]
 8004d96:	1a5b      	subs	r3, r3, r1
 8004d98:	42ab      	cmp	r3, r5
 8004d9a:	dcf2      	bgt.n	8004d82 <_printf_i+0x216>
 8004d9c:	e7eb      	b.n	8004d76 <_printf_i+0x20a>
 8004d9e:	2500      	movs	r5, #0
 8004da0:	f104 0619 	add.w	r6, r4, #25
 8004da4:	e7f5      	b.n	8004d92 <_printf_i+0x226>
 8004da6:	bf00      	nop
 8004da8:	08005c21 	.word	0x08005c21
 8004dac:	08005c32 	.word	0x08005c32

08004db0 <memmove>:
 8004db0:	4288      	cmp	r0, r1
 8004db2:	b510      	push	{r4, lr}
 8004db4:	eb01 0402 	add.w	r4, r1, r2
 8004db8:	d902      	bls.n	8004dc0 <memmove+0x10>
 8004dba:	4284      	cmp	r4, r0
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	d807      	bhi.n	8004dd0 <memmove+0x20>
 8004dc0:	1e43      	subs	r3, r0, #1
 8004dc2:	42a1      	cmp	r1, r4
 8004dc4:	d008      	beq.n	8004dd8 <memmove+0x28>
 8004dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dce:	e7f8      	b.n	8004dc2 <memmove+0x12>
 8004dd0:	4402      	add	r2, r0
 8004dd2:	4601      	mov	r1, r0
 8004dd4:	428a      	cmp	r2, r1
 8004dd6:	d100      	bne.n	8004dda <memmove+0x2a>
 8004dd8:	bd10      	pop	{r4, pc}
 8004dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004de2:	e7f7      	b.n	8004dd4 <memmove+0x24>

08004de4 <_sbrk_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d06      	ldr	r5, [pc, #24]	; (8004e00 <_sbrk_r+0x1c>)
 8004de8:	2300      	movs	r3, #0
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	f7fc fb7e 	bl	80014f0 <_sbrk>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_sbrk_r+0x1a>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_sbrk_r+0x1a>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	20000768 	.word	0x20000768

08004e04 <_realloc_r>:
 8004e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e08:	4680      	mov	r8, r0
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	460e      	mov	r6, r1
 8004e0e:	b921      	cbnz	r1, 8004e1a <_realloc_r+0x16>
 8004e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e14:	4611      	mov	r1, r2
 8004e16:	f7ff bc57 	b.w	80046c8 <_malloc_r>
 8004e1a:	b92a      	cbnz	r2, 8004e28 <_realloc_r+0x24>
 8004e1c:	f7ff fbe8 	bl	80045f0 <_free_r>
 8004e20:	4625      	mov	r5, r4
 8004e22:	4628      	mov	r0, r5
 8004e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e28:	f000 f81b 	bl	8004e62 <_malloc_usable_size_r>
 8004e2c:	4284      	cmp	r4, r0
 8004e2e:	4607      	mov	r7, r0
 8004e30:	d802      	bhi.n	8004e38 <_realloc_r+0x34>
 8004e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e36:	d812      	bhi.n	8004e5e <_realloc_r+0x5a>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f7ff fc44 	bl	80046c8 <_malloc_r>
 8004e40:	4605      	mov	r5, r0
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d0ed      	beq.n	8004e22 <_realloc_r+0x1e>
 8004e46:	42bc      	cmp	r4, r7
 8004e48:	4622      	mov	r2, r4
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	bf28      	it	cs
 8004e4e:	463a      	movcs	r2, r7
 8004e50:	f7ff fbc0 	bl	80045d4 <memcpy>
 8004e54:	4631      	mov	r1, r6
 8004e56:	4640      	mov	r0, r8
 8004e58:	f7ff fbca 	bl	80045f0 <_free_r>
 8004e5c:	e7e1      	b.n	8004e22 <_realloc_r+0x1e>
 8004e5e:	4635      	mov	r5, r6
 8004e60:	e7df      	b.n	8004e22 <_realloc_r+0x1e>

08004e62 <_malloc_usable_size_r>:
 8004e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e66:	1f18      	subs	r0, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bfbc      	itt	lt
 8004e6c:	580b      	ldrlt	r3, [r1, r0]
 8004e6e:	18c0      	addlt	r0, r0, r3
 8004e70:	4770      	bx	lr
	...

08004e74 <_init>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr

08004e80 <_fini>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

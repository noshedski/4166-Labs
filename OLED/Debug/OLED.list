
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010fc  08007ed8  08007ed8  00017ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fd4  08008fd4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fdc  08008fdc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fe0  08008fe0  00018fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  200001dc  080091c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  080091c0  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012971  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002909  00000000  00000000  00032bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000354d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df6  00000000  00000000  00036688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dff  00000000  00000000  0003747e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016840  00000000  00000000  0005c27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e202a  00000000  00000000  00072abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cfc  00000000  00000000  00154ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0015a7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ec0 	.word	0x08007ec0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007ec0 	.word	0x08007ec0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <uart2_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int uart2_write(int ch)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 8000f8c:	bf00      	nop
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <uart2_write+0x2c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <uart2_write+0xa>

	 /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <uart2_write+0x2c>)
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	6053      	str	r3, [r2, #4]
	return ch;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <__io_putchar>:

int __io_putchar(int ch)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ffe1 	bl	8000f84 <uart2_write>
	return ch;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	0000      	movs	r0, r0
	...

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f000 ff87 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f877 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f98d 	bl	80012fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 f961 	bl	80012a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fe6:	f000 f931 	bl	800124c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000fea:	f000 f8dd 	bl	80011a8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8000fee:	f000 fa0b 	bl	8001408 <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fb71 	bl	80016dc <SSD1306_GotoXY>
  SSD1306_Puts ("Voltage: ", &Font_11x18, 1);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	492c      	ldr	r1, [pc, #176]	; (80010b0 <main+0xe0>)
 8000ffe:	482d      	ldr	r0, [pc, #180]	; (80010b4 <main+0xe4>)
 8001000:	f000 fc02 	bl	8001808 <SSD1306_Puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  /*1. Start ADC */
	  	 HAL_ADC_Start(&hadc1);
 8001004:	482c      	ldr	r0, [pc, #176]	; (80010b8 <main+0xe8>)
 8001006:	f001 f819 	bl	800203c <HAL_ADC_Start>

	  	 /*2. Poll for conversion */
	  	 HAL_ADC_PollForConversion(&hadc1,1);
 800100a:	2101      	movs	r1, #1
 800100c:	482a      	ldr	r0, [pc, #168]	; (80010b8 <main+0xe8>)
 800100e:	f001 f8e7 	bl	80021e0 <HAL_ADC_PollForConversion>

	  	 /*3. Get conversion */
	  	 sensorValue = HAL_ADC_GetValue(&hadc1);
 8001012:	4829      	ldr	r0, [pc, #164]	; (80010b8 <main+0xe8>)
 8001014:	f001 f96f 	bl	80022f6 <HAL_ADC_GetValue>
 8001018:	4603      	mov	r3, r0
 800101a:	4a28      	ldr	r2, [pc, #160]	; (80010bc <main+0xec>)
 800101c:	6013      	str	r3, [r2, #0]
	  	 fvoltage = (float)sensorValue * (3.3/4095.0);
 800101e:	4b27      	ldr	r3, [pc, #156]	; (80010bc <main+0xec>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102a:	ee17 0a90 	vmov	r0, s15
 800102e:	f7ff faab 	bl	8000588 <__aeabi_f2d>
 8001032:	a31d      	add	r3, pc, #116	; (adr r3, 80010a8 <main+0xd8>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fafe 	bl	8000638 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fdd0 	bl	8000be8 <__aeabi_d2f>
 8001048:	4603      	mov	r3, r0
 800104a:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <main+0xf0>)
 800104c:	6013      	str	r3, [r2, #0]
		 
		  sprintf(msg, "%.2f V", fvoltage);
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <main+0xf0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa98 	bl	8000588 <__aeabi_f2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	1d38      	adds	r0, r7, #4
 800105e:	4919      	ldr	r1, [pc, #100]	; (80010c4 <main+0xf4>)
 8001060:	f004 fdd0 	bl	8005c04 <siprintf>


	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f922 	bl	80002b0 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	1d39      	adds	r1, r7, #4
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	4814      	ldr	r0, [pc, #80]	; (80010c8 <main+0xf8>)
 8001078:	f003 fce0 	bl	8004a3c <HAL_UART_Transmit>

	  	 SSD1306_GotoXY (0, 30);
 800107c:	211e      	movs	r1, #30
 800107e:	2000      	movs	r0, #0
 8001080:	f000 fb2c 	bl	80016dc <SSD1306_GotoXY>
		SSD1306_UpdateScreen();
 8001084:	f000 fa84 	bl	8001590 <SSD1306_UpdateScreen>
		SSD1306_Puts (msg, &Font_11x18, 1);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2201      	movs	r2, #1
 800108c:	4908      	ldr	r1, [pc, #32]	; (80010b0 <main+0xe0>)
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fbba 	bl	8001808 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8001094:	f000 fa7c 	bl	8001590 <SSD1306_UpdateScreen>
		HAL_Delay (500);
 8001098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109c:	f000 ff66 	bl	8001f6c <HAL_Delay>
	  	 HAL_ADC_Start(&hadc1);
 80010a0:	e7b0      	b.n	8001004 <main+0x34>
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	e734d9b4 	.word	0xe734d9b4
 80010ac:	3f4a680c 	.word	0x3f4a680c
 80010b0:	20000000 	.word	0x20000000
 80010b4:	08007ed8 	.word	0x08007ed8
 80010b8:	200001f8 	.word	0x200001f8
 80010bc:	200002dc 	.word	0x200002dc
 80010c0:	200002e0 	.word	0x200002e0
 80010c4:	08007ee4 	.word	0x08007ee4
 80010c8:	20000294 	.word	0x20000294

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	2234      	movs	r2, #52	; 0x34
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 fdf5 	bl	8005cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <SystemClock_Config+0xd4>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <SystemClock_Config+0xd4>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <SystemClock_Config+0xd4>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <SystemClock_Config+0xd8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <SystemClock_Config+0xd8>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <SystemClock_Config+0xd8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2310      	movs	r3, #16
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113c:	2300      	movs	r3, #0
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001140:	2310      	movs	r3, #16
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001144:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001148:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800114a:	2304      	movs	r3, #4
 800114c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800114e:	2302      	movs	r3, #2
 8001150:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001152:	2302      	movs	r3, #2
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4618      	mov	r0, r3
 800115c:	f002 fede 	bl	8003f1c <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001166:	f000 f949 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2302      	movs	r3, #2
 8001170:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2102      	movs	r1, #2
 8001186:	4618      	mov	r0, r3
 8001188:	f002 fb4c 	bl	8003824 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001192:	f000 f933 	bl	80013fc <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3750      	adds	r7, #80	; 0x50
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_ADC1_Init+0x98>)
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <MX_ADC1_Init+0x9c>)
 80011be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_ADC1_Init+0x98>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_ADC1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_ADC1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_ADC1_Init+0x98>)
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <MX_ADC1_Init+0xa0>)
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_ADC1_Init+0x98>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MX_ADC1_Init+0x98>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_ADC1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_ADC1_Init+0x98>)
 8001204:	2201      	movs	r2, #1
 8001206:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_ADC1_Init+0x98>)
 800120a:	f000 fed3 	bl	8001fb4 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001214:	f000 f8f2 	bl	80013fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_ADC1_Init+0x98>)
 800122a:	f001 f871 	bl	8002310 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001234:	f000 f8e2 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001f8 	.word	0x200001f8
 8001244:	40012000 	.word	0x40012000
 8001248:	0f000001 	.word	0x0f000001

0800124c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_I2C1_Init+0x50>)
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <MX_I2C1_Init+0x54>)
 8001254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_I2C1_Init+0x50>)
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_I2C1_Init+0x58>)
 800125a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_I2C1_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_I2C1_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_I2C1_Init+0x50>)
 800126a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_I2C1_Init+0x50>)
 800128a:	f001 fcff 	bl	8002c8c <HAL_I2C_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001294:	f000 f8b2 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000240 	.word	0x20000240
 80012a0:	40005400 	.word	0x40005400
 80012a4:	00061a80 	.word	0x00061a80

080012a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_USART2_UART_Init+0x50>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f003 fb5c 	bl	800499c <HAL_UART_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ea:	f000 f887 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000294 	.word	0x20000294
 80012f8:	40004400 	.word	0x40004400

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <MX_GPIO_Init+0xd0>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a25      	ldr	r2, [pc, #148]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a1e      	ldr	r2, [pc, #120]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_GPIO_Init+0xd0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_GPIO_Init+0xd0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_GPIO_Init+0xd0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	4812      	ldr	r0, [pc, #72]	; (80013d0 <MX_GPIO_Init+0xd4>)
 8001388:	f001 fc66 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001392:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_GPIO_Init+0xd8>)
 80013a4:	f001 fac4 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a8:	2320      	movs	r3, #32
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_GPIO_Init+0xd4>)
 80013c0:	f001 fab6 	bl	8002930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	40020800 	.word	0x40020800

080013d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ea:	f000 fd9f 	bl	8001f2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40001000 	.word	0x40001000

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	e7fe      	b.n	8001404 <Error_Handler+0x8>
	...

08001408 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800140e:	f000 fa21 	bl	8001854 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001412:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001416:	2201      	movs	r2, #1
 8001418:	2178      	movs	r1, #120	; 0x78
 800141a:	485b      	ldr	r0, [pc, #364]	; (8001588 <SSD1306_Init+0x180>)
 800141c:	f001 fe78 	bl	8003110 <HAL_I2C_IsDeviceReady>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e0a9      	b.n	800157e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800142a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800142e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001430:	e002      	b.n	8001438 <SSD1306_Init+0x30>
		p--;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3b01      	subs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f9      	bne.n	8001432 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800143e:	22ae      	movs	r2, #174	; 0xae
 8001440:	2100      	movs	r1, #0
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f000 fa82 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001448:	2220      	movs	r2, #32
 800144a:	2100      	movs	r1, #0
 800144c:	2078      	movs	r0, #120	; 0x78
 800144e:	f000 fa7d 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001452:	2210      	movs	r2, #16
 8001454:	2100      	movs	r1, #0
 8001456:	2078      	movs	r0, #120	; 0x78
 8001458:	f000 fa78 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800145c:	22b0      	movs	r2, #176	; 0xb0
 800145e:	2100      	movs	r1, #0
 8001460:	2078      	movs	r0, #120	; 0x78
 8001462:	f000 fa73 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001466:	22c8      	movs	r2, #200	; 0xc8
 8001468:	2100      	movs	r1, #0
 800146a:	2078      	movs	r0, #120	; 0x78
 800146c:	f000 fa6e 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001470:	2200      	movs	r2, #0
 8001472:	2100      	movs	r1, #0
 8001474:	2078      	movs	r0, #120	; 0x78
 8001476:	f000 fa69 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800147a:	2210      	movs	r2, #16
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f000 fa64 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001484:	2240      	movs	r2, #64	; 0x40
 8001486:	2100      	movs	r1, #0
 8001488:	2078      	movs	r0, #120	; 0x78
 800148a:	f000 fa5f 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800148e:	2281      	movs	r2, #129	; 0x81
 8001490:	2100      	movs	r1, #0
 8001492:	2078      	movs	r0, #120	; 0x78
 8001494:	f000 fa5a 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001498:	22ff      	movs	r2, #255	; 0xff
 800149a:	2100      	movs	r1, #0
 800149c:	2078      	movs	r0, #120	; 0x78
 800149e:	f000 fa55 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014a2:	22a1      	movs	r2, #161	; 0xa1
 80014a4:	2100      	movs	r1, #0
 80014a6:	2078      	movs	r0, #120	; 0x78
 80014a8:	f000 fa50 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014ac:	22a6      	movs	r2, #166	; 0xa6
 80014ae:	2100      	movs	r1, #0
 80014b0:	2078      	movs	r0, #120	; 0x78
 80014b2:	f000 fa4b 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014b6:	22a8      	movs	r2, #168	; 0xa8
 80014b8:	2100      	movs	r1, #0
 80014ba:	2078      	movs	r0, #120	; 0x78
 80014bc:	f000 fa46 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80014c0:	223f      	movs	r2, #63	; 0x3f
 80014c2:	2100      	movs	r1, #0
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f000 fa41 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014ca:	22a4      	movs	r2, #164	; 0xa4
 80014cc:	2100      	movs	r1, #0
 80014ce:	2078      	movs	r0, #120	; 0x78
 80014d0:	f000 fa3c 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014d4:	22d3      	movs	r2, #211	; 0xd3
 80014d6:	2100      	movs	r1, #0
 80014d8:	2078      	movs	r0, #120	; 0x78
 80014da:	f000 fa37 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2078      	movs	r0, #120	; 0x78
 80014e4:	f000 fa32 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014e8:	22d5      	movs	r2, #213	; 0xd5
 80014ea:	2100      	movs	r1, #0
 80014ec:	2078      	movs	r0, #120	; 0x78
 80014ee:	f000 fa2d 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014f2:	22f0      	movs	r2, #240	; 0xf0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2078      	movs	r0, #120	; 0x78
 80014f8:	f000 fa28 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014fc:	22d9      	movs	r2, #217	; 0xd9
 80014fe:	2100      	movs	r1, #0
 8001500:	2078      	movs	r0, #120	; 0x78
 8001502:	f000 fa23 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001506:	2222      	movs	r2, #34	; 0x22
 8001508:	2100      	movs	r1, #0
 800150a:	2078      	movs	r0, #120	; 0x78
 800150c:	f000 fa1e 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001510:	22da      	movs	r2, #218	; 0xda
 8001512:	2100      	movs	r1, #0
 8001514:	2078      	movs	r0, #120	; 0x78
 8001516:	f000 fa19 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800151a:	2212      	movs	r2, #18
 800151c:	2100      	movs	r1, #0
 800151e:	2078      	movs	r0, #120	; 0x78
 8001520:	f000 fa14 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001524:	22db      	movs	r2, #219	; 0xdb
 8001526:	2100      	movs	r1, #0
 8001528:	2078      	movs	r0, #120	; 0x78
 800152a:	f000 fa0f 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800152e:	2220      	movs	r2, #32
 8001530:	2100      	movs	r1, #0
 8001532:	2078      	movs	r0, #120	; 0x78
 8001534:	f000 fa0a 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001538:	228d      	movs	r2, #141	; 0x8d
 800153a:	2100      	movs	r1, #0
 800153c:	2078      	movs	r0, #120	; 0x78
 800153e:	f000 fa05 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001542:	2214      	movs	r2, #20
 8001544:	2100      	movs	r1, #0
 8001546:	2078      	movs	r0, #120	; 0x78
 8001548:	f000 fa00 	bl	800194c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800154c:	22af      	movs	r2, #175	; 0xaf
 800154e:	2100      	movs	r1, #0
 8001550:	2078      	movs	r0, #120	; 0x78
 8001552:	f000 f9fb 	bl	800194c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001556:	222e      	movs	r2, #46	; 0x2e
 8001558:	2100      	movs	r1, #0
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f000 f9f6 	bl	800194c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001560:	2000      	movs	r0, #0
 8001562:	f000 f843 	bl	80015ec <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001566:	f000 f813 	bl	8001590 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <SSD1306_Init+0x184>)
 800156c:	2200      	movs	r2, #0
 800156e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SSD1306_Init+0x184>)
 8001572:	2200      	movs	r2, #0
 8001574:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <SSD1306_Init+0x184>)
 8001578:	2201      	movs	r2, #1
 800157a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800157c:	2301      	movs	r3, #1
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000240 	.word	0x20000240
 800158c:	200006e4 	.word	0x200006e4

08001590 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001596:	2300      	movs	r3, #0
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e01d      	b.n	80015d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	3b50      	subs	r3, #80	; 0x50
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	2100      	movs	r1, #0
 80015a6:	2078      	movs	r0, #120	; 0x78
 80015a8:	f000 f9d0 	bl	800194c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2078      	movs	r0, #120	; 0x78
 80015b2:	f000 f9cb 	bl	800194c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015b6:	2210      	movs	r2, #16
 80015b8:	2100      	movs	r1, #0
 80015ba:	2078      	movs	r0, #120	; 0x78
 80015bc:	f000 f9c6 	bl	800194c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	01db      	lsls	r3, r3, #7
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <SSD1306_UpdateScreen+0x58>)
 80015c6:	441a      	add	r2, r3
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	2140      	movs	r1, #64	; 0x40
 80015cc:	2078      	movs	r0, #120	; 0x78
 80015ce:	f000 f957 	bl	8001880 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	3301      	adds	r3, #1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b07      	cmp	r3, #7
 80015dc:	d9de      	bls.n	800159c <SSD1306_UpdateScreen+0xc>
	}
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002e4 	.word	0x200002e4

080015ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <SSD1306_Fill+0x14>
 80015fc:	2300      	movs	r3, #0
 80015fe:	e000      	b.n	8001602 <SSD1306_Fill+0x16>
 8001600:	23ff      	movs	r3, #255	; 0xff
 8001602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001606:	4619      	mov	r1, r3
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <SSD1306_Fill+0x2c>)
 800160a:	f004 fb5e 	bl	8005cca <memset>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002e4 	.word	0x200002e4

0800161c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
 8001626:	460b      	mov	r3, r1
 8001628:	80bb      	strh	r3, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	70fb      	strb	r3, [r7, #3]
	if (
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2b7f      	cmp	r3, #127	; 0x7f
 8001632:	d848      	bhi.n	80016c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	2b3f      	cmp	r3, #63	; 0x3f
 8001638:	d845      	bhi.n	80016c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <SSD1306_DrawPixel+0xb8>)
 800163c:	791b      	ldrb	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d11a      	bne.n	800168c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001656:	88fa      	ldrh	r2, [r7, #6]
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	b298      	uxth	r0, r3
 800165e:	4603      	mov	r3, r0
 8001660:	01db      	lsls	r3, r3, #7
 8001662:	4413      	add	r3, r2
 8001664:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <SSD1306_DrawPixel+0xbc>)
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	b25a      	sxtb	r2, r3
 800166a:	88bb      	ldrh	r3, [r7, #4]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b259      	sxtb	r1, r3
 800167c:	88fa      	ldrh	r2, [r7, #6]
 800167e:	4603      	mov	r3, r0
 8001680:	01db      	lsls	r3, r3, #7
 8001682:	4413      	add	r3, r2
 8001684:	b2c9      	uxtb	r1, r1
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <SSD1306_DrawPixel+0xbc>)
 8001688:	54d1      	strb	r1, [r2, r3]
 800168a:	e01d      	b.n	80016c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800168c:	88fa      	ldrh	r2, [r7, #6]
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	b298      	uxth	r0, r3
 8001694:	4603      	mov	r3, r0
 8001696:	01db      	lsls	r3, r3, #7
 8001698:	4413      	add	r3, r2
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <SSD1306_DrawPixel+0xbc>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	b25a      	sxtb	r2, r3
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	4013      	ands	r3, r2
 80016b4:	b259      	sxtb	r1, r3
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	4603      	mov	r3, r0
 80016ba:	01db      	lsls	r3, r3, #7
 80016bc:	4413      	add	r3, r2
 80016be:	b2c9      	uxtb	r1, r1
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SSD1306_DrawPixel+0xbc>)
 80016c2:	54d1      	strb	r1, [r2, r3]
 80016c4:	e000      	b.n	80016c8 <SSD1306_DrawPixel+0xac>
		return;
 80016c6:	bf00      	nop
	}
}
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200006e4 	.word	0x200006e4
 80016d8:	200002e4 	.word	0x200002e4

080016dc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	460a      	mov	r2, r1
 80016e6:	80fb      	strh	r3, [r7, #6]
 80016e8:	4613      	mov	r3, r2
 80016ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SSD1306_GotoXY+0x28>)
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <SSD1306_GotoXY+0x28>)
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	8053      	strh	r3, [r2, #2]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	200006e4 	.word	0x200006e4

08001708 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4613      	mov	r3, r2
 8001716:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <SSD1306_Putc+0xfc>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
	if (
 8001724:	2b7f      	cmp	r3, #127	; 0x7f
 8001726:	dc07      	bgt.n	8001738 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <SSD1306_Putc+0xfc>)
 800172a:	885b      	ldrh	r3, [r3, #2]
 800172c:	461a      	mov	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
 8001732:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001734:	2b3f      	cmp	r3, #63	; 0x3f
 8001736:	dd01      	ble.n	800173c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001738:	2300      	movs	r3, #0
 800173a:	e05e      	b.n	80017fa <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e04b      	b.n	80017da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	3b20      	subs	r3, #32
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	7849      	ldrb	r1, [r1, #1]
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4619      	mov	r1, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	440b      	add	r3, r1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	e030      	b.n	80017c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d010      	beq.n	8001798 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <SSD1306_Putc+0xfc>)
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4413      	add	r3, r2
 8001780:	b298      	uxth	r0, r3
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <SSD1306_Putc+0xfc>)
 8001784:	885a      	ldrh	r2, [r3, #2]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	b29b      	uxth	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b29b      	uxth	r3, r3
 800178e:	79ba      	ldrb	r2, [r7, #6]
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff ff43 	bl	800161c <SSD1306_DrawPixel>
 8001796:	e014      	b.n	80017c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <SSD1306_Putc+0xfc>)
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	b298      	uxth	r0, r3
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <SSD1306_Putc+0xfc>)
 80017a6:	885a      	ldrh	r2, [r3, #2]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b299      	uxth	r1, r3
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	f7ff ff2d 	bl	800161c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	3301      	adds	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d3c8      	bcc.n	8001766 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	461a      	mov	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d3ad      	bcc.n	8001742 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <SSD1306_Putc+0xfc>)
 80017e8:	881a      	ldrh	r2, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <SSD1306_Putc+0xfc>)
 80017f6:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200006e4 	.word	0x200006e4

08001808 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	4613      	mov	r3, r2
 8001814:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001816:	e012      	b.n	800183e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff71 	bl	8001708 <SSD1306_Putc>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d002      	beq.n	8001838 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	e008      	b.n	800184a <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3301      	adds	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e8      	bne.n	8001818 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	781b      	ldrb	r3, [r3, #0]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <ssd1306_I2C_Init+0x28>)
 800185c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800185e:	e002      	b.n	8001866 <ssd1306_I2C_Init+0x12>
		p--;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f9      	bne.n	8001860 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	0003d090 	.word	0x0003d090

08001880 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b0c7      	sub	sp, #284	; 0x11c
 8001884:	af02      	add	r7, sp, #8
 8001886:	4604      	mov	r4, r0
 8001888:	4608      	mov	r0, r1
 800188a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800188e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001892:	600a      	str	r2, [r1, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800189a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800189e:	4622      	mov	r2, r4
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018a6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80018aa:	4602      	mov	r2, r0
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018b6:	460a      	mov	r2, r1
 80018b8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80018ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018c6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80018ca:	7812      	ldrb	r2, [r2, #0]
 80018cc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80018d4:	e015      	b.n	8001902 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80018d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	441a      	add	r2, r3
 80018e6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018ea:	3301      	adds	r3, #1
 80018ec:	7811      	ldrb	r1, [r2, #0]
 80018ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018f2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80018f6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80018f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018fc:	3301      	adds	r3, #1
 80018fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001902:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001906:	b29b      	uxth	r3, r3
 8001908:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800190c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001910:	8812      	ldrh	r2, [r2, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d8df      	bhi.n	80018d6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800191a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b299      	uxth	r1, r3
 8001922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001926:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	b29b      	uxth	r3, r3
 8001930:	f107 020c 	add.w	r2, r7, #12
 8001934:	200a      	movs	r0, #10
 8001936:	9000      	str	r0, [sp, #0]
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <ssd1306_I2C_WriteMulti+0xc8>)
 800193a:	f001 faeb 	bl	8002f14 <HAL_I2C_Master_Transmit>
}
 800193e:	bf00      	nop
 8001940:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001944:	46bd      	mov	sp, r7
 8001946:	bd90      	pop	{r4, r7, pc}
 8001948:	20000240 	.word	0x20000240

0800194c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
 8001956:	460b      	mov	r3, r1
 8001958:	71bb      	strb	r3, [r7, #6]
 800195a:	4613      	mov	r3, r2
 800195c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	b299      	uxth	r1, r3
 800196a:	f107 020c 	add.w	r2, r7, #12
 800196e:	230a      	movs	r3, #10
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2302      	movs	r3, #2
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <ssd1306_I2C_Write+0x38>)
 8001976:	f001 facd 	bl	8002f14 <HAL_I2C_Master_Transmit>
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000240 	.word	0x20000240

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_MspInit+0x4c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019c6:	2007      	movs	r0, #7
 80019c8:	f000 ff7d 	bl	80028c6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <HAL_ADC_MspInit+0x7c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d127      	bne.n	8001a4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_ADC_MspInit+0x80>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <HAL_ADC_MspInit+0x80>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_ADC_MspInit+0x80>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_ADC_MspInit+0x80>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_ADC_MspInit+0x80>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_ADC_MspInit+0x80>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a36:	2303      	movs	r3, #3
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_ADC_MspInit+0x84>)
 8001a46:	f000 ff73 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40012000 	.word	0x40012000
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020000 	.word	0x40020000

08001a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_I2C_MspInit+0x84>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d12b      	bne.n	8001ada <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9e:	23c0      	movs	r3, #192	; 0xc0
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa2:	2312      	movs	r3, #18
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <HAL_I2C_MspInit+0x8c>)
 8001aba:	f000 ff39 	bl	8002930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_I2C_MspInit+0x88>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40005400 	.word	0x40005400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020400 	.word	0x40020400

08001af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_UART_MspInit+0x84>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12b      	bne.n	8001b6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_UART_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_UART_MspInit+0x8c>)
 8001b66:	f000 fee3 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40004400 	.word	0x40004400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000

08001b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08e      	sub	sp, #56	; 0x38
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_InitTick+0xe4>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_InitTick+0xe4>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_InitTick+0xe4>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bac:	f107 0210 	add.w	r2, r7, #16
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 ff4e 	bl	8003a58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bc6:	f001 ff1f 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8001bca:	6378      	str	r0, [r7, #52]	; 0x34
 8001bcc:	e004      	b.n	8001bd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bce:	f001 ff1b 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_InitTick+0xe8>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9b      	lsrs	r3, r3, #18
 8001be2:	3b01      	subs	r3, #1
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_InitTick+0xec>)
 8001be8:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <HAL_InitTick+0xf0>)
 8001bea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <HAL_InitTick+0xec>)
 8001bee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bf4:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_InitTick+0xec>)
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_InitTick+0xec>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_InitTick+0xec>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_InitTick+0xec>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c0c:	4817      	ldr	r0, [pc, #92]	; (8001c6c <HAL_InitTick+0xec>)
 8001c0e:	f002 fc23 	bl	8004458 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d11b      	bne.n	8001c58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c20:	4812      	ldr	r0, [pc, #72]	; (8001c6c <HAL_InitTick+0xec>)
 8001c22:	f002 fc73 	bl	800450c <HAL_TIM_Base_Start_IT>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d111      	bne.n	8001c58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c34:	2036      	movs	r0, #54	; 0x36
 8001c36:	f000 fe6d 	bl	8002914 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d808      	bhi.n	8001c52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	2036      	movs	r0, #54	; 0x36
 8001c46:	f000 fe49 	bl	80028dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_InitTick+0xf4>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e002      	b.n	8001c58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3738      	adds	r7, #56	; 0x38
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	431bde83 	.word	0x431bde83
 8001c6c:	200006ec 	.word	0x200006ec
 8001c70:	40001000 	.word	0x40001000
 8001c74:	2000000c 	.word	0x2000000c

08001c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c7c:	e7fe      	b.n	8001c7c <NMI_Handler+0x4>

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <TIM6_DAC_IRQHandler+0x10>)
 8001cd6:	f002 fc89 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200006ec 	.word	0x200006ec

08001ce4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return 1;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_kill>:

int _kill(int pid, int sig)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cfe:	f004 f837 	bl	8005d70 <__errno>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2216      	movs	r2, #22
 8001d06:	601a      	str	r2, [r3, #0]
  return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_exit>:

void _exit (int status)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ffe7 	bl	8001cf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d26:	e7fe      	b.n	8001d26 <_exit+0x12>

08001d28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e00a      	b.n	8001d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d3a:	f3af 8000 	nop.w
 8001d3e:	4601      	mov	r1, r0
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	60ba      	str	r2, [r7, #8]
 8001d46:	b2ca      	uxtb	r2, r1
 8001d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dbf0      	blt.n	8001d3a <_read+0x12>
  }

  return len;
 8001d58:	687b      	ldr	r3, [r7, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e009      	b.n	8001d88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f919 	bl	8000fb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	dbf1      	blt.n	8001d74 <_write+0x12>
  }
  return len;
 8001d90:	687b      	ldr	r3, [r7, #4]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_close>:

int _close(int file)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_isatty>:

int _isatty(int file)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <_sbrk+0x5c>)
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <_sbrk+0x60>)
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_sbrk+0x64>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <_sbrk+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d207      	bcs.n	8001e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e34:	f003 ff9c 	bl	8005d70 <__errno>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	e009      	b.n	8001e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <_sbrk+0x64>)
 8001e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20020000 	.word	0x20020000
 8001e64:	00000400 	.word	0x00000400
 8001e68:	20000734 	.word	0x20000734
 8001e6c:	20000888 	.word	0x20000888

08001e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <SystemInit+0x20>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <SystemInit+0x20>)
 8001e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ecc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e98:	f7ff ffea 	bl	8001e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e9e:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	; (8001ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f003 ff5b 	bl	8005d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec6:	f7ff f883 	bl	8000fd0 <main>
  bx  lr    
 8001eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ed8:	08008fe4 	.word	0x08008fe4
  ldr r2, =_sbss
 8001edc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ee0:	20000888 	.word	0x20000888

08001ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <HAL_Init+0x40>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <HAL_Init+0x40>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_Init+0x40>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 fcd8 	bl	80028c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fe32 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff fd34 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_IncTick+0x20>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x24>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_IncTick+0x24>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000010 	.word	0x20000010
 8001f50:	20000738 	.word	0x20000738

08001f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <HAL_GetTick+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000738 	.word	0x20000738

08001f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff ffee 	bl	8001f54 <HAL_GetTick>
 8001f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d005      	beq.n	8001f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_Delay+0x44>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f92:	bf00      	nop
 8001f94:	f7ff ffde 	bl	8001f54 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d8f7      	bhi.n	8001f94 <HAL_Delay+0x28>
  {
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000010 	.word	0x20000010

08001fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e033      	b.n	8002032 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fd00 	bl	80019d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d118      	bne.n	8002024 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ffa:	f023 0302 	bic.w	r3, r3, #2
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fab4 	bl	8002574 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f023 0303 	bic.w	r3, r3, #3
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
 8002022:	e001      	b.n	8002028 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Start+0x1a>
 8002052:	2302      	movs	r3, #2
 8002054:	e0b2      	b.n	80021bc <HAL_ADC_Start+0x180>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d018      	beq.n	800209e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800207c:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_ADC_Start+0x18c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_ADC_Start+0x190>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0c9a      	lsrs	r2, r3, #18
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002090:	e002      	b.n	8002098 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3b01      	subs	r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f9      	bne.n	8002092 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d17a      	bne.n	80021a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ea:	d106      	bne.n	80020fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f023 0206 	bic.w	r2, r3, #6
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	645a      	str	r2, [r3, #68]	; 0x44
 80020f8:	e002      	b.n	8002100 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_ADC_Start+0x194>)
 800210a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002114:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2b00      	cmp	r3, #0
 8002120:	d12a      	bne.n	8002178 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <HAL_ADC_Start+0x198>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d015      	beq.n	8002158 <HAL_ADC_Start+0x11c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <HAL_ADC_Start+0x19c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d105      	bne.n	8002142 <HAL_ADC_Start+0x106>
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_ADC_Start+0x194>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a25      	ldr	r2, [pc, #148]	; (80021dc <HAL_ADC_Start+0x1a0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d136      	bne.n	80021ba <HAL_ADC_Start+0x17e>
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_ADC_Start+0x194>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	d130      	bne.n	80021ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d129      	bne.n	80021ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	e020      	b.n	80021ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <HAL_ADC_Start+0x198>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d11b      	bne.n	80021ba <HAL_ADC_Start+0x17e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d114      	bne.n	80021ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	e00b      	b.n	80021ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	20000008 	.word	0x20000008
 80021cc:	431bde83 	.word	0x431bde83
 80021d0:	40012300 	.word	0x40012300
 80021d4:	40012000 	.word	0x40012000
 80021d8:	40012100 	.word	0x40012100
 80021dc:	40012200 	.word	0x40012200

080021e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021fc:	d113      	bne.n	8002226 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220c:	d10b      	bne.n	8002226 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e063      	b.n	80022ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002226:	f7ff fe95 	bl	8001f54 <HAL_GetTick>
 800222a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800222c:	e021      	b.n	8002272 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d01d      	beq.n	8002272 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <HAL_ADC_PollForConversion+0x6c>
 800223c:	f7ff fe8a 	bl	8001f54 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d212      	bcs.n	8002272 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d00b      	beq.n	8002272 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f043 0204 	orr.w	r2, r3, #4
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e03d      	b.n	80022ee <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b02      	cmp	r3, #2
 800227e:	d1d6      	bne.n	800222e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0212 	mvn.w	r2, #18
 8002288:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d123      	bne.n	80022ec <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d11f      	bne.n	80022ec <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e113      	b.n	8002554 <HAL_ADC_ConfigChannel+0x244>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b09      	cmp	r3, #9
 800233a:	d925      	bls.n	8002388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68d9      	ldr	r1, [r3, #12]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	3b1e      	subs	r3, #30
 8002352:	2207      	movs	r2, #7
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	4603      	mov	r3, r0
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4403      	add	r3, r0
 800237a:	3b1e      	subs	r3, #30
 800237c:	409a      	lsls	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	e022      	b.n	80023ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	2207      	movs	r2, #7
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4403      	add	r3, r0
 80023c4:	409a      	lsls	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d824      	bhi.n	8002420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	3b05      	subs	r3, #5
 80023e8:	221f      	movs	r2, #31
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	400a      	ands	r2, r1
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b05      	subs	r3, #5
 8002412:	fa00 f203 	lsl.w	r2, r0, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	635a      	str	r2, [r3, #52]	; 0x34
 800241e:	e04c      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d824      	bhi.n	8002472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b23      	subs	r3, #35	; 0x23
 800243a:	221f      	movs	r2, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43da      	mvns	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	400a      	ands	r2, r1
 8002448:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	3b23      	subs	r3, #35	; 0x23
 8002464:	fa00 f203 	lsl.w	r2, r0, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
 8002470:	e023      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b41      	subs	r3, #65	; 0x41
 8002484:	221f      	movs	r2, #31
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	400a      	ands	r2, r1
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b41      	subs	r3, #65	; 0x41
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <HAL_ADC_ConfigChannel+0x250>)
 80024bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <HAL_ADC_ConfigChannel+0x254>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10f      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1d8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b12      	cmp	r3, #18
 80024ce:	d10b      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_ADC_ConfigChannel+0x254>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d12b      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_ADC_ConfigChannel+0x258>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <HAL_ADC_ConfigChannel+0x1f4>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b11      	cmp	r3, #17
 8002502:	d122      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <HAL_ADC_ConfigChannel+0x258>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_ADC_ConfigChannel+0x25c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_ADC_ConfigChannel+0x260>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	0c9a      	lsrs	r2, r3, #18
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800253c:	e002      	b.n	8002544 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3b01      	subs	r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f9      	bne.n	800253e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40012300 	.word	0x40012300
 8002564:	40012000 	.word	0x40012000
 8002568:	10000012 	.word	0x10000012
 800256c:	20000008 	.word	0x20000008
 8002570:	431bde83 	.word	0x431bde83

08002574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800257c:	4b79      	ldr	r3, [pc, #484]	; (8002764 <ADC_Init+0x1f0>)
 800257e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	021a      	lsls	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	4a58      	ldr	r2, [pc, #352]	; (8002768 <ADC_Init+0x1f4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800261a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800263c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	e00f      	b.n	8002672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002670:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0202 	bic.w	r2, r2, #2
 8002680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e1b      	ldrb	r3, [r3, #24]
 800268c:	005a      	lsls	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01b      	beq.n	80026d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	3b01      	subs	r3, #1
 80026cc:	035a      	lsls	r2, r3, #13
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	e007      	b.n	80026e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	3b01      	subs	r3, #1
 8002704:	051a      	lsls	r2, r3, #20
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800271c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800272a:	025a      	lsls	r2, r3, #9
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	029a      	lsls	r2, r3, #10
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40012300 	.word	0x40012300
 8002768:	0f000001 	.word	0x0f000001

0800276c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279e:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	60d3      	str	r3, [r2, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <__NVIC_GetPriorityGrouping+0x18>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	f003 0307 	and.w	r3, r3, #7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	db0b      	blt.n	80027fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	4907      	ldr	r1, [pc, #28]	; (8002808 <__NVIC_EnableIRQ+0x38>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2001      	movs	r0, #1
 80027f2:	fa00 f202 	lsl.w	r2, r0, r2
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e100 	.word	0xe000e100

0800280c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db0a      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	490c      	ldr	r1, [pc, #48]	; (8002858 <__NVIC_SetPriority+0x4c>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	440b      	add	r3, r1
 8002830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002834:	e00a      	b.n	800284c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4908      	ldr	r1, [pc, #32]	; (800285c <__NVIC_SetPriority+0x50>)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3b04      	subs	r3, #4
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	440b      	add	r3, r1
 800284a:	761a      	strb	r2, [r3, #24]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f1c3 0307 	rsb	r3, r3, #7
 800287a:	2b04      	cmp	r3, #4
 800287c:	bf28      	it	cs
 800287e:	2304      	movcs	r3, #4
 8002880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3304      	adds	r3, #4
 8002886:	2b06      	cmp	r3, #6
 8002888:	d902      	bls.n	8002890 <NVIC_EncodePriority+0x30>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3b03      	subs	r3, #3
 800288e:	e000      	b.n	8002892 <NVIC_EncodePriority+0x32>
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	401a      	ands	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	4313      	orrs	r3, r2
         );
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff4c 	bl	800276c <__NVIC_SetPriorityGrouping>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ee:	f7ff ff61 	bl	80027b4 <__NVIC_GetPriorityGrouping>
 80028f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	6978      	ldr	r0, [r7, #20]
 80028fa:	f7ff ffb1 	bl	8002860 <NVIC_EncodePriority>
 80028fe:	4602      	mov	r2, r0
 8002900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff80 	bl	800280c <__NVIC_SetPriority>
}
 800290c:	bf00      	nop
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff54 	bl	80027d0 <__NVIC_EnableIRQ>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e165      	b.n	8002c18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8154 	bne.w	8002c12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d005      	beq.n	8002982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	2b02      	cmp	r3, #2
 8002980:	d130      	bne.n	80029e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 0201 	and.w	r2, r3, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d017      	beq.n	8002a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d123      	bne.n	8002a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80ae 	beq.w	8002c12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b5d      	ldr	r3, [pc, #372]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a5c      	ldr	r2, [pc, #368]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b5a      	ldr	r3, [pc, #360]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4f      	ldr	r2, [pc, #316]	; (8002c38 <HAL_GPIO_Init+0x308>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d025      	beq.n	8002b4a <HAL_GPIO_Init+0x21a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4e      	ldr	r2, [pc, #312]	; (8002c3c <HAL_GPIO_Init+0x30c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01f      	beq.n	8002b46 <HAL_GPIO_Init+0x216>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4d      	ldr	r2, [pc, #308]	; (8002c40 <HAL_GPIO_Init+0x310>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d019      	beq.n	8002b42 <HAL_GPIO_Init+0x212>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4c      	ldr	r2, [pc, #304]	; (8002c44 <HAL_GPIO_Init+0x314>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_GPIO_Init+0x20e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4b      	ldr	r2, [pc, #300]	; (8002c48 <HAL_GPIO_Init+0x318>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00d      	beq.n	8002b3a <HAL_GPIO_Init+0x20a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4a      	ldr	r2, [pc, #296]	; (8002c4c <HAL_GPIO_Init+0x31c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <HAL_GPIO_Init+0x206>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a49      	ldr	r2, [pc, #292]	; (8002c50 <HAL_GPIO_Init+0x320>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_GPIO_Init+0x202>
 8002b2e:	2306      	movs	r3, #6
 8002b30:	e00c      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e00a      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b36:	2305      	movs	r3, #5
 8002b38:	e008      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	e006      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e004      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e002      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_GPIO_Init+0x21c>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f002 0203 	and.w	r2, r2, #3
 8002b52:	0092      	lsls	r2, r2, #2
 8002b54:	4093      	lsls	r3, r2
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b5c:	4935      	ldr	r1, [pc, #212]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	3302      	adds	r3, #2
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b8e:	4a31      	ldr	r2, [pc, #196]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b94:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb8:	4a26      	ldr	r2, [pc, #152]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bbe:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002be2:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c0c:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3301      	adds	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b0f      	cmp	r3, #15
 8002c1c:	f67f ae96 	bls.w	800294c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40013800 	.word	0x40013800
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40020400 	.word	0x40020400
 8002c40:	40020800 	.word	0x40020800
 8002c44:	40020c00 	.word	0x40020c00
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40021400 	.word	0x40021400
 8002c50:	40021800 	.word	0x40021800
 8002c54:	40013c00 	.word	0x40013c00

08002c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
 8002c64:	4613      	mov	r3, r2
 8002c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c68:	787b      	ldrb	r3, [r7, #1]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c74:	e003      	b.n	8002c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	041a      	lsls	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e12b      	b.n	8002ef6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe fed4 	bl	8001a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2224      	movs	r2, #36	; 0x24
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cf0:	f000 fe8a 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8002cf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4a81      	ldr	r2, [pc, #516]	; (8002f00 <HAL_I2C_Init+0x274>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d807      	bhi.n	8002d10 <HAL_I2C_Init+0x84>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_I2C_Init+0x278>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	bf94      	ite	ls
 8002d08:	2301      	movls	r3, #1
 8002d0a:	2300      	movhi	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e006      	b.n	8002d1e <HAL_I2C_Init+0x92>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a7d      	ldr	r2, [pc, #500]	; (8002f08 <HAL_I2C_Init+0x27c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	bf94      	ite	ls
 8002d18:	2301      	movls	r3, #1
 8002d1a:	2300      	movhi	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0e7      	b.n	8002ef6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4a78      	ldr	r2, [pc, #480]	; (8002f0c <HAL_I2C_Init+0x280>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	0c9b      	lsrs	r3, r3, #18
 8002d30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a6a      	ldr	r2, [pc, #424]	; (8002f00 <HAL_I2C_Init+0x274>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d802      	bhi.n	8002d60 <HAL_I2C_Init+0xd4>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	e009      	b.n	8002d74 <HAL_I2C_Init+0xe8>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	4a69      	ldr	r2, [pc, #420]	; (8002f10 <HAL_I2C_Init+0x284>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	3301      	adds	r3, #1
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	495c      	ldr	r1, [pc, #368]	; (8002f00 <HAL_I2C_Init+0x274>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d819      	bhi.n	8002dc8 <HAL_I2C_Init+0x13c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e59      	subs	r1, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da2:	1c59      	adds	r1, r3, #1
 8002da4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002da8:	400b      	ands	r3, r1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_I2C_Init+0x138>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1e59      	subs	r1, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc2:	e051      	b.n	8002e68 <HAL_I2C_Init+0x1dc>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e04f      	b.n	8002e68 <HAL_I2C_Init+0x1dc>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d111      	bne.n	8002df4 <HAL_I2C_Init+0x168>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e58      	subs	r0, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	440b      	add	r3, r1
 8002dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de2:	3301      	adds	r3, #1
 8002de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e012      	b.n	8002e1a <HAL_I2C_Init+0x18e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_I2C_Init+0x196>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e022      	b.n	8002e68 <HAL_I2C_Init+0x1dc>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10e      	bne.n	8002e48 <HAL_I2C_Init+0x1bc>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1e58      	subs	r0, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	440b      	add	r3, r1
 8002e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e46:	e00f      	b.n	8002e68 <HAL_I2C_Init+0x1dc>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1e58      	subs	r0, r3, #1
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	0099      	lsls	r1, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	6809      	ldr	r1, [r1, #0]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6911      	ldr	r1, [r2, #16]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68d2      	ldr	r2, [r2, #12]
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	000186a0 	.word	0x000186a0
 8002f04:	001e847f 	.word	0x001e847f
 8002f08:	003d08ff 	.word	0x003d08ff
 8002f0c:	431bde83 	.word	0x431bde83
 8002f10:	10624dd3 	.word	0x10624dd3

08002f14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	460b      	mov	r3, r1
 8002f22:	817b      	strh	r3, [r7, #10]
 8002f24:	4613      	mov	r3, r2
 8002f26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f28:	f7ff f814 	bl	8001f54 <HAL_GetTick>
 8002f2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	f040 80e0 	bne.w	80030fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2319      	movs	r3, #25
 8002f42:	2201      	movs	r2, #1
 8002f44:	4970      	ldr	r1, [pc, #448]	; (8003108 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fa92 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	e0d3      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_I2C_Master_Transmit+0x50>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e0cc      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1ea>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d007      	beq.n	8002f8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2221      	movs	r2, #33	; 0x21
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	893a      	ldrh	r2, [r7, #8]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4a50      	ldr	r2, [pc, #320]	; (800310c <HAL_I2C_Master_Transmit+0x1f8>)
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fcc:	8979      	ldrh	r1, [r7, #10]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f9ca 	bl	800336c <I2C_MasterRequestWrite>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e08d      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ff8:	e066      	b.n	80030c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	6a39      	ldr	r1, [r7, #32]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fb50 	bl	80036a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b04      	cmp	r3, #4
 8003010:	d107      	bne.n	8003022 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003020:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06b      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	781a      	ldrb	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d11b      	bne.n	800309c <HAL_I2C_Master_Transmit+0x188>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	d017      	beq.n	800309c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	6a39      	ldr	r1, [r7, #32]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fb47 	bl	8003734 <I2C_WaitOnBTFFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00d      	beq.n	80030c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d107      	bne.n	80030c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e01a      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d194      	bne.n	8002ffa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	00100002 	.word	0x00100002
 800310c:	ffff0000 	.word	0xffff0000

08003110 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
 800311c:	460b      	mov	r3, r1
 800311e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7fe ff18 	bl	8001f54 <HAL_GetTick>
 8003124:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b20      	cmp	r3, #32
 8003134:	f040 8111 	bne.w	800335a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	2319      	movs	r3, #25
 800313e:	2201      	movs	r2, #1
 8003140:	4988      	ldr	r1, [pc, #544]	; (8003364 <HAL_I2C_IsDeviceReady+0x254>)
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f994 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	e104      	b.n	800335c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_I2C_IsDeviceReady+0x50>
 800315c:	2302      	movs	r3, #2
 800315e:	e0fd      	b.n	800335c <HAL_I2C_IsDeviceReady+0x24c>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d007      	beq.n	8003186 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003194:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2224      	movs	r2, #36	; 0x24
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a70      	ldr	r2, [pc, #448]	; (8003368 <HAL_I2C_IsDeviceReady+0x258>)
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f952 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e0:	d103      	bne.n	80031ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e0b6      	b.n	800335c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ee:	897b      	ldrh	r3, [r7, #10]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031fe:	f7fe fea9 	bl	8001f54 <HAL_GetTick>
 8003202:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b02      	cmp	r3, #2
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003232:	e025      	b.n	8003280 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003234:	f7fe fe8e 	bl	8001f54 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d302      	bcc.n	800324a <HAL_I2C_IsDeviceReady+0x13a>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	22a0      	movs	r2, #160	; 0xa0
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	bf0c      	ite	eq
 8003278:	2301      	moveq	r3, #1
 800327a:	2300      	movne	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2ba0      	cmp	r3, #160	; 0xa0
 800328a:	d005      	beq.n	8003298 <HAL_I2C_IsDeviceReady+0x188>
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <HAL_I2C_IsDeviceReady+0x188>
 8003292:	7dbb      	ldrb	r3, [r7, #22]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0cd      	beq.n	8003234 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d129      	bne.n	8003302 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2319      	movs	r3, #25
 80032da:	2201      	movs	r2, #1
 80032dc:	4921      	ldr	r1, [pc, #132]	; (8003364 <HAL_I2C_IsDeviceReady+0x254>)
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f8c6 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e036      	b.n	800335c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e02c      	b.n	800335c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003310:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800331a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2319      	movs	r3, #25
 8003322:	2201      	movs	r2, #1
 8003324:	490f      	ldr	r1, [pc, #60]	; (8003364 <HAL_I2C_IsDeviceReady+0x254>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f8a2 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e012      	b.n	800335c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	3301      	adds	r3, #1
 800333a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	f4ff af32 	bcc.w	80031aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	00100002 	.word	0x00100002
 8003368:	ffff0000 	.word	0xffff0000

0800336c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	460b      	mov	r3, r1
 800337a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d006      	beq.n	8003396 <I2C_MasterRequestWrite+0x2a>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d003      	beq.n	8003396 <I2C_MasterRequestWrite+0x2a>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003394:	d108      	bne.n	80033a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e00b      	b.n	80033c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	2b12      	cmp	r3, #18
 80033ae:	d107      	bne.n	80033c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f84f 	bl	8003470 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e6:	d103      	bne.n	80033f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e035      	b.n	8003460 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fc:	d108      	bne.n	8003410 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	e01b      	b.n	8003448 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003410:	897b      	ldrh	r3, [r7, #10]
 8003412:	11db      	asrs	r3, r3, #7
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f003 0306 	and.w	r3, r3, #6
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f063 030f 	orn	r3, r3, #15
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	490e      	ldr	r1, [pc, #56]	; (8003468 <I2C_MasterRequestWrite+0xfc>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f898 	bl	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e010      	b.n	8003460 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <I2C_MasterRequestWrite+0x100>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f888 	bl	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	00010008 	.word	0x00010008
 800346c:	00010002 	.word	0x00010002

08003470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	e048      	b.n	8003514 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d044      	beq.n	8003514 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe fd63 	bl	8001f54 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d139      	bne.n	8003514 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	0c1b      	lsrs	r3, r3, #16
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d10d      	bne.n	80034c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	43da      	mvns	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	e00c      	b.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	43da      	mvns	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4013      	ands	r3, r2
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d116      	bne.n	8003514 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e023      	b.n	800355c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10d      	bne.n	800353a <I2C_WaitOnFlagUntilTimeout+0xca>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	43da      	mvns	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4013      	ands	r3, r2
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	e00c      	b.n	8003554 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	43da      	mvns	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	4013      	ands	r3, r2
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	461a      	mov	r2, r3
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	429a      	cmp	r2, r3
 8003558:	d093      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003572:	e071      	b.n	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	d123      	bne.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003592:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800359c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f043 0204 	orr.w	r2, r3, #4
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e067      	b.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d041      	beq.n	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7fe fcbe 	bl	8001f54 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d136      	bne.n	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10c      	bne.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	43da      	mvns	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4013      	ands	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e00b      	b.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	43da      	mvns	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf14      	ite	ne
 8003620:	2301      	movne	r3, #1
 8003622:	2300      	moveq	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e021      	b.n	800369c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10c      	bne.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	43da      	mvns	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e00b      	b.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4013      	ands	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f af6d 	bne.w	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b0:	e034      	b.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f886 	bl	80037c4 <I2C_IsAcknowledgeFailed>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e034      	b.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d028      	beq.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fc43 	bl	8001f54 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11d      	bne.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ea:	2b80      	cmp	r3, #128	; 0x80
 80036ec:	d016      	beq.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e007      	b.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d1c3      	bne.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003740:	e034      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f83e 	bl	80037c4 <I2C_IsAcknowledgeFailed>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e034      	b.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d028      	beq.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fe fbfb 	bl	8001f54 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11d      	bne.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d016      	beq.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e007      	b.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d1c3      	bne.n	8003742 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037da:	d11b      	bne.n	8003814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f043 0204 	orr.w	r2, r3, #4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0cc      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003838:	4b68      	ldr	r3, [pc, #416]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d90c      	bls.n	8003860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b65      	ldr	r3, [pc, #404]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b63      	ldr	r3, [pc, #396]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0b8      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a58      	ldr	r2, [pc, #352]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003890:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a52      	ldr	r2, [pc, #328]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800389a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b50      	ldr	r3, [pc, #320]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	494d      	ldr	r1, [pc, #308]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d044      	beq.n	8003944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d119      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e06f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e067      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003902:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 0203 	bic.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4934      	ldr	r1, [pc, #208]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003914:	f7fe fb1e 	bl	8001f54 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	e00a      	b.n	8003932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7fe fb1a 	bl	8001f54 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 020c 	and.w	r2, r3, #12
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d1eb      	bne.n	800391c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003944:	4b25      	ldr	r3, [pc, #148]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d20c      	bcs.n	800396c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e032      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4916      	ldr	r1, [pc, #88]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490e      	ldr	r1, [pc, #56]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039aa:	f000 f887 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490a      	ldr	r1, [pc, #40]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe f8d8 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023c00 	.word	0x40023c00
 80039e0:	40023800 	.word	0x40023800
 80039e4:	08008c48 	.word	0x08008c48
 80039e8:	20000008 	.word	0x20000008
 80039ec:	2000000c 	.word	0x2000000c

080039f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000008 	.word	0x20000008

08003a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a0c:	f7ff fff0 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	0a9b      	lsrs	r3, r3, #10
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4903      	ldr	r1, [pc, #12]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	08008c58 	.word	0x08008c58

08003a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a34:	f7ff ffdc 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0b5b      	lsrs	r3, r3, #13
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4903      	ldr	r1, [pc, #12]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	08008c58 	.word	0x08008c58

08003a58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	220f      	movs	r2, #15
 8003a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a68:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0203 	and.w	r2, r3, #3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a8c:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	08db      	lsrs	r3, r3, #3
 8003a92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <HAL_RCC_GetClockConfig+0x60>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 020f 	and.w	r2, r3, #15
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	601a      	str	r2, [r3, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40023c00 	.word	0x40023c00

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac0:	b0ae      	sub	sp, #184	; 0xb8
 8003ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ae2:	4bcb      	ldr	r3, [pc, #812]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	f200 8206 	bhi.w	8003efc <HAL_RCC_GetSysClockFreq+0x440>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b2d 	.word	0x08003b2d
 8003afc:	08003efd 	.word	0x08003efd
 8003b00:	08003efd 	.word	0x08003efd
 8003b04:	08003efd 	.word	0x08003efd
 8003b08:	08003b35 	.word	0x08003b35
 8003b0c:	08003efd 	.word	0x08003efd
 8003b10:	08003efd 	.word	0x08003efd
 8003b14:	08003efd 	.word	0x08003efd
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003efd 	.word	0x08003efd
 8003b20:	08003efd 	.word	0x08003efd
 8003b24:	08003efd 	.word	0x08003efd
 8003b28:	08003d2d 	.word	0x08003d2d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b2c:	4bb9      	ldr	r3, [pc, #740]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b32:	e1e7      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b34:	4bb8      	ldr	r3, [pc, #736]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b3a:	e1e3      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b3c:	4bb4      	ldr	r3, [pc, #720]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b48:	4bb1      	ldr	r3, [pc, #708]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d071      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b54:	4bae      	ldr	r3, [pc, #696]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b60:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	f04f 0000 	mov.w	r0, #0
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	0159      	lsls	r1, r3, #5
 8003b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8c:	0150      	lsls	r0, r2, #5
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4621      	mov	r1, r4
 8003b94:	1a51      	subs	r1, r2, r1
 8003b96:	6439      	str	r1, [r7, #64]	; 0x40
 8003b98:	4629      	mov	r1, r5
 8003b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003bac:	4649      	mov	r1, r9
 8003bae:	018b      	lsls	r3, r1, #6
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	018a      	lsls	r2, r1, #6
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1a51      	subs	r1, r2, r1
 8003bbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	00cb      	lsls	r3, r1, #3
 8003bd8:	4641      	mov	r1, r8
 8003bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bde:	4641      	mov	r1, r8
 8003be0:	00ca      	lsls	r2, r1, #3
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	4603      	mov	r3, r0
 8003be8:	4622      	mov	r2, r4
 8003bea:	189b      	adds	r3, r3, r2
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30
 8003bee:	462b      	mov	r3, r5
 8003bf0:	460a      	mov	r2, r1
 8003bf2:	eb42 0303 	adc.w	r3, r2, r3
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c04:	4629      	mov	r1, r5
 8003c06:	024b      	lsls	r3, r1, #9
 8003c08:	4621      	mov	r1, r4
 8003c0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c0e:	4621      	mov	r1, r4
 8003c10:	024a      	lsls	r2, r1, #9
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c28:	f7fd f82e 	bl	8000c88 <__aeabi_uldivmod>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4613      	mov	r3, r2
 8003c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c36:	e067      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c38:	4b75      	ldr	r3, [pc, #468]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c44:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c52:	2300      	movs	r3, #0
 8003c54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	0159      	lsls	r1, r3, #5
 8003c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6c:	0150      	lsls	r0, r2, #5
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4621      	mov	r1, r4
 8003c74:	1a51      	subs	r1, r2, r1
 8003c76:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c78:	4629      	mov	r1, r5
 8003c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003c8c:	4649      	mov	r1, r9
 8003c8e:	018b      	lsls	r3, r1, #6
 8003c90:	4641      	mov	r1, r8
 8003c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c96:	4641      	mov	r1, r8
 8003c98:	018a      	lsls	r2, r1, #6
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cba:	4692      	mov	sl, r2
 8003cbc:	469b      	mov	fp, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	eb1a 0303 	adds.w	r3, sl, r3
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	028b      	lsls	r3, r1, #10
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	028a      	lsls	r2, r1, #10
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8003cf4:	677a      	str	r2, [r7, #116]	; 0x74
 8003cf6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003cfa:	f7fc ffc5 	bl	8000c88 <__aeabi_uldivmod>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4613      	mov	r3, r2
 8003d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d08:	4b41      	ldr	r3, [pc, #260]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	3301      	adds	r3, #1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d2a:	e0eb      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d2c:	4b38      	ldr	r3, [pc, #224]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d38:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d06b      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d44:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d56:	663b      	str	r3, [r7, #96]	; 0x60
 8003d58:	2300      	movs	r3, #0
 8003d5a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d60:	4622      	mov	r2, r4
 8003d62:	462b      	mov	r3, r5
 8003d64:	f04f 0000 	mov.w	r0, #0
 8003d68:	f04f 0100 	mov.w	r1, #0
 8003d6c:	0159      	lsls	r1, r3, #5
 8003d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d72:	0150      	lsls	r0, r2, #5
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4621      	mov	r1, r4
 8003d7a:	1a51      	subs	r1, r2, r1
 8003d7c:	61b9      	str	r1, [r7, #24]
 8003d7e:	4629      	mov	r1, r5
 8003d80:	eb63 0301 	sbc.w	r3, r3, r1
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d92:	4659      	mov	r1, fp
 8003d94:	018b      	lsls	r3, r1, #6
 8003d96:	4651      	mov	r1, sl
 8003d98:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	018a      	lsls	r2, r1, #6
 8003da0:	4651      	mov	r1, sl
 8003da2:	ebb2 0801 	subs.w	r8, r2, r1
 8003da6:	4659      	mov	r1, fp
 8003da8:	eb63 0901 	sbc.w	r9, r3, r1
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dc0:	4690      	mov	r8, r2
 8003dc2:	4699      	mov	r9, r3
 8003dc4:	4623      	mov	r3, r4
 8003dc6:	eb18 0303 	adds.w	r3, r8, r3
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	462b      	mov	r3, r5
 8003dce:	eb49 0303 	adc.w	r3, r9, r3
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003de0:	4629      	mov	r1, r5
 8003de2:	024b      	lsls	r3, r1, #9
 8003de4:	4621      	mov	r1, r4
 8003de6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dea:	4621      	mov	r1, r4
 8003dec:	024a      	lsls	r2, r1, #9
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003df6:	2200      	movs	r2, #0
 8003df8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dfa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003dfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e00:	f7fc ff42 	bl	8000c88 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4613      	mov	r3, r2
 8003e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e0e:	e065      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x420>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	00f42400 	.word	0x00f42400
 8003e18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1c:	4b3d      	ldr	r3, [pc, #244]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	2200      	movs	r2, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	4611      	mov	r1, r2
 8003e28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8003e2e:	2300      	movs	r3, #0
 8003e30:	657b      	str	r3, [r7, #84]	; 0x54
 8003e32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e36:	4642      	mov	r2, r8
 8003e38:	464b      	mov	r3, r9
 8003e3a:	f04f 0000 	mov.w	r0, #0
 8003e3e:	f04f 0100 	mov.w	r1, #0
 8003e42:	0159      	lsls	r1, r3, #5
 8003e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e48:	0150      	lsls	r0, r2, #5
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4641      	mov	r1, r8
 8003e50:	1a51      	subs	r1, r2, r1
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	4649      	mov	r1, r9
 8003e56:	eb63 0301 	sbc.w	r3, r3, r1
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e68:	4659      	mov	r1, fp
 8003e6a:	018b      	lsls	r3, r1, #6
 8003e6c:	4651      	mov	r1, sl
 8003e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e72:	4651      	mov	r1, sl
 8003e74:	018a      	lsls	r2, r1, #6
 8003e76:	4651      	mov	r1, sl
 8003e78:	1a54      	subs	r4, r2, r1
 8003e7a:	4659      	mov	r1, fp
 8003e7c:	eb63 0501 	sbc.w	r5, r3, r1
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	00eb      	lsls	r3, r5, #3
 8003e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8e:	00e2      	lsls	r2, r4, #3
 8003e90:	4614      	mov	r4, r2
 8003e92:	461d      	mov	r5, r3
 8003e94:	4643      	mov	r3, r8
 8003e96:	18e3      	adds	r3, r4, r3
 8003e98:	603b      	str	r3, [r7, #0]
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	f04f 0200 	mov.w	r2, #0
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eae:	4629      	mov	r1, r5
 8003eb0:	028b      	lsls	r3, r1, #10
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb8:	4621      	mov	r1, r4
 8003eba:	028a      	lsls	r2, r1, #10
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003eca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ece:	f7fc fedb 	bl	8000c88 <__aeabi_uldivmod>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003edc:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x458>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	0f1b      	lsrs	r3, r3, #28
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003efa:	e003      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	37b8      	adds	r7, #184	; 0xb8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800
 8003f18:	00f42400 	.word	0x00f42400

08003f1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e28d      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8083 	beq.w	8004042 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f3c:	4b94      	ldr	r3, [pc, #592]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d019      	beq.n	8003f7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f48:	4b91      	ldr	r3, [pc, #580]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d106      	bne.n	8003f62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f54:	4b8e      	ldr	r3, [pc, #568]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f60:	d00c      	beq.n	8003f7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f62:	4b8b      	ldr	r3, [pc, #556]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d112      	bne.n	8003f94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6e:	4b88      	ldr	r3, [pc, #544]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7a:	d10b      	bne.n	8003f94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7c:	4b84      	ldr	r3, [pc, #528]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d05b      	beq.n	8004040 <HAL_RCC_OscConfig+0x124>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d157      	bne.n	8004040 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e25a      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9c:	d106      	bne.n	8003fac <HAL_RCC_OscConfig+0x90>
 8003f9e:	4b7c      	ldr	r3, [pc, #496]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a7b      	ldr	r2, [pc, #492]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e01d      	b.n	8003fe8 <HAL_RCC_OscConfig+0xcc>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0xb4>
 8003fb6:	4b76      	ldr	r3, [pc, #472]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a75      	ldr	r2, [pc, #468]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b73      	ldr	r3, [pc, #460]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a72      	ldr	r2, [pc, #456]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0xcc>
 8003fd0:	4b6f      	ldr	r3, [pc, #444]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a6e      	ldr	r2, [pc, #440]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b6c      	ldr	r3, [pc, #432]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6b      	ldr	r2, [pc, #428]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd ffb0 	bl	8001f54 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fd ffac 	bl	8001f54 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e21f      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b61      	ldr	r3, [pc, #388]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xdc>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004018:	f7fd ff9c 	bl	8001f54 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004020:	f7fd ff98 	bl	8001f54 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e20b      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	4b57      	ldr	r3, [pc, #348]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x104>
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d06f      	beq.n	800412e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800404e:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b00      	cmp	r3, #0
 8004058:	d017      	beq.n	800408a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800405a:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004062:	2b08      	cmp	r3, #8
 8004064:	d105      	bne.n	8004072 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004066:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d11c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407e:	4b44      	ldr	r3, [pc, #272]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408a:	4b41      	ldr	r3, [pc, #260]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCC_OscConfig+0x186>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1d3      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b6:	e03a      	b.n	800412e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_OscConfig+0x278>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd ff45 	bl	8001f54 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ce:	f7fd ff41 	bl	8001f54 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e1b4      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e0:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	4b28      	ldr	r3, [pc, #160]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4925      	ldr	r1, [pc, #148]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	e015      	b.n	800412e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <HAL_RCC_OscConfig+0x278>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd ff24 	bl	8001f54 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004110:	f7fd ff20 	bl	8001f54 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e193      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004122:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d036      	beq.n	80041a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004144:	2201      	movs	r2, #1
 8004146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004148:	f7fd ff04 	bl	8001f54 <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004150:	f7fd ff00 	bl	8001f54 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e173      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_OscConfig+0x274>)
 8004164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x234>
 800416e:	e01b      	b.n	80041a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fd feed 	bl	8001f54 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	e00e      	b.n	800419c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417e:	f7fd fee9 	bl	8001f54 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d907      	bls.n	800419c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e15c      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
 8004190:	40023800 	.word	0x40023800
 8004194:	42470000 	.word	0x42470000
 8004198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800419c:	4b8a      	ldr	r3, [pc, #552]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ea      	bne.n	800417e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8097 	beq.w	80042e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ba:	4b83      	ldr	r3, [pc, #524]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10f      	bne.n	80041e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	4b7f      	ldr	r3, [pc, #508]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a7e      	ldr	r2, [pc, #504]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b7c      	ldr	r3, [pc, #496]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e2:	2301      	movs	r3, #1
 80041e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b79      	ldr	r3, [pc, #484]	; (80043cc <HAL_RCC_OscConfig+0x4b0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d118      	bne.n	8004224 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b76      	ldr	r3, [pc, #472]	; (80043cc <HAL_RCC_OscConfig+0x4b0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a75      	ldr	r2, [pc, #468]	; (80043cc <HAL_RCC_OscConfig+0x4b0>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fe:	f7fd fea9 	bl	8001f54 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fd fea5 	bl	8001f54 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e118      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	4b6c      	ldr	r3, [pc, #432]	; (80043cc <HAL_RCC_OscConfig+0x4b0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x31e>
 800422c:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a65      	ldr	r2, [pc, #404]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e01c      	b.n	8004274 <HAL_RCC_OscConfig+0x358>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b05      	cmp	r3, #5
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x340>
 8004242:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a60      	ldr	r2, [pc, #384]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	4b5e      	ldr	r3, [pc, #376]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a5d      	ldr	r2, [pc, #372]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0x358>
 800425c:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a59      	ldr	r2, [pc, #356]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	4b57      	ldr	r3, [pc, #348]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	4a56      	ldr	r2, [pc, #344]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 800426e:	f023 0304 	bic.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fd fe6a 	bl	8001f54 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	e00a      	b.n	800429a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fd fe66 	bl	8001f54 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0d7      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 800429c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ee      	beq.n	8004284 <HAL_RCC_OscConfig+0x368>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fd fe54 	bl	8001f54 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd fe50 	bl	8001f54 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0c1      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c6:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ee      	bne.n	80042b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	4a3a      	ldr	r2, [pc, #232]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80ad 	beq.w	8004448 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ee:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d060      	beq.n	80043bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d145      	bne.n	800438e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <HAL_RCC_OscConfig+0x4b4>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd fe24 	bl	8001f54 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004310:	f7fd fe20 	bl	8001f54 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e093      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	019b      	lsls	r3, r3, #6
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	071b      	lsls	r3, r3, #28
 800435a:	491b      	ldr	r1, [pc, #108]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_RCC_OscConfig+0x4b4>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fd fdf5 	bl	8001f54 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436e:	f7fd fdf1 	bl	8001f54 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e064      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x452>
 800438c:	e05c      	b.n	8004448 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <HAL_RCC_OscConfig+0x4b4>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd fdde 	bl	8001f54 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439c:	f7fd fdda 	bl	8001f54 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04d      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_RCC_OscConfig+0x4ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x480>
 80043ba:	e045      	b.n	8004448 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e040      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40007000 	.word	0x40007000
 80043d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d4:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_RCC_OscConfig+0x538>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d030      	beq.n	8004444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d129      	bne.n	8004444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d122      	bne.n	8004444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004404:	4013      	ands	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800440a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800440c:	4293      	cmp	r3, r2
 800440e:	d119      	bne.n	8004444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	3b01      	subs	r3, #1
 800441e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d10f      	bne.n	8004444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d107      	bne.n	8004444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800

08004458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e041      	b.n	80044ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f839 	bl	80044f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f000 f9c0 	bl	800481c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	d001      	beq.n	8004524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e04e      	b.n	80045c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a23      	ldr	r2, [pc, #140]	; (80045d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d022      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d01d      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1f      	ldr	r2, [pc, #124]	; (80045d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d018      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1e      	ldr	r2, [pc, #120]	; (80045d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d013      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1c      	ldr	r2, [pc, #112]	; (80045dc <HAL_TIM_Base_Start_IT+0xd0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00e      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d009      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <HAL_TIM_Base_Start_IT+0x80>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d111      	bne.n	80045b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b06      	cmp	r3, #6
 800459c:	d010      	beq.n	80045c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0201 	orr.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	e007      	b.n	80045c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40010400 	.word	0x40010400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40001800 	.word	0x40001800

080045ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d020      	beq.n	8004650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01b      	beq.n	8004650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0202 	mvn.w	r2, #2
 8004620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8d2 	bl	80047e0 <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8c4 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f8d5 	bl	80047f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d020      	beq.n	800469c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01b      	beq.n	800469c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0204 	mvn.w	r2, #4
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f8ac 	bl	80047e0 <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f89e 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8af 	bl	80047f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d020      	beq.n	80046e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0208 	mvn.w	r2, #8
 80046b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2204      	movs	r2, #4
 80046be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f886 	bl	80047e0 <HAL_TIM_IC_CaptureCallback>
 80046d4:	e005      	b.n	80046e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f878 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f889 	bl	80047f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d020      	beq.n	8004734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0210 	mvn.w	r2, #16
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2208      	movs	r2, #8
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f860 	bl	80047e0 <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f852 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f863 	bl	80047f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00c      	beq.n	8004758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fe40 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00c      	beq.n	800477c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d007      	beq.n	800477c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f906 	bl	8004988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00c      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f834 	bl	8004808 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0220 	mvn.w	r2, #32
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8d8 	bl	8004974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a46      	ldr	r2, [pc, #280]	; (8004948 <TIM_Base_SetConfig+0x12c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483a:	d00f      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a43      	ldr	r2, [pc, #268]	; (800494c <TIM_Base_SetConfig+0x130>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00b      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a42      	ldr	r2, [pc, #264]	; (8004950 <TIM_Base_SetConfig+0x134>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d007      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <TIM_Base_SetConfig+0x138>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_Base_SetConfig+0x40>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a40      	ldr	r2, [pc, #256]	; (8004958 <TIM_Base_SetConfig+0x13c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d108      	bne.n	800486e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a35      	ldr	r2, [pc, #212]	; (8004948 <TIM_Base_SetConfig+0x12c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d02b      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487c:	d027      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a32      	ldr	r2, [pc, #200]	; (800494c <TIM_Base_SetConfig+0x130>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d023      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a31      	ldr	r2, [pc, #196]	; (8004950 <TIM_Base_SetConfig+0x134>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01f      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a30      	ldr	r2, [pc, #192]	; (8004954 <TIM_Base_SetConfig+0x138>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01b      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <TIM_Base_SetConfig+0x13c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d017      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2e      	ldr	r2, [pc, #184]	; (800495c <TIM_Base_SetConfig+0x140>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <TIM_Base_SetConfig+0x144>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <TIM_Base_SetConfig+0x148>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <TIM_Base_SetConfig+0x14c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <TIM_Base_SetConfig+0x150>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a29      	ldr	r2, [pc, #164]	; (8004970 <TIM_Base_SetConfig+0x154>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a10      	ldr	r2, [pc, #64]	; (8004948 <TIM_Base_SetConfig+0x12c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0xf8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <TIM_Base_SetConfig+0x13c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d103      	bne.n	800491c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d105      	bne.n	800493a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]
  }
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40010400 	.word	0x40010400
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400
 8004964:	40014800 	.word	0x40014800
 8004968:	40001800 	.word	0x40001800
 800496c:	40001c00 	.word	0x40001c00
 8004970:	40002000 	.word	0x40002000

08004974 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e042      	b.n	8004a34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd f894 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f973 	bl	8004ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d175      	bne.n	8004b48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Transmit+0x2c>
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e06e      	b.n	8004b4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2221      	movs	r2, #33	; 0x21
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a7a:	f7fd fa6b 	bl	8001f54 <HAL_GetTick>
 8004a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a94:	d108      	bne.n	8004aa8 <HAL_UART_Transmit+0x6c>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	61bb      	str	r3, [r7, #24]
 8004aa6:	e003      	b.n	8004ab0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ab0:	e02e      	b.n	8004b10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f848 	bl	8004b52 <UART_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e03a      	b.n	8004b4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	3302      	adds	r3, #2
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e007      	b.n	8004b02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	3301      	adds	r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1cb      	bne.n	8004ab2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2140      	movs	r1, #64	; 0x40
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f814 	bl	8004b52 <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e006      	b.n	8004b4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	60b9      	str	r1, [r7, #8]
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b62:	e03b      	b.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d037      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7fd f9f2 	bl	8001f54 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	6a3a      	ldr	r2, [r7, #32]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e03a      	b.n	8004bfc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d023      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b80      	cmp	r3, #128	; 0x80
 8004b98:	d020      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d01d      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d116      	bne.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f81d 	bl	8004c04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e00f      	b.n	8004bfc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d0b4      	beq.n	8004b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b095      	sub	sp, #84	; 0x54
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c2c:	643a      	str	r2, [r7, #64]	; 0x40
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3314      	adds	r3, #20
 8004c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d119      	bne.n	8004cb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f023 0310 	bic.w	r3, r3, #16
 8004c92:	647b      	str	r3, [r7, #68]	; 0x44
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c9c:	61ba      	str	r2, [r7, #24]
 8004c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6979      	ldr	r1, [r7, #20]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cbe:	bf00      	nop
 8004cc0:	3754      	adds	r7, #84	; 0x54
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b0c0      	sub	sp, #256	; 0x100
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	68d9      	ldr	r1, [r3, #12]
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	ea40 0301 	orr.w	r3, r0, r1
 8004cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d24:	f021 010c 	bic.w	r1, r1, #12
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d32:	430b      	orrs	r3, r1
 8004d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	6999      	ldr	r1, [r3, #24]
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	ea40 0301 	orr.w	r3, r0, r1
 8004d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b8f      	ldr	r3, [pc, #572]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d005      	beq.n	8004d6c <UART_SetConfig+0xa0>
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b8d      	ldr	r3, [pc, #564]	; (8004f9c <UART_SetConfig+0x2d0>)
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d104      	bne.n	8004d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fe fe60 	bl	8003a30 <HAL_RCC_GetPCLK2Freq>
 8004d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d74:	e003      	b.n	8004d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d76:	f7fe fe47 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8004d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d88:	f040 810c 	bne.w	8004fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	1891      	adds	r1, r2, r2
 8004da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004da6:	415b      	adcs	r3, r3
 8004da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dae:	4621      	mov	r1, r4
 8004db0:	eb12 0801 	adds.w	r8, r2, r1
 8004db4:	4629      	mov	r1, r5
 8004db6:	eb43 0901 	adc.w	r9, r3, r1
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	eb18 0303 	adds.w	r3, r8, r3
 8004dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ddc:	462b      	mov	r3, r5
 8004dde:	eb49 0303 	adc.w	r3, r9, r3
 8004de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	18db      	adds	r3, r3, r3
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004e00:	4613      	mov	r3, r2
 8004e02:	eb42 0303 	adc.w	r3, r2, r3
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
 8004e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e10:	f7fb ff3a 	bl	8000c88 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	011c      	lsls	r4, r3, #4
 8004e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	1891      	adds	r1, r2, r2
 8004e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e3c:	415b      	adcs	r3, r3
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e44:	4641      	mov	r1, r8
 8004e46:	eb12 0a01 	adds.w	sl, r2, r1
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e64:	4692      	mov	sl, r2
 8004e66:	469b      	mov	fp, r3
 8004e68:	4643      	mov	r3, r8
 8004e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e72:	464b      	mov	r3, r9
 8004e74:	eb4b 0303 	adc.w	r3, fp, r3
 8004e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e90:	460b      	mov	r3, r1
 8004e92:	18db      	adds	r3, r3, r3
 8004e94:	643b      	str	r3, [r7, #64]	; 0x40
 8004e96:	4613      	mov	r3, r2
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ea6:	f7fb feef 	bl	8000c88 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2264      	movs	r2, #100	; 0x64
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	1acb      	subs	r3, r1, r3
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed4:	441c      	add	r4, r3
 8004ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	1891      	adds	r1, r2, r2
 8004eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ef0:	415b      	adcs	r3, r3
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ef8:	4641      	mov	r1, r8
 8004efa:	1851      	adds	r1, r2, r1
 8004efc:	6339      	str	r1, [r7, #48]	; 0x30
 8004efe:	4649      	mov	r1, r9
 8004f00:	414b      	adcs	r3, r1
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f10:	4659      	mov	r1, fp
 8004f12:	00cb      	lsls	r3, r1, #3
 8004f14:	4651      	mov	r1, sl
 8004f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	00ca      	lsls	r2, r1, #3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	4642      	mov	r2, r8
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	460a      	mov	r2, r1
 8004f30:	eb42 0303 	adc.w	r3, r2, r3
 8004f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	18db      	adds	r3, r3, r3
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f52:	4613      	mov	r3, r2
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f62:	f7fb fe91 	bl	8000c88 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2164      	movs	r1, #100	; 0x64
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 0207 	and.w	r2, r3, #7
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4422      	add	r2, r4
 8004f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f94:	e106      	b.n	80051a4 <UART_SetConfig+0x4d8>
 8004f96:	bf00      	nop
 8004f98:	40011000 	.word	0x40011000
 8004f9c:	40011400 	.word	0x40011400
 8004fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	464b      	mov	r3, r9
 8004fba:	1891      	adds	r1, r2, r2
 8004fbc:	6239      	str	r1, [r7, #32]
 8004fbe:	415b      	adcs	r3, r3
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb43 0501 	adc.w	r5, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	00eb      	lsls	r3, r5, #3
 8004fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fde:	00e2      	lsls	r2, r4, #3
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	18e3      	adds	r3, r4, r3
 8004fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fec:	464b      	mov	r3, r9
 8004fee:	eb45 0303 	adc.w	r3, r5, r3
 8004ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005012:	4629      	mov	r1, r5
 8005014:	008b      	lsls	r3, r1, #2
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501c:	4621      	mov	r1, r4
 800501e:	008a      	lsls	r2, r1, #2
 8005020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005024:	f7fb fe30 	bl	8000c88 <__aeabi_uldivmod>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <UART_SetConfig+0x4e4>)
 800502e:	fba3 2302 	umull	r2, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	011c      	lsls	r4, r3, #4
 8005036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005048:	4642      	mov	r2, r8
 800504a:	464b      	mov	r3, r9
 800504c:	1891      	adds	r1, r2, r2
 800504e:	61b9      	str	r1, [r7, #24]
 8005050:	415b      	adcs	r3, r3
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005058:	4641      	mov	r1, r8
 800505a:	1851      	adds	r1, r2, r1
 800505c:	6139      	str	r1, [r7, #16]
 800505e:	4649      	mov	r1, r9
 8005060:	414b      	adcs	r3, r1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005070:	4659      	mov	r1, fp
 8005072:	00cb      	lsls	r3, r1, #3
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507a:	4651      	mov	r1, sl
 800507c:	00ca      	lsls	r2, r1, #3
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	4603      	mov	r3, r0
 8005084:	4642      	mov	r2, r8
 8005086:	189b      	adds	r3, r3, r2
 8005088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800508c:	464b      	mov	r3, r9
 800508e:	460a      	mov	r2, r1
 8005090:	eb42 0303 	adc.w	r3, r2, r3
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050b0:	4649      	mov	r1, r9
 80050b2:	008b      	lsls	r3, r1, #2
 80050b4:	4641      	mov	r1, r8
 80050b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ba:	4641      	mov	r1, r8
 80050bc:	008a      	lsls	r2, r1, #2
 80050be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050c2:	f7fb fde1 	bl	8000c88 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	4b38      	ldr	r3, [pc, #224]	; (80051b0 <UART_SetConfig+0x4e4>)
 80050ce:	fba3 2301 	umull	r2, r3, r3, r1
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2264      	movs	r2, #100	; 0x64
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	1acb      	subs	r3, r1, r3
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	3332      	adds	r3, #50	; 0x32
 80050e0:	4a33      	ldr	r2, [pc, #204]	; (80051b0 <UART_SetConfig+0x4e4>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ec:	441c      	add	r4, r3
 80050ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f2:	2200      	movs	r2, #0
 80050f4:	673b      	str	r3, [r7, #112]	; 0x70
 80050f6:	677a      	str	r2, [r7, #116]	; 0x74
 80050f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050fc:	4642      	mov	r2, r8
 80050fe:	464b      	mov	r3, r9
 8005100:	1891      	adds	r1, r2, r2
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	415b      	adcs	r3, r3
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510c:	4641      	mov	r1, r8
 800510e:	1851      	adds	r1, r2, r1
 8005110:	6039      	str	r1, [r7, #0]
 8005112:	4649      	mov	r1, r9
 8005114:	414b      	adcs	r3, r1
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005124:	4659      	mov	r1, fp
 8005126:	00cb      	lsls	r3, r1, #3
 8005128:	4651      	mov	r1, sl
 800512a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800512e:	4651      	mov	r1, sl
 8005130:	00ca      	lsls	r2, r1, #3
 8005132:	4610      	mov	r0, r2
 8005134:	4619      	mov	r1, r3
 8005136:	4603      	mov	r3, r0
 8005138:	4642      	mov	r2, r8
 800513a:	189b      	adds	r3, r3, r2
 800513c:	66bb      	str	r3, [r7, #104]	; 0x68
 800513e:	464b      	mov	r3, r9
 8005140:	460a      	mov	r2, r1
 8005142:	eb42 0303 	adc.w	r3, r2, r3
 8005146:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	663b      	str	r3, [r7, #96]	; 0x60
 8005152:	667a      	str	r2, [r7, #100]	; 0x64
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005160:	4649      	mov	r1, r9
 8005162:	008b      	lsls	r3, r1, #2
 8005164:	4641      	mov	r1, r8
 8005166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800516a:	4641      	mov	r1, r8
 800516c:	008a      	lsls	r2, r1, #2
 800516e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005172:	f7fb fd89 	bl	8000c88 <__aeabi_uldivmod>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <UART_SetConfig+0x4e4>)
 800517c:	fba3 1302 	umull	r1, r3, r3, r2
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	2164      	movs	r1, #100	; 0x64
 8005184:	fb01 f303 	mul.w	r3, r1, r3
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	3332      	adds	r3, #50	; 0x32
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <UART_SetConfig+0x4e4>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	f003 020f 	and.w	r2, r3, #15
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4422      	add	r2, r4
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051aa:	46bd      	mov	sp, r7
 80051ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b0:	51eb851f 	.word	0x51eb851f

080051b4 <__cvt>:
 80051b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	ec55 4b10 	vmov	r4, r5, d0
 80051bc:	2d00      	cmp	r5, #0
 80051be:	460e      	mov	r6, r1
 80051c0:	4619      	mov	r1, r3
 80051c2:	462b      	mov	r3, r5
 80051c4:	bfbb      	ittet	lt
 80051c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051ca:	461d      	movlt	r5, r3
 80051cc:	2300      	movge	r3, #0
 80051ce:	232d      	movlt	r3, #45	; 0x2d
 80051d0:	700b      	strb	r3, [r1, #0]
 80051d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051d8:	4691      	mov	r9, r2
 80051da:	f023 0820 	bic.w	r8, r3, #32
 80051de:	bfbc      	itt	lt
 80051e0:	4622      	movlt	r2, r4
 80051e2:	4614      	movlt	r4, r2
 80051e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051e8:	d005      	beq.n	80051f6 <__cvt+0x42>
 80051ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051ee:	d100      	bne.n	80051f2 <__cvt+0x3e>
 80051f0:	3601      	adds	r6, #1
 80051f2:	2102      	movs	r1, #2
 80051f4:	e000      	b.n	80051f8 <__cvt+0x44>
 80051f6:	2103      	movs	r1, #3
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	ab02      	add	r3, sp, #8
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	ec45 4b10 	vmov	d0, r4, r5
 8005204:	4653      	mov	r3, sl
 8005206:	4632      	mov	r2, r6
 8005208:	f000 fe6a 	bl	8005ee0 <_dtoa_r>
 800520c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005210:	4607      	mov	r7, r0
 8005212:	d102      	bne.n	800521a <__cvt+0x66>
 8005214:	f019 0f01 	tst.w	r9, #1
 8005218:	d022      	beq.n	8005260 <__cvt+0xac>
 800521a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800521e:	eb07 0906 	add.w	r9, r7, r6
 8005222:	d110      	bne.n	8005246 <__cvt+0x92>
 8005224:	783b      	ldrb	r3, [r7, #0]
 8005226:	2b30      	cmp	r3, #48	; 0x30
 8005228:	d10a      	bne.n	8005240 <__cvt+0x8c>
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fc69 	bl	8000b08 <__aeabi_dcmpeq>
 8005236:	b918      	cbnz	r0, 8005240 <__cvt+0x8c>
 8005238:	f1c6 0601 	rsb	r6, r6, #1
 800523c:	f8ca 6000 	str.w	r6, [sl]
 8005240:	f8da 3000 	ldr.w	r3, [sl]
 8005244:	4499      	add	r9, r3
 8005246:	2200      	movs	r2, #0
 8005248:	2300      	movs	r3, #0
 800524a:	4620      	mov	r0, r4
 800524c:	4629      	mov	r1, r5
 800524e:	f7fb fc5b 	bl	8000b08 <__aeabi_dcmpeq>
 8005252:	b108      	cbz	r0, 8005258 <__cvt+0xa4>
 8005254:	f8cd 900c 	str.w	r9, [sp, #12]
 8005258:	2230      	movs	r2, #48	; 0x30
 800525a:	9b03      	ldr	r3, [sp, #12]
 800525c:	454b      	cmp	r3, r9
 800525e:	d307      	bcc.n	8005270 <__cvt+0xbc>
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005264:	1bdb      	subs	r3, r3, r7
 8005266:	4638      	mov	r0, r7
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	b004      	add	sp, #16
 800526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005270:	1c59      	adds	r1, r3, #1
 8005272:	9103      	str	r1, [sp, #12]
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e7f0      	b.n	800525a <__cvt+0xa6>

08005278 <__exponent>:
 8005278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527a:	4603      	mov	r3, r0
 800527c:	2900      	cmp	r1, #0
 800527e:	bfb8      	it	lt
 8005280:	4249      	neglt	r1, r1
 8005282:	f803 2b02 	strb.w	r2, [r3], #2
 8005286:	bfb4      	ite	lt
 8005288:	222d      	movlt	r2, #45	; 0x2d
 800528a:	222b      	movge	r2, #43	; 0x2b
 800528c:	2909      	cmp	r1, #9
 800528e:	7042      	strb	r2, [r0, #1]
 8005290:	dd2a      	ble.n	80052e8 <__exponent+0x70>
 8005292:	f10d 0207 	add.w	r2, sp, #7
 8005296:	4617      	mov	r7, r2
 8005298:	260a      	movs	r6, #10
 800529a:	4694      	mov	ip, r2
 800529c:	fb91 f5f6 	sdiv	r5, r1, r6
 80052a0:	fb06 1415 	mls	r4, r6, r5, r1
 80052a4:	3430      	adds	r4, #48	; 0x30
 80052a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80052aa:	460c      	mov	r4, r1
 80052ac:	2c63      	cmp	r4, #99	; 0x63
 80052ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80052b2:	4629      	mov	r1, r5
 80052b4:	dcf1      	bgt.n	800529a <__exponent+0x22>
 80052b6:	3130      	adds	r1, #48	; 0x30
 80052b8:	f1ac 0402 	sub.w	r4, ip, #2
 80052bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052c0:	1c41      	adds	r1, r0, #1
 80052c2:	4622      	mov	r2, r4
 80052c4:	42ba      	cmp	r2, r7
 80052c6:	d30a      	bcc.n	80052de <__exponent+0x66>
 80052c8:	f10d 0209 	add.w	r2, sp, #9
 80052cc:	eba2 020c 	sub.w	r2, r2, ip
 80052d0:	42bc      	cmp	r4, r7
 80052d2:	bf88      	it	hi
 80052d4:	2200      	movhi	r2, #0
 80052d6:	4413      	add	r3, r2
 80052d8:	1a18      	subs	r0, r3, r0
 80052da:	b003      	add	sp, #12
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052de:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80052e6:	e7ed      	b.n	80052c4 <__exponent+0x4c>
 80052e8:	2330      	movs	r3, #48	; 0x30
 80052ea:	3130      	adds	r1, #48	; 0x30
 80052ec:	7083      	strb	r3, [r0, #2]
 80052ee:	70c1      	strb	r1, [r0, #3]
 80052f0:	1d03      	adds	r3, r0, #4
 80052f2:	e7f1      	b.n	80052d8 <__exponent+0x60>

080052f4 <_printf_float>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	ed2d 8b02 	vpush	{d8}
 80052fc:	b08d      	sub	sp, #52	; 0x34
 80052fe:	460c      	mov	r4, r1
 8005300:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005304:	4616      	mov	r6, r2
 8005306:	461f      	mov	r7, r3
 8005308:	4605      	mov	r5, r0
 800530a:	f000 fce7 	bl	8005cdc <_localeconv_r>
 800530e:	f8d0 a000 	ldr.w	sl, [r0]
 8005312:	4650      	mov	r0, sl
 8005314:	f7fa ffcc 	bl	80002b0 <strlen>
 8005318:	2300      	movs	r3, #0
 800531a:	930a      	str	r3, [sp, #40]	; 0x28
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	9305      	str	r3, [sp, #20]
 8005320:	f8d8 3000 	ldr.w	r3, [r8]
 8005324:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005328:	3307      	adds	r3, #7
 800532a:	f023 0307 	bic.w	r3, r3, #7
 800532e:	f103 0208 	add.w	r2, r3, #8
 8005332:	f8c8 2000 	str.w	r2, [r8]
 8005336:	e9d3 8900 	ldrd	r8, r9, [r3]
 800533a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800533e:	9307      	str	r3, [sp, #28]
 8005340:	f8cd 8018 	str.w	r8, [sp, #24]
 8005344:	ee08 0a10 	vmov	s16, r0
 8005348:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800534c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005350:	4b9e      	ldr	r3, [pc, #632]	; (80055cc <_printf_float+0x2d8>)
 8005352:	f04f 32ff 	mov.w	r2, #4294967295
 8005356:	f7fb fc09 	bl	8000b6c <__aeabi_dcmpun>
 800535a:	bb88      	cbnz	r0, 80053c0 <_printf_float+0xcc>
 800535c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005360:	4b9a      	ldr	r3, [pc, #616]	; (80055cc <_printf_float+0x2d8>)
 8005362:	f04f 32ff 	mov.w	r2, #4294967295
 8005366:	f7fb fbe3 	bl	8000b30 <__aeabi_dcmple>
 800536a:	bb48      	cbnz	r0, 80053c0 <_printf_float+0xcc>
 800536c:	2200      	movs	r2, #0
 800536e:	2300      	movs	r3, #0
 8005370:	4640      	mov	r0, r8
 8005372:	4649      	mov	r1, r9
 8005374:	f7fb fbd2 	bl	8000b1c <__aeabi_dcmplt>
 8005378:	b110      	cbz	r0, 8005380 <_printf_float+0x8c>
 800537a:	232d      	movs	r3, #45	; 0x2d
 800537c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005380:	4a93      	ldr	r2, [pc, #588]	; (80055d0 <_printf_float+0x2dc>)
 8005382:	4b94      	ldr	r3, [pc, #592]	; (80055d4 <_printf_float+0x2e0>)
 8005384:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005388:	bf94      	ite	ls
 800538a:	4690      	movls	r8, r2
 800538c:	4698      	movhi	r8, r3
 800538e:	2303      	movs	r3, #3
 8005390:	6123      	str	r3, [r4, #16]
 8005392:	9b05      	ldr	r3, [sp, #20]
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	f04f 0900 	mov.w	r9, #0
 800539e:	9700      	str	r7, [sp, #0]
 80053a0:	4633      	mov	r3, r6
 80053a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80053a4:	4621      	mov	r1, r4
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 f9da 	bl	8005760 <_printf_common>
 80053ac:	3001      	adds	r0, #1
 80053ae:	f040 8090 	bne.w	80054d2 <_printf_float+0x1de>
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295
 80053b6:	b00d      	add	sp, #52	; 0x34
 80053b8:	ecbd 8b02 	vpop	{d8}
 80053bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	4640      	mov	r0, r8
 80053c6:	4649      	mov	r1, r9
 80053c8:	f7fb fbd0 	bl	8000b6c <__aeabi_dcmpun>
 80053cc:	b140      	cbz	r0, 80053e0 <_printf_float+0xec>
 80053ce:	464b      	mov	r3, r9
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bfbc      	itt	lt
 80053d4:	232d      	movlt	r3, #45	; 0x2d
 80053d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053da:	4a7f      	ldr	r2, [pc, #508]	; (80055d8 <_printf_float+0x2e4>)
 80053dc:	4b7f      	ldr	r3, [pc, #508]	; (80055dc <_printf_float+0x2e8>)
 80053de:	e7d1      	b.n	8005384 <_printf_float+0x90>
 80053e0:	6863      	ldr	r3, [r4, #4]
 80053e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053e6:	9206      	str	r2, [sp, #24]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	d13f      	bne.n	800546c <_printf_float+0x178>
 80053ec:	2306      	movs	r3, #6
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	9b05      	ldr	r3, [sp, #20]
 80053f2:	6861      	ldr	r1, [r4, #4]
 80053f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053f8:	2300      	movs	r3, #0
 80053fa:	9303      	str	r3, [sp, #12]
 80053fc:	ab0a      	add	r3, sp, #40	; 0x28
 80053fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005402:	ab09      	add	r3, sp, #36	; 0x24
 8005404:	ec49 8b10 	vmov	d0, r8, r9
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	6022      	str	r2, [r4, #0]
 800540c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005410:	4628      	mov	r0, r5
 8005412:	f7ff fecf 	bl	80051b4 <__cvt>
 8005416:	9b06      	ldr	r3, [sp, #24]
 8005418:	9909      	ldr	r1, [sp, #36]	; 0x24
 800541a:	2b47      	cmp	r3, #71	; 0x47
 800541c:	4680      	mov	r8, r0
 800541e:	d108      	bne.n	8005432 <_printf_float+0x13e>
 8005420:	1cc8      	adds	r0, r1, #3
 8005422:	db02      	blt.n	800542a <_printf_float+0x136>
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	4299      	cmp	r1, r3
 8005428:	dd41      	ble.n	80054ae <_printf_float+0x1ba>
 800542a:	f1ab 0302 	sub.w	r3, fp, #2
 800542e:	fa5f fb83 	uxtb.w	fp, r3
 8005432:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005436:	d820      	bhi.n	800547a <_printf_float+0x186>
 8005438:	3901      	subs	r1, #1
 800543a:	465a      	mov	r2, fp
 800543c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005440:	9109      	str	r1, [sp, #36]	; 0x24
 8005442:	f7ff ff19 	bl	8005278 <__exponent>
 8005446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005448:	1813      	adds	r3, r2, r0
 800544a:	2a01      	cmp	r2, #1
 800544c:	4681      	mov	r9, r0
 800544e:	6123      	str	r3, [r4, #16]
 8005450:	dc02      	bgt.n	8005458 <_printf_float+0x164>
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	07d2      	lsls	r2, r2, #31
 8005456:	d501      	bpl.n	800545c <_printf_float+0x168>
 8005458:	3301      	adds	r3, #1
 800545a:	6123      	str	r3, [r4, #16]
 800545c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005460:	2b00      	cmp	r3, #0
 8005462:	d09c      	beq.n	800539e <_printf_float+0xaa>
 8005464:	232d      	movs	r3, #45	; 0x2d
 8005466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800546a:	e798      	b.n	800539e <_printf_float+0xaa>
 800546c:	9a06      	ldr	r2, [sp, #24]
 800546e:	2a47      	cmp	r2, #71	; 0x47
 8005470:	d1be      	bne.n	80053f0 <_printf_float+0xfc>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1bc      	bne.n	80053f0 <_printf_float+0xfc>
 8005476:	2301      	movs	r3, #1
 8005478:	e7b9      	b.n	80053ee <_printf_float+0xfa>
 800547a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800547e:	d118      	bne.n	80054b2 <_printf_float+0x1be>
 8005480:	2900      	cmp	r1, #0
 8005482:	6863      	ldr	r3, [r4, #4]
 8005484:	dd0b      	ble.n	800549e <_printf_float+0x1aa>
 8005486:	6121      	str	r1, [r4, #16]
 8005488:	b913      	cbnz	r3, 8005490 <_printf_float+0x19c>
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	07d0      	lsls	r0, r2, #31
 800548e:	d502      	bpl.n	8005496 <_printf_float+0x1a2>
 8005490:	3301      	adds	r3, #1
 8005492:	440b      	add	r3, r1
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	65a1      	str	r1, [r4, #88]	; 0x58
 8005498:	f04f 0900 	mov.w	r9, #0
 800549c:	e7de      	b.n	800545c <_printf_float+0x168>
 800549e:	b913      	cbnz	r3, 80054a6 <_printf_float+0x1b2>
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	07d2      	lsls	r2, r2, #31
 80054a4:	d501      	bpl.n	80054aa <_printf_float+0x1b6>
 80054a6:	3302      	adds	r3, #2
 80054a8:	e7f4      	b.n	8005494 <_printf_float+0x1a0>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e7f2      	b.n	8005494 <_printf_float+0x1a0>
 80054ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b4:	4299      	cmp	r1, r3
 80054b6:	db05      	blt.n	80054c4 <_printf_float+0x1d0>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	6121      	str	r1, [r4, #16]
 80054bc:	07d8      	lsls	r0, r3, #31
 80054be:	d5ea      	bpl.n	8005496 <_printf_float+0x1a2>
 80054c0:	1c4b      	adds	r3, r1, #1
 80054c2:	e7e7      	b.n	8005494 <_printf_float+0x1a0>
 80054c4:	2900      	cmp	r1, #0
 80054c6:	bfd4      	ite	le
 80054c8:	f1c1 0202 	rsble	r2, r1, #2
 80054cc:	2201      	movgt	r2, #1
 80054ce:	4413      	add	r3, r2
 80054d0:	e7e0      	b.n	8005494 <_printf_float+0x1a0>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	055a      	lsls	r2, r3, #21
 80054d6:	d407      	bmi.n	80054e8 <_printf_float+0x1f4>
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	4642      	mov	r2, r8
 80054dc:	4631      	mov	r1, r6
 80054de:	4628      	mov	r0, r5
 80054e0:	47b8      	blx	r7
 80054e2:	3001      	adds	r0, #1
 80054e4:	d12c      	bne.n	8005540 <_printf_float+0x24c>
 80054e6:	e764      	b.n	80053b2 <_printf_float+0xbe>
 80054e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ec:	f240 80e0 	bls.w	80056b0 <_printf_float+0x3bc>
 80054f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054f4:	2200      	movs	r2, #0
 80054f6:	2300      	movs	r3, #0
 80054f8:	f7fb fb06 	bl	8000b08 <__aeabi_dcmpeq>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d034      	beq.n	800556a <_printf_float+0x276>
 8005500:	4a37      	ldr	r2, [pc, #220]	; (80055e0 <_printf_float+0x2ec>)
 8005502:	2301      	movs	r3, #1
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	47b8      	blx	r7
 800550a:	3001      	adds	r0, #1
 800550c:	f43f af51 	beq.w	80053b2 <_printf_float+0xbe>
 8005510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005514:	429a      	cmp	r2, r3
 8005516:	db02      	blt.n	800551e <_printf_float+0x22a>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	07d8      	lsls	r0, r3, #31
 800551c:	d510      	bpl.n	8005540 <_printf_float+0x24c>
 800551e:	ee18 3a10 	vmov	r3, s16
 8005522:	4652      	mov	r2, sl
 8005524:	4631      	mov	r1, r6
 8005526:	4628      	mov	r0, r5
 8005528:	47b8      	blx	r7
 800552a:	3001      	adds	r0, #1
 800552c:	f43f af41 	beq.w	80053b2 <_printf_float+0xbe>
 8005530:	f04f 0800 	mov.w	r8, #0
 8005534:	f104 091a 	add.w	r9, r4, #26
 8005538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800553a:	3b01      	subs	r3, #1
 800553c:	4543      	cmp	r3, r8
 800553e:	dc09      	bgt.n	8005554 <_printf_float+0x260>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	079b      	lsls	r3, r3, #30
 8005544:	f100 8107 	bmi.w	8005756 <_printf_float+0x462>
 8005548:	68e0      	ldr	r0, [r4, #12]
 800554a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800554c:	4298      	cmp	r0, r3
 800554e:	bfb8      	it	lt
 8005550:	4618      	movlt	r0, r3
 8005552:	e730      	b.n	80053b6 <_printf_float+0xc2>
 8005554:	2301      	movs	r3, #1
 8005556:	464a      	mov	r2, r9
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	47b8      	blx	r7
 800555e:	3001      	adds	r0, #1
 8005560:	f43f af27 	beq.w	80053b2 <_printf_float+0xbe>
 8005564:	f108 0801 	add.w	r8, r8, #1
 8005568:	e7e6      	b.n	8005538 <_printf_float+0x244>
 800556a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	dc39      	bgt.n	80055e4 <_printf_float+0x2f0>
 8005570:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <_printf_float+0x2ec>)
 8005572:	2301      	movs	r3, #1
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	f43f af19 	beq.w	80053b2 <_printf_float+0xbe>
 8005580:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005584:	4313      	orrs	r3, r2
 8005586:	d102      	bne.n	800558e <_printf_float+0x29a>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	07d9      	lsls	r1, r3, #31
 800558c:	d5d8      	bpl.n	8005540 <_printf_float+0x24c>
 800558e:	ee18 3a10 	vmov	r3, s16
 8005592:	4652      	mov	r2, sl
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f af09 	beq.w	80053b2 <_printf_float+0xbe>
 80055a0:	f04f 0900 	mov.w	r9, #0
 80055a4:	f104 0a1a 	add.w	sl, r4, #26
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	425b      	negs	r3, r3
 80055ac:	454b      	cmp	r3, r9
 80055ae:	dc01      	bgt.n	80055b4 <_printf_float+0x2c0>
 80055b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b2:	e792      	b.n	80054da <_printf_float+0x1e6>
 80055b4:	2301      	movs	r3, #1
 80055b6:	4652      	mov	r2, sl
 80055b8:	4631      	mov	r1, r6
 80055ba:	4628      	mov	r0, r5
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	f43f aef7 	beq.w	80053b2 <_printf_float+0xbe>
 80055c4:	f109 0901 	add.w	r9, r9, #1
 80055c8:	e7ee      	b.n	80055a8 <_printf_float+0x2b4>
 80055ca:	bf00      	nop
 80055cc:	7fefffff 	.word	0x7fefffff
 80055d0:	08008c60 	.word	0x08008c60
 80055d4:	08008c64 	.word	0x08008c64
 80055d8:	08008c68 	.word	0x08008c68
 80055dc:	08008c6c 	.word	0x08008c6c
 80055e0:	08008c70 	.word	0x08008c70
 80055e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055e8:	429a      	cmp	r2, r3
 80055ea:	bfa8      	it	ge
 80055ec:	461a      	movge	r2, r3
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	4691      	mov	r9, r2
 80055f2:	dc37      	bgt.n	8005664 <_printf_float+0x370>
 80055f4:	f04f 0b00 	mov.w	fp, #0
 80055f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055fc:	f104 021a 	add.w	r2, r4, #26
 8005600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005602:	9305      	str	r3, [sp, #20]
 8005604:	eba3 0309 	sub.w	r3, r3, r9
 8005608:	455b      	cmp	r3, fp
 800560a:	dc33      	bgt.n	8005674 <_printf_float+0x380>
 800560c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005610:	429a      	cmp	r2, r3
 8005612:	db3b      	blt.n	800568c <_printf_float+0x398>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07da      	lsls	r2, r3, #31
 8005618:	d438      	bmi.n	800568c <_printf_float+0x398>
 800561a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800561e:	eba2 0903 	sub.w	r9, r2, r3
 8005622:	9b05      	ldr	r3, [sp, #20]
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	4591      	cmp	r9, r2
 8005628:	bfa8      	it	ge
 800562a:	4691      	movge	r9, r2
 800562c:	f1b9 0f00 	cmp.w	r9, #0
 8005630:	dc35      	bgt.n	800569e <_printf_float+0x3aa>
 8005632:	f04f 0800 	mov.w	r8, #0
 8005636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800563a:	f104 0a1a 	add.w	sl, r4, #26
 800563e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	eba3 0309 	sub.w	r3, r3, r9
 8005648:	4543      	cmp	r3, r8
 800564a:	f77f af79 	ble.w	8005540 <_printf_float+0x24c>
 800564e:	2301      	movs	r3, #1
 8005650:	4652      	mov	r2, sl
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	f43f aeaa 	beq.w	80053b2 <_printf_float+0xbe>
 800565e:	f108 0801 	add.w	r8, r8, #1
 8005662:	e7ec      	b.n	800563e <_printf_float+0x34a>
 8005664:	4613      	mov	r3, r2
 8005666:	4631      	mov	r1, r6
 8005668:	4642      	mov	r2, r8
 800566a:	4628      	mov	r0, r5
 800566c:	47b8      	blx	r7
 800566e:	3001      	adds	r0, #1
 8005670:	d1c0      	bne.n	80055f4 <_printf_float+0x300>
 8005672:	e69e      	b.n	80053b2 <_printf_float+0xbe>
 8005674:	2301      	movs	r3, #1
 8005676:	4631      	mov	r1, r6
 8005678:	4628      	mov	r0, r5
 800567a:	9205      	str	r2, [sp, #20]
 800567c:	47b8      	blx	r7
 800567e:	3001      	adds	r0, #1
 8005680:	f43f ae97 	beq.w	80053b2 <_printf_float+0xbe>
 8005684:	9a05      	ldr	r2, [sp, #20]
 8005686:	f10b 0b01 	add.w	fp, fp, #1
 800568a:	e7b9      	b.n	8005600 <_printf_float+0x30c>
 800568c:	ee18 3a10 	vmov	r3, s16
 8005690:	4652      	mov	r2, sl
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	d1be      	bne.n	800561a <_printf_float+0x326>
 800569c:	e689      	b.n	80053b2 <_printf_float+0xbe>
 800569e:	9a05      	ldr	r2, [sp, #20]
 80056a0:	464b      	mov	r3, r9
 80056a2:	4442      	add	r2, r8
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	d1c1      	bne.n	8005632 <_printf_float+0x33e>
 80056ae:	e680      	b.n	80053b2 <_printf_float+0xbe>
 80056b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056b2:	2a01      	cmp	r2, #1
 80056b4:	dc01      	bgt.n	80056ba <_printf_float+0x3c6>
 80056b6:	07db      	lsls	r3, r3, #31
 80056b8:	d53a      	bpl.n	8005730 <_printf_float+0x43c>
 80056ba:	2301      	movs	r3, #1
 80056bc:	4642      	mov	r2, r8
 80056be:	4631      	mov	r1, r6
 80056c0:	4628      	mov	r0, r5
 80056c2:	47b8      	blx	r7
 80056c4:	3001      	adds	r0, #1
 80056c6:	f43f ae74 	beq.w	80053b2 <_printf_float+0xbe>
 80056ca:	ee18 3a10 	vmov	r3, s16
 80056ce:	4652      	mov	r2, sl
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	f43f ae6b 	beq.w	80053b2 <_printf_float+0xbe>
 80056dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056e0:	2200      	movs	r2, #0
 80056e2:	2300      	movs	r3, #0
 80056e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80056e8:	f7fb fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 80056ec:	b9d8      	cbnz	r0, 8005726 <_printf_float+0x432>
 80056ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056f2:	f108 0201 	add.w	r2, r8, #1
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	d10e      	bne.n	800571e <_printf_float+0x42a>
 8005700:	e657      	b.n	80053b2 <_printf_float+0xbe>
 8005702:	2301      	movs	r3, #1
 8005704:	4652      	mov	r2, sl
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	47b8      	blx	r7
 800570c:	3001      	adds	r0, #1
 800570e:	f43f ae50 	beq.w	80053b2 <_printf_float+0xbe>
 8005712:	f108 0801 	add.w	r8, r8, #1
 8005716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005718:	3b01      	subs	r3, #1
 800571a:	4543      	cmp	r3, r8
 800571c:	dcf1      	bgt.n	8005702 <_printf_float+0x40e>
 800571e:	464b      	mov	r3, r9
 8005720:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005724:	e6da      	b.n	80054dc <_printf_float+0x1e8>
 8005726:	f04f 0800 	mov.w	r8, #0
 800572a:	f104 0a1a 	add.w	sl, r4, #26
 800572e:	e7f2      	b.n	8005716 <_printf_float+0x422>
 8005730:	2301      	movs	r3, #1
 8005732:	4642      	mov	r2, r8
 8005734:	e7df      	b.n	80056f6 <_printf_float+0x402>
 8005736:	2301      	movs	r3, #1
 8005738:	464a      	mov	r2, r9
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f ae36 	beq.w	80053b2 <_printf_float+0xbe>
 8005746:	f108 0801 	add.w	r8, r8, #1
 800574a:	68e3      	ldr	r3, [r4, #12]
 800574c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800574e:	1a5b      	subs	r3, r3, r1
 8005750:	4543      	cmp	r3, r8
 8005752:	dcf0      	bgt.n	8005736 <_printf_float+0x442>
 8005754:	e6f8      	b.n	8005548 <_printf_float+0x254>
 8005756:	f04f 0800 	mov.w	r8, #0
 800575a:	f104 0919 	add.w	r9, r4, #25
 800575e:	e7f4      	b.n	800574a <_printf_float+0x456>

08005760 <_printf_common>:
 8005760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005764:	4616      	mov	r6, r2
 8005766:	4699      	mov	r9, r3
 8005768:	688a      	ldr	r2, [r1, #8]
 800576a:	690b      	ldr	r3, [r1, #16]
 800576c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005770:	4293      	cmp	r3, r2
 8005772:	bfb8      	it	lt
 8005774:	4613      	movlt	r3, r2
 8005776:	6033      	str	r3, [r6, #0]
 8005778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800577c:	4607      	mov	r7, r0
 800577e:	460c      	mov	r4, r1
 8005780:	b10a      	cbz	r2, 8005786 <_printf_common+0x26>
 8005782:	3301      	adds	r3, #1
 8005784:	6033      	str	r3, [r6, #0]
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	0699      	lsls	r1, r3, #26
 800578a:	bf42      	ittt	mi
 800578c:	6833      	ldrmi	r3, [r6, #0]
 800578e:	3302      	addmi	r3, #2
 8005790:	6033      	strmi	r3, [r6, #0]
 8005792:	6825      	ldr	r5, [r4, #0]
 8005794:	f015 0506 	ands.w	r5, r5, #6
 8005798:	d106      	bne.n	80057a8 <_printf_common+0x48>
 800579a:	f104 0a19 	add.w	sl, r4, #25
 800579e:	68e3      	ldr	r3, [r4, #12]
 80057a0:	6832      	ldr	r2, [r6, #0]
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	42ab      	cmp	r3, r5
 80057a6:	dc26      	bgt.n	80057f6 <_printf_common+0x96>
 80057a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057ac:	1e13      	subs	r3, r2, #0
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	bf18      	it	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	0692      	lsls	r2, r2, #26
 80057b6:	d42b      	bmi.n	8005810 <_printf_common+0xb0>
 80057b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057bc:	4649      	mov	r1, r9
 80057be:	4638      	mov	r0, r7
 80057c0:	47c0      	blx	r8
 80057c2:	3001      	adds	r0, #1
 80057c4:	d01e      	beq.n	8005804 <_printf_common+0xa4>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	6922      	ldr	r2, [r4, #16]
 80057ca:	f003 0306 	and.w	r3, r3, #6
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	bf02      	ittt	eq
 80057d2:	68e5      	ldreq	r5, [r4, #12]
 80057d4:	6833      	ldreq	r3, [r6, #0]
 80057d6:	1aed      	subeq	r5, r5, r3
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	bf0c      	ite	eq
 80057dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057e0:	2500      	movne	r5, #0
 80057e2:	4293      	cmp	r3, r2
 80057e4:	bfc4      	itt	gt
 80057e6:	1a9b      	subgt	r3, r3, r2
 80057e8:	18ed      	addgt	r5, r5, r3
 80057ea:	2600      	movs	r6, #0
 80057ec:	341a      	adds	r4, #26
 80057ee:	42b5      	cmp	r5, r6
 80057f0:	d11a      	bne.n	8005828 <_printf_common+0xc8>
 80057f2:	2000      	movs	r0, #0
 80057f4:	e008      	b.n	8005808 <_printf_common+0xa8>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4652      	mov	r2, sl
 80057fa:	4649      	mov	r1, r9
 80057fc:	4638      	mov	r0, r7
 80057fe:	47c0      	blx	r8
 8005800:	3001      	adds	r0, #1
 8005802:	d103      	bne.n	800580c <_printf_common+0xac>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580c:	3501      	adds	r5, #1
 800580e:	e7c6      	b.n	800579e <_printf_common+0x3e>
 8005810:	18e1      	adds	r1, r4, r3
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	2030      	movs	r0, #48	; 0x30
 8005816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800581a:	4422      	add	r2, r4
 800581c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005824:	3302      	adds	r3, #2
 8005826:	e7c7      	b.n	80057b8 <_printf_common+0x58>
 8005828:	2301      	movs	r3, #1
 800582a:	4622      	mov	r2, r4
 800582c:	4649      	mov	r1, r9
 800582e:	4638      	mov	r0, r7
 8005830:	47c0      	blx	r8
 8005832:	3001      	adds	r0, #1
 8005834:	d0e6      	beq.n	8005804 <_printf_common+0xa4>
 8005836:	3601      	adds	r6, #1
 8005838:	e7d9      	b.n	80057ee <_printf_common+0x8e>
	...

0800583c <_printf_i>:
 800583c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005840:	7e0f      	ldrb	r7, [r1, #24]
 8005842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005844:	2f78      	cmp	r7, #120	; 0x78
 8005846:	4691      	mov	r9, r2
 8005848:	4680      	mov	r8, r0
 800584a:	460c      	mov	r4, r1
 800584c:	469a      	mov	sl, r3
 800584e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005852:	d807      	bhi.n	8005864 <_printf_i+0x28>
 8005854:	2f62      	cmp	r7, #98	; 0x62
 8005856:	d80a      	bhi.n	800586e <_printf_i+0x32>
 8005858:	2f00      	cmp	r7, #0
 800585a:	f000 80d4 	beq.w	8005a06 <_printf_i+0x1ca>
 800585e:	2f58      	cmp	r7, #88	; 0x58
 8005860:	f000 80c0 	beq.w	80059e4 <_printf_i+0x1a8>
 8005864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800586c:	e03a      	b.n	80058e4 <_printf_i+0xa8>
 800586e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005872:	2b15      	cmp	r3, #21
 8005874:	d8f6      	bhi.n	8005864 <_printf_i+0x28>
 8005876:	a101      	add	r1, pc, #4	; (adr r1, 800587c <_printf_i+0x40>)
 8005878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058e9 	.word	0x080058e9
 8005884:	08005865 	.word	0x08005865
 8005888:	08005865 	.word	0x08005865
 800588c:	08005865 	.word	0x08005865
 8005890:	08005865 	.word	0x08005865
 8005894:	080058e9 	.word	0x080058e9
 8005898:	08005865 	.word	0x08005865
 800589c:	08005865 	.word	0x08005865
 80058a0:	08005865 	.word	0x08005865
 80058a4:	08005865 	.word	0x08005865
 80058a8:	080059ed 	.word	0x080059ed
 80058ac:	08005915 	.word	0x08005915
 80058b0:	080059a7 	.word	0x080059a7
 80058b4:	08005865 	.word	0x08005865
 80058b8:	08005865 	.word	0x08005865
 80058bc:	08005a0f 	.word	0x08005a0f
 80058c0:	08005865 	.word	0x08005865
 80058c4:	08005915 	.word	0x08005915
 80058c8:	08005865 	.word	0x08005865
 80058cc:	08005865 	.word	0x08005865
 80058d0:	080059af 	.word	0x080059af
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	1d1a      	adds	r2, r3, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	602a      	str	r2, [r5, #0]
 80058dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e4:	2301      	movs	r3, #1
 80058e6:	e09f      	b.n	8005a28 <_printf_i+0x1ec>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	682b      	ldr	r3, [r5, #0]
 80058ec:	0607      	lsls	r7, r0, #24
 80058ee:	f103 0104 	add.w	r1, r3, #4
 80058f2:	6029      	str	r1, [r5, #0]
 80058f4:	d501      	bpl.n	80058fa <_printf_i+0xbe>
 80058f6:	681e      	ldr	r6, [r3, #0]
 80058f8:	e003      	b.n	8005902 <_printf_i+0xc6>
 80058fa:	0646      	lsls	r6, r0, #25
 80058fc:	d5fb      	bpl.n	80058f6 <_printf_i+0xba>
 80058fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005902:	2e00      	cmp	r6, #0
 8005904:	da03      	bge.n	800590e <_printf_i+0xd2>
 8005906:	232d      	movs	r3, #45	; 0x2d
 8005908:	4276      	negs	r6, r6
 800590a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590e:	485a      	ldr	r0, [pc, #360]	; (8005a78 <_printf_i+0x23c>)
 8005910:	230a      	movs	r3, #10
 8005912:	e012      	b.n	800593a <_printf_i+0xfe>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	1d19      	adds	r1, r3, #4
 800591a:	6029      	str	r1, [r5, #0]
 800591c:	0605      	lsls	r5, r0, #24
 800591e:	d501      	bpl.n	8005924 <_printf_i+0xe8>
 8005920:	681e      	ldr	r6, [r3, #0]
 8005922:	e002      	b.n	800592a <_printf_i+0xee>
 8005924:	0641      	lsls	r1, r0, #25
 8005926:	d5fb      	bpl.n	8005920 <_printf_i+0xe4>
 8005928:	881e      	ldrh	r6, [r3, #0]
 800592a:	4853      	ldr	r0, [pc, #332]	; (8005a78 <_printf_i+0x23c>)
 800592c:	2f6f      	cmp	r7, #111	; 0x6f
 800592e:	bf0c      	ite	eq
 8005930:	2308      	moveq	r3, #8
 8005932:	230a      	movne	r3, #10
 8005934:	2100      	movs	r1, #0
 8005936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800593a:	6865      	ldr	r5, [r4, #4]
 800593c:	60a5      	str	r5, [r4, #8]
 800593e:	2d00      	cmp	r5, #0
 8005940:	bfa2      	ittt	ge
 8005942:	6821      	ldrge	r1, [r4, #0]
 8005944:	f021 0104 	bicge.w	r1, r1, #4
 8005948:	6021      	strge	r1, [r4, #0]
 800594a:	b90e      	cbnz	r6, 8005950 <_printf_i+0x114>
 800594c:	2d00      	cmp	r5, #0
 800594e:	d04b      	beq.n	80059e8 <_printf_i+0x1ac>
 8005950:	4615      	mov	r5, r2
 8005952:	fbb6 f1f3 	udiv	r1, r6, r3
 8005956:	fb03 6711 	mls	r7, r3, r1, r6
 800595a:	5dc7      	ldrb	r7, [r0, r7]
 800595c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005960:	4637      	mov	r7, r6
 8005962:	42bb      	cmp	r3, r7
 8005964:	460e      	mov	r6, r1
 8005966:	d9f4      	bls.n	8005952 <_printf_i+0x116>
 8005968:	2b08      	cmp	r3, #8
 800596a:	d10b      	bne.n	8005984 <_printf_i+0x148>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	07de      	lsls	r6, r3, #31
 8005970:	d508      	bpl.n	8005984 <_printf_i+0x148>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6861      	ldr	r1, [r4, #4]
 8005976:	4299      	cmp	r1, r3
 8005978:	bfde      	ittt	le
 800597a:	2330      	movle	r3, #48	; 0x30
 800597c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005984:	1b52      	subs	r2, r2, r5
 8005986:	6122      	str	r2, [r4, #16]
 8005988:	f8cd a000 	str.w	sl, [sp]
 800598c:	464b      	mov	r3, r9
 800598e:	aa03      	add	r2, sp, #12
 8005990:	4621      	mov	r1, r4
 8005992:	4640      	mov	r0, r8
 8005994:	f7ff fee4 	bl	8005760 <_printf_common>
 8005998:	3001      	adds	r0, #1
 800599a:	d14a      	bne.n	8005a32 <_printf_i+0x1f6>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	b004      	add	sp, #16
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	f043 0320 	orr.w	r3, r3, #32
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	4833      	ldr	r0, [pc, #204]	; (8005a7c <_printf_i+0x240>)
 80059b0:	2778      	movs	r7, #120	; 0x78
 80059b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	6829      	ldr	r1, [r5, #0]
 80059ba:	061f      	lsls	r7, r3, #24
 80059bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80059c0:	d402      	bmi.n	80059c8 <_printf_i+0x18c>
 80059c2:	065f      	lsls	r7, r3, #25
 80059c4:	bf48      	it	mi
 80059c6:	b2b6      	uxthmi	r6, r6
 80059c8:	07df      	lsls	r7, r3, #31
 80059ca:	bf48      	it	mi
 80059cc:	f043 0320 	orrmi.w	r3, r3, #32
 80059d0:	6029      	str	r1, [r5, #0]
 80059d2:	bf48      	it	mi
 80059d4:	6023      	strmi	r3, [r4, #0]
 80059d6:	b91e      	cbnz	r6, 80059e0 <_printf_i+0x1a4>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	f023 0320 	bic.w	r3, r3, #32
 80059de:	6023      	str	r3, [r4, #0]
 80059e0:	2310      	movs	r3, #16
 80059e2:	e7a7      	b.n	8005934 <_printf_i+0xf8>
 80059e4:	4824      	ldr	r0, [pc, #144]	; (8005a78 <_printf_i+0x23c>)
 80059e6:	e7e4      	b.n	80059b2 <_printf_i+0x176>
 80059e8:	4615      	mov	r5, r2
 80059ea:	e7bd      	b.n	8005968 <_printf_i+0x12c>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	6826      	ldr	r6, [r4, #0]
 80059f0:	6961      	ldr	r1, [r4, #20]
 80059f2:	1d18      	adds	r0, r3, #4
 80059f4:	6028      	str	r0, [r5, #0]
 80059f6:	0635      	lsls	r5, r6, #24
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	d501      	bpl.n	8005a00 <_printf_i+0x1c4>
 80059fc:	6019      	str	r1, [r3, #0]
 80059fe:	e002      	b.n	8005a06 <_printf_i+0x1ca>
 8005a00:	0670      	lsls	r0, r6, #25
 8005a02:	d5fb      	bpl.n	80059fc <_printf_i+0x1c0>
 8005a04:	8019      	strh	r1, [r3, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	4615      	mov	r5, r2
 8005a0c:	e7bc      	b.n	8005988 <_printf_i+0x14c>
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	1d1a      	adds	r2, r3, #4
 8005a12:	602a      	str	r2, [r5, #0]
 8005a14:	681d      	ldr	r5, [r3, #0]
 8005a16:	6862      	ldr	r2, [r4, #4]
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f7fa fbf8 	bl	8000210 <memchr>
 8005a20:	b108      	cbz	r0, 8005a26 <_printf_i+0x1ea>
 8005a22:	1b40      	subs	r0, r0, r5
 8005a24:	6060      	str	r0, [r4, #4]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a30:	e7aa      	b.n	8005988 <_printf_i+0x14c>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	462a      	mov	r2, r5
 8005a36:	4649      	mov	r1, r9
 8005a38:	4640      	mov	r0, r8
 8005a3a:	47d0      	blx	sl
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d0ad      	beq.n	800599c <_printf_i+0x160>
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	079b      	lsls	r3, r3, #30
 8005a44:	d413      	bmi.n	8005a6e <_printf_i+0x232>
 8005a46:	68e0      	ldr	r0, [r4, #12]
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	4298      	cmp	r0, r3
 8005a4c:	bfb8      	it	lt
 8005a4e:	4618      	movlt	r0, r3
 8005a50:	e7a6      	b.n	80059a0 <_printf_i+0x164>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4632      	mov	r2, r6
 8005a56:	4649      	mov	r1, r9
 8005a58:	4640      	mov	r0, r8
 8005a5a:	47d0      	blx	sl
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d09d      	beq.n	800599c <_printf_i+0x160>
 8005a60:	3501      	adds	r5, #1
 8005a62:	68e3      	ldr	r3, [r4, #12]
 8005a64:	9903      	ldr	r1, [sp, #12]
 8005a66:	1a5b      	subs	r3, r3, r1
 8005a68:	42ab      	cmp	r3, r5
 8005a6a:	dcf2      	bgt.n	8005a52 <_printf_i+0x216>
 8005a6c:	e7eb      	b.n	8005a46 <_printf_i+0x20a>
 8005a6e:	2500      	movs	r5, #0
 8005a70:	f104 0619 	add.w	r6, r4, #25
 8005a74:	e7f5      	b.n	8005a62 <_printf_i+0x226>
 8005a76:	bf00      	nop
 8005a78:	08008c72 	.word	0x08008c72
 8005a7c:	08008c83 	.word	0x08008c83

08005a80 <std>:
 8005a80:	2300      	movs	r3, #0
 8005a82:	b510      	push	{r4, lr}
 8005a84:	4604      	mov	r4, r0
 8005a86:	e9c0 3300 	strd	r3, r3, [r0]
 8005a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a8e:	6083      	str	r3, [r0, #8]
 8005a90:	8181      	strh	r1, [r0, #12]
 8005a92:	6643      	str	r3, [r0, #100]	; 0x64
 8005a94:	81c2      	strh	r2, [r0, #14]
 8005a96:	6183      	str	r3, [r0, #24]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	305c      	adds	r0, #92	; 0x5c
 8005a9e:	f000 f914 	bl	8005cca <memset>
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <std+0x58>)
 8005aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <std+0x5c>)
 8005aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <std+0x60>)
 8005aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <std+0x64>)
 8005ab0:	6323      	str	r3, [r4, #48]	; 0x30
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <std+0x68>)
 8005ab4:	6224      	str	r4, [r4, #32]
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d006      	beq.n	8005ac8 <std+0x48>
 8005aba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005abe:	4294      	cmp	r4, r2
 8005ac0:	d002      	beq.n	8005ac8 <std+0x48>
 8005ac2:	33d0      	adds	r3, #208	; 0xd0
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	d105      	bne.n	8005ad4 <std+0x54>
 8005ac8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad0:	f000 b978 	b.w	8005dc4 <__retarget_lock_init_recursive>
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	08005c45 	.word	0x08005c45
 8005adc:	08005c67 	.word	0x08005c67
 8005ae0:	08005c9f 	.word	0x08005c9f
 8005ae4:	08005cc3 	.word	0x08005cc3
 8005ae8:	2000073c 	.word	0x2000073c

08005aec <stdio_exit_handler>:
 8005aec:	4a02      	ldr	r2, [pc, #8]	; (8005af8 <stdio_exit_handler+0xc>)
 8005aee:	4903      	ldr	r1, [pc, #12]	; (8005afc <stdio_exit_handler+0x10>)
 8005af0:	4803      	ldr	r0, [pc, #12]	; (8005b00 <stdio_exit_handler+0x14>)
 8005af2:	f000 b869 	b.w	8005bc8 <_fwalk_sglue>
 8005af6:	bf00      	nop
 8005af8:	20000014 	.word	0x20000014
 8005afc:	08007779 	.word	0x08007779
 8005b00:	20000020 	.word	0x20000020

08005b04 <cleanup_stdio>:
 8005b04:	6841      	ldr	r1, [r0, #4]
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <cleanup_stdio+0x34>)
 8005b08:	4299      	cmp	r1, r3
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	d001      	beq.n	8005b14 <cleanup_stdio+0x10>
 8005b10:	f001 fe32 	bl	8007778 <_fflush_r>
 8005b14:	68a1      	ldr	r1, [r4, #8]
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <cleanup_stdio+0x38>)
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	d002      	beq.n	8005b22 <cleanup_stdio+0x1e>
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f001 fe2b 	bl	8007778 <_fflush_r>
 8005b22:	68e1      	ldr	r1, [r4, #12]
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <cleanup_stdio+0x3c>)
 8005b26:	4299      	cmp	r1, r3
 8005b28:	d004      	beq.n	8005b34 <cleanup_stdio+0x30>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b30:	f001 be22 	b.w	8007778 <_fflush_r>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	bf00      	nop
 8005b38:	2000073c 	.word	0x2000073c
 8005b3c:	200007a4 	.word	0x200007a4
 8005b40:	2000080c 	.word	0x2000080c

08005b44 <global_stdio_init.part.0>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <global_stdio_init.part.0+0x30>)
 8005b48:	4c0b      	ldr	r4, [pc, #44]	; (8005b78 <global_stdio_init.part.0+0x34>)
 8005b4a:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <global_stdio_init.part.0+0x38>)
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	2200      	movs	r2, #0
 8005b52:	2104      	movs	r1, #4
 8005b54:	f7ff ff94 	bl	8005a80 <std>
 8005b58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	2109      	movs	r1, #9
 8005b60:	f7ff ff8e 	bl	8005a80 <std>
 8005b64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b68:	2202      	movs	r2, #2
 8005b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6e:	2112      	movs	r1, #18
 8005b70:	f7ff bf86 	b.w	8005a80 <std>
 8005b74:	20000874 	.word	0x20000874
 8005b78:	2000073c 	.word	0x2000073c
 8005b7c:	08005aed 	.word	0x08005aed

08005b80 <__sfp_lock_acquire>:
 8005b80:	4801      	ldr	r0, [pc, #4]	; (8005b88 <__sfp_lock_acquire+0x8>)
 8005b82:	f000 b920 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 8005b86:	bf00      	nop
 8005b88:	2000087d 	.word	0x2000087d

08005b8c <__sfp_lock_release>:
 8005b8c:	4801      	ldr	r0, [pc, #4]	; (8005b94 <__sfp_lock_release+0x8>)
 8005b8e:	f000 b91b 	b.w	8005dc8 <__retarget_lock_release_recursive>
 8005b92:	bf00      	nop
 8005b94:	2000087d 	.word	0x2000087d

08005b98 <__sinit>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	f7ff fff0 	bl	8005b80 <__sfp_lock_acquire>
 8005ba0:	6a23      	ldr	r3, [r4, #32]
 8005ba2:	b11b      	cbz	r3, 8005bac <__sinit+0x14>
 8005ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba8:	f7ff bff0 	b.w	8005b8c <__sfp_lock_release>
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <__sinit+0x28>)
 8005bae:	6223      	str	r3, [r4, #32]
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <__sinit+0x2c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f5      	bne.n	8005ba4 <__sinit+0xc>
 8005bb8:	f7ff ffc4 	bl	8005b44 <global_stdio_init.part.0>
 8005bbc:	e7f2      	b.n	8005ba4 <__sinit+0xc>
 8005bbe:	bf00      	nop
 8005bc0:	08005b05 	.word	0x08005b05
 8005bc4:	20000874 	.word	0x20000874

08005bc8 <_fwalk_sglue>:
 8005bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bcc:	4607      	mov	r7, r0
 8005bce:	4688      	mov	r8, r1
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bd8:	f1b9 0901 	subs.w	r9, r9, #1
 8005bdc:	d505      	bpl.n	8005bea <_fwalk_sglue+0x22>
 8005bde:	6824      	ldr	r4, [r4, #0]
 8005be0:	2c00      	cmp	r4, #0
 8005be2:	d1f7      	bne.n	8005bd4 <_fwalk_sglue+0xc>
 8005be4:	4630      	mov	r0, r6
 8005be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bea:	89ab      	ldrh	r3, [r5, #12]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d907      	bls.n	8005c00 <_fwalk_sglue+0x38>
 8005bf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	d003      	beq.n	8005c00 <_fwalk_sglue+0x38>
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	47c0      	blx	r8
 8005bfe:	4306      	orrs	r6, r0
 8005c00:	3568      	adds	r5, #104	; 0x68
 8005c02:	e7e9      	b.n	8005bd8 <_fwalk_sglue+0x10>

08005c04 <siprintf>:
 8005c04:	b40e      	push	{r1, r2, r3}
 8005c06:	b500      	push	{lr}
 8005c08:	b09c      	sub	sp, #112	; 0x70
 8005c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c0c:	9002      	str	r0, [sp, #8]
 8005c0e:	9006      	str	r0, [sp, #24]
 8005c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c14:	4809      	ldr	r0, [pc, #36]	; (8005c3c <siprintf+0x38>)
 8005c16:	9107      	str	r1, [sp, #28]
 8005c18:	9104      	str	r1, [sp, #16]
 8005c1a:	4909      	ldr	r1, [pc, #36]	; (8005c40 <siprintf+0x3c>)
 8005c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c20:	9105      	str	r1, [sp, #20]
 8005c22:	6800      	ldr	r0, [r0, #0]
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	a902      	add	r1, sp, #8
 8005c28:	f001 fc22 	bl	8007470 <_svfiprintf_r>
 8005c2c:	9b02      	ldr	r3, [sp, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	b01c      	add	sp, #112	; 0x70
 8005c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c38:	b003      	add	sp, #12
 8005c3a:	4770      	bx	lr
 8005c3c:	2000006c 	.word	0x2000006c
 8005c40:	ffff0208 	.word	0xffff0208

08005c44 <__sread>:
 8005c44:	b510      	push	{r4, lr}
 8005c46:	460c      	mov	r4, r1
 8005c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4c:	f000 f86c 	bl	8005d28 <_read_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	bfab      	itete	ge
 8005c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c56:	89a3      	ldrhlt	r3, [r4, #12]
 8005c58:	181b      	addge	r3, r3, r0
 8005c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c5e:	bfac      	ite	ge
 8005c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c62:	81a3      	strhlt	r3, [r4, #12]
 8005c64:	bd10      	pop	{r4, pc}

08005c66 <__swrite>:
 8005c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6a:	461f      	mov	r7, r3
 8005c6c:	898b      	ldrh	r3, [r1, #12]
 8005c6e:	05db      	lsls	r3, r3, #23
 8005c70:	4605      	mov	r5, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	4616      	mov	r6, r2
 8005c76:	d505      	bpl.n	8005c84 <__swrite+0x1e>
 8005c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f000 f840 	bl	8005d04 <_lseek_r>
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	4632      	mov	r2, r6
 8005c92:	463b      	mov	r3, r7
 8005c94:	4628      	mov	r0, r5
 8005c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9a:	f000 b857 	b.w	8005d4c <_write_r>

08005c9e <__sseek>:
 8005c9e:	b510      	push	{r4, lr}
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca6:	f000 f82d 	bl	8005d04 <_lseek_r>
 8005caa:	1c43      	adds	r3, r0, #1
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	bf15      	itete	ne
 8005cb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cba:	81a3      	strheq	r3, [r4, #12]
 8005cbc:	bf18      	it	ne
 8005cbe:	81a3      	strhne	r3, [r4, #12]
 8005cc0:	bd10      	pop	{r4, pc}

08005cc2 <__sclose>:
 8005cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc6:	f000 b80d 	b.w	8005ce4 <_close_r>

08005cca <memset>:
 8005cca:	4402      	add	r2, r0
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d100      	bne.n	8005cd4 <memset+0xa>
 8005cd2:	4770      	bx	lr
 8005cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd8:	e7f9      	b.n	8005cce <memset+0x4>
	...

08005cdc <_localeconv_r>:
 8005cdc:	4800      	ldr	r0, [pc, #0]	; (8005ce0 <_localeconv_r+0x4>)
 8005cde:	4770      	bx	lr
 8005ce0:	20000160 	.word	0x20000160

08005ce4 <_close_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d06      	ldr	r5, [pc, #24]	; (8005d00 <_close_r+0x1c>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	602b      	str	r3, [r5, #0]
 8005cf0:	f7fc f853 	bl	8001d9a <_close>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_close_r+0x1a>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_close_r+0x1a>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	20000878 	.word	0x20000878

08005d04 <_lseek_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d07      	ldr	r5, [pc, #28]	; (8005d24 <_lseek_r+0x20>)
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	602a      	str	r2, [r5, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fc f868 	bl	8001de8 <_lseek>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_lseek_r+0x1e>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_lseek_r+0x1e>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20000878 	.word	0x20000878

08005d28 <_read_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	; (8005d48 <_read_r+0x20>)
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	4608      	mov	r0, r1
 8005d30:	4611      	mov	r1, r2
 8005d32:	2200      	movs	r2, #0
 8005d34:	602a      	str	r2, [r5, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f7fb fff6 	bl	8001d28 <_read>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_read_r+0x1e>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_read_r+0x1e>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	20000878 	.word	0x20000878

08005d4c <_write_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d07      	ldr	r5, [pc, #28]	; (8005d6c <_write_r+0x20>)
 8005d50:	4604      	mov	r4, r0
 8005d52:	4608      	mov	r0, r1
 8005d54:	4611      	mov	r1, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	602a      	str	r2, [r5, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f7fc f801 	bl	8001d62 <_write>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_write_r+0x1e>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_write_r+0x1e>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20000878 	.word	0x20000878

08005d70 <__errno>:
 8005d70:	4b01      	ldr	r3, [pc, #4]	; (8005d78 <__errno+0x8>)
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	2000006c 	.word	0x2000006c

08005d7c <__libc_init_array>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4d0d      	ldr	r5, [pc, #52]	; (8005db4 <__libc_init_array+0x38>)
 8005d80:	4c0d      	ldr	r4, [pc, #52]	; (8005db8 <__libc_init_array+0x3c>)
 8005d82:	1b64      	subs	r4, r4, r5
 8005d84:	10a4      	asrs	r4, r4, #2
 8005d86:	2600      	movs	r6, #0
 8005d88:	42a6      	cmp	r6, r4
 8005d8a:	d109      	bne.n	8005da0 <__libc_init_array+0x24>
 8005d8c:	4d0b      	ldr	r5, [pc, #44]	; (8005dbc <__libc_init_array+0x40>)
 8005d8e:	4c0c      	ldr	r4, [pc, #48]	; (8005dc0 <__libc_init_array+0x44>)
 8005d90:	f002 f896 	bl	8007ec0 <_init>
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	2600      	movs	r6, #0
 8005d9a:	42a6      	cmp	r6, r4
 8005d9c:	d105      	bne.n	8005daa <__libc_init_array+0x2e>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da4:	4798      	blx	r3
 8005da6:	3601      	adds	r6, #1
 8005da8:	e7ee      	b.n	8005d88 <__libc_init_array+0xc>
 8005daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dae:	4798      	blx	r3
 8005db0:	3601      	adds	r6, #1
 8005db2:	e7f2      	b.n	8005d9a <__libc_init_array+0x1e>
 8005db4:	08008fdc 	.word	0x08008fdc
 8005db8:	08008fdc 	.word	0x08008fdc
 8005dbc:	08008fdc 	.word	0x08008fdc
 8005dc0:	08008fe0 	.word	0x08008fe0

08005dc4 <__retarget_lock_init_recursive>:
 8005dc4:	4770      	bx	lr

08005dc6 <__retarget_lock_acquire_recursive>:
 8005dc6:	4770      	bx	lr

08005dc8 <__retarget_lock_release_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <quorem>:
 8005dca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dce:	6903      	ldr	r3, [r0, #16]
 8005dd0:	690c      	ldr	r4, [r1, #16]
 8005dd2:	42a3      	cmp	r3, r4
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	db7e      	blt.n	8005ed6 <quorem+0x10c>
 8005dd8:	3c01      	subs	r4, #1
 8005dda:	f101 0814 	add.w	r8, r1, #20
 8005dde:	f100 0514 	add.w	r5, r0, #20
 8005de2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005df0:	3301      	adds	r3, #1
 8005df2:	429a      	cmp	r2, r3
 8005df4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005df8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e00:	d331      	bcc.n	8005e66 <quorem+0x9c>
 8005e02:	f04f 0e00 	mov.w	lr, #0
 8005e06:	4640      	mov	r0, r8
 8005e08:	46ac      	mov	ip, r5
 8005e0a:	46f2      	mov	sl, lr
 8005e0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e10:	b293      	uxth	r3, r2
 8005e12:	fb06 e303 	mla	r3, r6, r3, lr
 8005e16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e1a:	0c1a      	lsrs	r2, r3, #16
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e22:	f8dc a000 	ldr.w	sl, [ip]
 8005e26:	fa13 f38a 	uxtah	r3, r3, sl
 8005e2a:	fb06 220e 	mla	r2, r6, lr, r2
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	9b00      	ldr	r3, [sp, #0]
 8005e32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e36:	b292      	uxth	r2, r2
 8005e38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e40:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e44:	4581      	cmp	r9, r0
 8005e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e4a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e52:	d2db      	bcs.n	8005e0c <quorem+0x42>
 8005e54:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e58:	b92b      	cbnz	r3, 8005e66 <quorem+0x9c>
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	3b04      	subs	r3, #4
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	d32c      	bcc.n	8005ebe <quorem+0xf4>
 8005e64:	613c      	str	r4, [r7, #16]
 8005e66:	4638      	mov	r0, r7
 8005e68:	f001 f9a8 	bl	80071bc <__mcmp>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	db22      	blt.n	8005eb6 <quorem+0xec>
 8005e70:	3601      	adds	r6, #1
 8005e72:	4629      	mov	r1, r5
 8005e74:	2000      	movs	r0, #0
 8005e76:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e7a:	f8d1 c000 	ldr.w	ip, [r1]
 8005e7e:	b293      	uxth	r3, r2
 8005e80:	1ac3      	subs	r3, r0, r3
 8005e82:	0c12      	lsrs	r2, r2, #16
 8005e84:	fa13 f38c 	uxtah	r3, r3, ip
 8005e88:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005e8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e96:	45c1      	cmp	r9, r8
 8005e98:	f841 3b04 	str.w	r3, [r1], #4
 8005e9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ea0:	d2e9      	bcs.n	8005e76 <quorem+0xac>
 8005ea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eaa:	b922      	cbnz	r2, 8005eb6 <quorem+0xec>
 8005eac:	3b04      	subs	r3, #4
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	d30a      	bcc.n	8005eca <quorem+0x100>
 8005eb4:	613c      	str	r4, [r7, #16]
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	b003      	add	sp, #12
 8005eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	3b04      	subs	r3, #4
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d1ce      	bne.n	8005e64 <quorem+0x9a>
 8005ec6:	3c01      	subs	r4, #1
 8005ec8:	e7c9      	b.n	8005e5e <quorem+0x94>
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	3b04      	subs	r3, #4
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <quorem+0xea>
 8005ed2:	3c01      	subs	r4, #1
 8005ed4:	e7eb      	b.n	8005eae <quorem+0xe4>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e7ee      	b.n	8005eb8 <quorem+0xee>
 8005eda:	0000      	movs	r0, r0
 8005edc:	0000      	movs	r0, r0
	...

08005ee0 <_dtoa_r>:
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	ed2d 8b04 	vpush	{d8-d9}
 8005ee8:	69c5      	ldr	r5, [r0, #28]
 8005eea:	b093      	sub	sp, #76	; 0x4c
 8005eec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ef0:	ec57 6b10 	vmov	r6, r7, d0
 8005ef4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ef8:	9107      	str	r1, [sp, #28]
 8005efa:	4604      	mov	r4, r0
 8005efc:	920a      	str	r2, [sp, #40]	; 0x28
 8005efe:	930d      	str	r3, [sp, #52]	; 0x34
 8005f00:	b975      	cbnz	r5, 8005f20 <_dtoa_r+0x40>
 8005f02:	2010      	movs	r0, #16
 8005f04:	f000 fe2a 	bl	8006b5c <malloc>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	61e0      	str	r0, [r4, #28]
 8005f0c:	b920      	cbnz	r0, 8005f18 <_dtoa_r+0x38>
 8005f0e:	4bae      	ldr	r3, [pc, #696]	; (80061c8 <_dtoa_r+0x2e8>)
 8005f10:	21ef      	movs	r1, #239	; 0xef
 8005f12:	48ae      	ldr	r0, [pc, #696]	; (80061cc <_dtoa_r+0x2ec>)
 8005f14:	f001 fc90 	bl	8007838 <__assert_func>
 8005f18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f1c:	6005      	str	r5, [r0, #0]
 8005f1e:	60c5      	str	r5, [r0, #12]
 8005f20:	69e3      	ldr	r3, [r4, #28]
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	b151      	cbz	r1, 8005f3c <_dtoa_r+0x5c>
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	604a      	str	r2, [r1, #4]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4093      	lsls	r3, r2
 8005f2e:	608b      	str	r3, [r1, #8]
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 ff07 	bl	8006d44 <_Bfree>
 8005f36:	69e3      	ldr	r3, [r4, #28]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	1e3b      	subs	r3, r7, #0
 8005f3e:	bfbb      	ittet	lt
 8005f40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f44:	9303      	strlt	r3, [sp, #12]
 8005f46:	2300      	movge	r3, #0
 8005f48:	2201      	movlt	r2, #1
 8005f4a:	bfac      	ite	ge
 8005f4c:	f8c8 3000 	strge.w	r3, [r8]
 8005f50:	f8c8 2000 	strlt.w	r2, [r8]
 8005f54:	4b9e      	ldr	r3, [pc, #632]	; (80061d0 <_dtoa_r+0x2f0>)
 8005f56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f5a:	ea33 0308 	bics.w	r3, r3, r8
 8005f5e:	d11b      	bne.n	8005f98 <_dtoa_r+0xb8>
 8005f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f62:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005f6c:	4333      	orrs	r3, r6
 8005f6e:	f000 8593 	beq.w	8006a98 <_dtoa_r+0xbb8>
 8005f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f74:	b963      	cbnz	r3, 8005f90 <_dtoa_r+0xb0>
 8005f76:	4b97      	ldr	r3, [pc, #604]	; (80061d4 <_dtoa_r+0x2f4>)
 8005f78:	e027      	b.n	8005fca <_dtoa_r+0xea>
 8005f7a:	4b97      	ldr	r3, [pc, #604]	; (80061d8 <_dtoa_r+0x2f8>)
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	9800      	ldr	r0, [sp, #0]
 8005f86:	b013      	add	sp, #76	; 0x4c
 8005f88:	ecbd 8b04 	vpop	{d8-d9}
 8005f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f90:	4b90      	ldr	r3, [pc, #576]	; (80061d4 <_dtoa_r+0x2f4>)
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	3303      	adds	r3, #3
 8005f96:	e7f3      	b.n	8005f80 <_dtoa_r+0xa0>
 8005f98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	ec51 0b17 	vmov	r0, r1, d7
 8005fa2:	eeb0 8a47 	vmov.f32	s16, s14
 8005fa6:	eef0 8a67 	vmov.f32	s17, s15
 8005faa:	2300      	movs	r3, #0
 8005fac:	f7fa fdac 	bl	8000b08 <__aeabi_dcmpeq>
 8005fb0:	4681      	mov	r9, r0
 8005fb2:	b160      	cbz	r0, 8005fce <_dtoa_r+0xee>
 8005fb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8568 	beq.w	8006a92 <_dtoa_r+0xbb2>
 8005fc2:	4b86      	ldr	r3, [pc, #536]	; (80061dc <_dtoa_r+0x2fc>)
 8005fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	e7da      	b.n	8005f84 <_dtoa_r+0xa4>
 8005fce:	aa10      	add	r2, sp, #64	; 0x40
 8005fd0:	a911      	add	r1, sp, #68	; 0x44
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	eeb0 0a48 	vmov.f32	s0, s16
 8005fd8:	eef0 0a68 	vmov.f32	s1, s17
 8005fdc:	f001 f994 	bl	8007308 <__d2b>
 8005fe0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005fe4:	4682      	mov	sl, r0
 8005fe6:	2d00      	cmp	r5, #0
 8005fe8:	d07f      	beq.n	80060ea <_dtoa_r+0x20a>
 8005fea:	ee18 3a90 	vmov	r3, s17
 8005fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ff2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ff6:	ec51 0b18 	vmov	r0, r1, d8
 8005ffa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006002:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006006:	4619      	mov	r1, r3
 8006008:	2200      	movs	r2, #0
 800600a:	4b75      	ldr	r3, [pc, #468]	; (80061e0 <_dtoa_r+0x300>)
 800600c:	f7fa f95c 	bl	80002c8 <__aeabi_dsub>
 8006010:	a367      	add	r3, pc, #412	; (adr r3, 80061b0 <_dtoa_r+0x2d0>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f7fa fb0f 	bl	8000638 <__aeabi_dmul>
 800601a:	a367      	add	r3, pc, #412	; (adr r3, 80061b8 <_dtoa_r+0x2d8>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa f954 	bl	80002cc <__adddf3>
 8006024:	4606      	mov	r6, r0
 8006026:	4628      	mov	r0, r5
 8006028:	460f      	mov	r7, r1
 800602a:	f7fa fa9b 	bl	8000564 <__aeabi_i2d>
 800602e:	a364      	add	r3, pc, #400	; (adr r3, 80061c0 <_dtoa_r+0x2e0>)
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f7fa fb00 	bl	8000638 <__aeabi_dmul>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4630      	mov	r0, r6
 800603e:	4639      	mov	r1, r7
 8006040:	f7fa f944 	bl	80002cc <__adddf3>
 8006044:	4606      	mov	r6, r0
 8006046:	460f      	mov	r7, r1
 8006048:	f7fa fda6 	bl	8000b98 <__aeabi_d2iz>
 800604c:	2200      	movs	r2, #0
 800604e:	4683      	mov	fp, r0
 8006050:	2300      	movs	r3, #0
 8006052:	4630      	mov	r0, r6
 8006054:	4639      	mov	r1, r7
 8006056:	f7fa fd61 	bl	8000b1c <__aeabi_dcmplt>
 800605a:	b148      	cbz	r0, 8006070 <_dtoa_r+0x190>
 800605c:	4658      	mov	r0, fp
 800605e:	f7fa fa81 	bl	8000564 <__aeabi_i2d>
 8006062:	4632      	mov	r2, r6
 8006064:	463b      	mov	r3, r7
 8006066:	f7fa fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800606a:	b908      	cbnz	r0, 8006070 <_dtoa_r+0x190>
 800606c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006070:	f1bb 0f16 	cmp.w	fp, #22
 8006074:	d857      	bhi.n	8006126 <_dtoa_r+0x246>
 8006076:	4b5b      	ldr	r3, [pc, #364]	; (80061e4 <_dtoa_r+0x304>)
 8006078:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	ec51 0b18 	vmov	r0, r1, d8
 8006084:	f7fa fd4a 	bl	8000b1c <__aeabi_dcmplt>
 8006088:	2800      	cmp	r0, #0
 800608a:	d04e      	beq.n	800612a <_dtoa_r+0x24a>
 800608c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006090:	2300      	movs	r3, #0
 8006092:	930c      	str	r3, [sp, #48]	; 0x30
 8006094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006096:	1b5b      	subs	r3, r3, r5
 8006098:	1e5a      	subs	r2, r3, #1
 800609a:	bf45      	ittet	mi
 800609c:	f1c3 0301 	rsbmi	r3, r3, #1
 80060a0:	9305      	strmi	r3, [sp, #20]
 80060a2:	2300      	movpl	r3, #0
 80060a4:	2300      	movmi	r3, #0
 80060a6:	9206      	str	r2, [sp, #24]
 80060a8:	bf54      	ite	pl
 80060aa:	9305      	strpl	r3, [sp, #20]
 80060ac:	9306      	strmi	r3, [sp, #24]
 80060ae:	f1bb 0f00 	cmp.w	fp, #0
 80060b2:	db3c      	blt.n	800612e <_dtoa_r+0x24e>
 80060b4:	9b06      	ldr	r3, [sp, #24]
 80060b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80060ba:	445b      	add	r3, fp
 80060bc:	9306      	str	r3, [sp, #24]
 80060be:	2300      	movs	r3, #0
 80060c0:	9308      	str	r3, [sp, #32]
 80060c2:	9b07      	ldr	r3, [sp, #28]
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	d868      	bhi.n	800619a <_dtoa_r+0x2ba>
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	bfc4      	itt	gt
 80060cc:	3b04      	subgt	r3, #4
 80060ce:	9307      	strgt	r3, [sp, #28]
 80060d0:	9b07      	ldr	r3, [sp, #28]
 80060d2:	f1a3 0302 	sub.w	r3, r3, #2
 80060d6:	bfcc      	ite	gt
 80060d8:	2500      	movgt	r5, #0
 80060da:	2501      	movle	r5, #1
 80060dc:	2b03      	cmp	r3, #3
 80060de:	f200 8085 	bhi.w	80061ec <_dtoa_r+0x30c>
 80060e2:	e8df f003 	tbb	[pc, r3]
 80060e6:	3b2e      	.short	0x3b2e
 80060e8:	5839      	.short	0x5839
 80060ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060ee:	441d      	add	r5, r3
 80060f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	bfc1      	itttt	gt
 80060f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006100:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006104:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006108:	bfd6      	itet	le
 800610a:	f1c3 0320 	rsble	r3, r3, #32
 800610e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006112:	fa06 f003 	lslle.w	r0, r6, r3
 8006116:	f7fa fa15 	bl	8000544 <__aeabi_ui2d>
 800611a:	2201      	movs	r2, #1
 800611c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006120:	3d01      	subs	r5, #1
 8006122:	920e      	str	r2, [sp, #56]	; 0x38
 8006124:	e76f      	b.n	8006006 <_dtoa_r+0x126>
 8006126:	2301      	movs	r3, #1
 8006128:	e7b3      	b.n	8006092 <_dtoa_r+0x1b2>
 800612a:	900c      	str	r0, [sp, #48]	; 0x30
 800612c:	e7b2      	b.n	8006094 <_dtoa_r+0x1b4>
 800612e:	9b05      	ldr	r3, [sp, #20]
 8006130:	eba3 030b 	sub.w	r3, r3, fp
 8006134:	9305      	str	r3, [sp, #20]
 8006136:	f1cb 0300 	rsb	r3, fp, #0
 800613a:	9308      	str	r3, [sp, #32]
 800613c:	2300      	movs	r3, #0
 800613e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006140:	e7bf      	b.n	80060c2 <_dtoa_r+0x1e2>
 8006142:	2300      	movs	r3, #0
 8006144:	9309      	str	r3, [sp, #36]	; 0x24
 8006146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	dc52      	bgt.n	80061f2 <_dtoa_r+0x312>
 800614c:	2301      	movs	r3, #1
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	461a      	mov	r2, r3
 8006154:	920a      	str	r2, [sp, #40]	; 0x28
 8006156:	e00b      	b.n	8006170 <_dtoa_r+0x290>
 8006158:	2301      	movs	r3, #1
 800615a:	e7f3      	b.n	8006144 <_dtoa_r+0x264>
 800615c:	2300      	movs	r3, #0
 800615e:	9309      	str	r3, [sp, #36]	; 0x24
 8006160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006162:	445b      	add	r3, fp
 8006164:	9301      	str	r3, [sp, #4]
 8006166:	3301      	adds	r3, #1
 8006168:	2b01      	cmp	r3, #1
 800616a:	9304      	str	r3, [sp, #16]
 800616c:	bfb8      	it	lt
 800616e:	2301      	movlt	r3, #1
 8006170:	69e0      	ldr	r0, [r4, #28]
 8006172:	2100      	movs	r1, #0
 8006174:	2204      	movs	r2, #4
 8006176:	f102 0614 	add.w	r6, r2, #20
 800617a:	429e      	cmp	r6, r3
 800617c:	d93d      	bls.n	80061fa <_dtoa_r+0x31a>
 800617e:	6041      	str	r1, [r0, #4]
 8006180:	4620      	mov	r0, r4
 8006182:	f000 fd9f 	bl	8006cc4 <_Balloc>
 8006186:	9000      	str	r0, [sp, #0]
 8006188:	2800      	cmp	r0, #0
 800618a:	d139      	bne.n	8006200 <_dtoa_r+0x320>
 800618c:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <_dtoa_r+0x308>)
 800618e:	4602      	mov	r2, r0
 8006190:	f240 11af 	movw	r1, #431	; 0x1af
 8006194:	e6bd      	b.n	8005f12 <_dtoa_r+0x32>
 8006196:	2301      	movs	r3, #1
 8006198:	e7e1      	b.n	800615e <_dtoa_r+0x27e>
 800619a:	2501      	movs	r5, #1
 800619c:	2300      	movs	r3, #0
 800619e:	9307      	str	r3, [sp, #28]
 80061a0:	9509      	str	r5, [sp, #36]	; 0x24
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	9304      	str	r3, [sp, #16]
 80061aa:	2200      	movs	r2, #0
 80061ac:	2312      	movs	r3, #18
 80061ae:	e7d1      	b.n	8006154 <_dtoa_r+0x274>
 80061b0:	636f4361 	.word	0x636f4361
 80061b4:	3fd287a7 	.word	0x3fd287a7
 80061b8:	8b60c8b3 	.word	0x8b60c8b3
 80061bc:	3fc68a28 	.word	0x3fc68a28
 80061c0:	509f79fb 	.word	0x509f79fb
 80061c4:	3fd34413 	.word	0x3fd34413
 80061c8:	08008ca1 	.word	0x08008ca1
 80061cc:	08008cb8 	.word	0x08008cb8
 80061d0:	7ff00000 	.word	0x7ff00000
 80061d4:	08008c9d 	.word	0x08008c9d
 80061d8:	08008c94 	.word	0x08008c94
 80061dc:	08008c71 	.word	0x08008c71
 80061e0:	3ff80000 	.word	0x3ff80000
 80061e4:	08008da8 	.word	0x08008da8
 80061e8:	08008d10 	.word	0x08008d10
 80061ec:	2301      	movs	r3, #1
 80061ee:	9309      	str	r3, [sp, #36]	; 0x24
 80061f0:	e7d7      	b.n	80061a2 <_dtoa_r+0x2c2>
 80061f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	9304      	str	r3, [sp, #16]
 80061f8:	e7ba      	b.n	8006170 <_dtoa_r+0x290>
 80061fa:	3101      	adds	r1, #1
 80061fc:	0052      	lsls	r2, r2, #1
 80061fe:	e7ba      	b.n	8006176 <_dtoa_r+0x296>
 8006200:	69e3      	ldr	r3, [r4, #28]
 8006202:	9a00      	ldr	r2, [sp, #0]
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	2b0e      	cmp	r3, #14
 800620a:	f200 80a8 	bhi.w	800635e <_dtoa_r+0x47e>
 800620e:	2d00      	cmp	r5, #0
 8006210:	f000 80a5 	beq.w	800635e <_dtoa_r+0x47e>
 8006214:	f1bb 0f00 	cmp.w	fp, #0
 8006218:	dd38      	ble.n	800628c <_dtoa_r+0x3ac>
 800621a:	4bc0      	ldr	r3, [pc, #768]	; (800651c <_dtoa_r+0x63c>)
 800621c:	f00b 020f 	and.w	r2, fp, #15
 8006220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006224:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006228:	e9d3 6700 	ldrd	r6, r7, [r3]
 800622c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006230:	d019      	beq.n	8006266 <_dtoa_r+0x386>
 8006232:	4bbb      	ldr	r3, [pc, #748]	; (8006520 <_dtoa_r+0x640>)
 8006234:	ec51 0b18 	vmov	r0, r1, d8
 8006238:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800623c:	f7fa fb26 	bl	800088c <__aeabi_ddiv>
 8006240:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006244:	f008 080f 	and.w	r8, r8, #15
 8006248:	2503      	movs	r5, #3
 800624a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006520 <_dtoa_r+0x640>
 800624e:	f1b8 0f00 	cmp.w	r8, #0
 8006252:	d10a      	bne.n	800626a <_dtoa_r+0x38a>
 8006254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006258:	4632      	mov	r2, r6
 800625a:	463b      	mov	r3, r7
 800625c:	f7fa fb16 	bl	800088c <__aeabi_ddiv>
 8006260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006264:	e02b      	b.n	80062be <_dtoa_r+0x3de>
 8006266:	2502      	movs	r5, #2
 8006268:	e7ef      	b.n	800624a <_dtoa_r+0x36a>
 800626a:	f018 0f01 	tst.w	r8, #1
 800626e:	d008      	beq.n	8006282 <_dtoa_r+0x3a2>
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006278:	f7fa f9de 	bl	8000638 <__aeabi_dmul>
 800627c:	3501      	adds	r5, #1
 800627e:	4606      	mov	r6, r0
 8006280:	460f      	mov	r7, r1
 8006282:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006286:	f109 0908 	add.w	r9, r9, #8
 800628a:	e7e0      	b.n	800624e <_dtoa_r+0x36e>
 800628c:	f000 809f 	beq.w	80063ce <_dtoa_r+0x4ee>
 8006290:	f1cb 0600 	rsb	r6, fp, #0
 8006294:	4ba1      	ldr	r3, [pc, #644]	; (800651c <_dtoa_r+0x63c>)
 8006296:	4fa2      	ldr	r7, [pc, #648]	; (8006520 <_dtoa_r+0x640>)
 8006298:	f006 020f 	and.w	r2, r6, #15
 800629c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	ec51 0b18 	vmov	r0, r1, d8
 80062a8:	f7fa f9c6 	bl	8000638 <__aeabi_dmul>
 80062ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b0:	1136      	asrs	r6, r6, #4
 80062b2:	2300      	movs	r3, #0
 80062b4:	2502      	movs	r5, #2
 80062b6:	2e00      	cmp	r6, #0
 80062b8:	d17e      	bne.n	80063b8 <_dtoa_r+0x4d8>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1d0      	bne.n	8006260 <_dtoa_r+0x380>
 80062be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8084 	beq.w	80063d2 <_dtoa_r+0x4f2>
 80062ca:	4b96      	ldr	r3, [pc, #600]	; (8006524 <_dtoa_r+0x644>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f7fa fc23 	bl	8000b1c <__aeabi_dcmplt>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d07b      	beq.n	80063d2 <_dtoa_r+0x4f2>
 80062da:	9b04      	ldr	r3, [sp, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d078      	beq.n	80063d2 <_dtoa_r+0x4f2>
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	dd39      	ble.n	800635a <_dtoa_r+0x47a>
 80062e6:	4b90      	ldr	r3, [pc, #576]	; (8006528 <_dtoa_r+0x648>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7fa f9a3 	bl	8000638 <__aeabi_dmul>
 80062f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062f6:	9e01      	ldr	r6, [sp, #4]
 80062f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80062fc:	3501      	adds	r5, #1
 80062fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006302:	4628      	mov	r0, r5
 8006304:	f7fa f92e 	bl	8000564 <__aeabi_i2d>
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	f7fa f994 	bl	8000638 <__aeabi_dmul>
 8006310:	4b86      	ldr	r3, [pc, #536]	; (800652c <_dtoa_r+0x64c>)
 8006312:	2200      	movs	r2, #0
 8006314:	f7f9 ffda 	bl	80002cc <__adddf3>
 8006318:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800631c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006320:	9303      	str	r3, [sp, #12]
 8006322:	2e00      	cmp	r6, #0
 8006324:	d158      	bne.n	80063d8 <_dtoa_r+0x4f8>
 8006326:	4b82      	ldr	r3, [pc, #520]	; (8006530 <_dtoa_r+0x650>)
 8006328:	2200      	movs	r2, #0
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7f9 ffcb 	bl	80002c8 <__aeabi_dsub>
 8006332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006336:	4680      	mov	r8, r0
 8006338:	4689      	mov	r9, r1
 800633a:	f7fa fc0d 	bl	8000b58 <__aeabi_dcmpgt>
 800633e:	2800      	cmp	r0, #0
 8006340:	f040 8296 	bne.w	8006870 <_dtoa_r+0x990>
 8006344:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006348:	4640      	mov	r0, r8
 800634a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800634e:	4649      	mov	r1, r9
 8006350:	f7fa fbe4 	bl	8000b1c <__aeabi_dcmplt>
 8006354:	2800      	cmp	r0, #0
 8006356:	f040 8289 	bne.w	800686c <_dtoa_r+0x98c>
 800635a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800635e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006360:	2b00      	cmp	r3, #0
 8006362:	f2c0 814e 	blt.w	8006602 <_dtoa_r+0x722>
 8006366:	f1bb 0f0e 	cmp.w	fp, #14
 800636a:	f300 814a 	bgt.w	8006602 <_dtoa_r+0x722>
 800636e:	4b6b      	ldr	r3, [pc, #428]	; (800651c <_dtoa_r+0x63c>)
 8006370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	f280 80dc 	bge.w	8006538 <_dtoa_r+0x658>
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	f300 80d8 	bgt.w	8006538 <_dtoa_r+0x658>
 8006388:	f040 826f 	bne.w	800686a <_dtoa_r+0x98a>
 800638c:	4b68      	ldr	r3, [pc, #416]	; (8006530 <_dtoa_r+0x650>)
 800638e:	2200      	movs	r2, #0
 8006390:	4640      	mov	r0, r8
 8006392:	4649      	mov	r1, r9
 8006394:	f7fa f950 	bl	8000638 <__aeabi_dmul>
 8006398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800639c:	f7fa fbd2 	bl	8000b44 <__aeabi_dcmpge>
 80063a0:	9e04      	ldr	r6, [sp, #16]
 80063a2:	4637      	mov	r7, r6
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 8245 	bne.w	8006834 <_dtoa_r+0x954>
 80063aa:	9d00      	ldr	r5, [sp, #0]
 80063ac:	2331      	movs	r3, #49	; 0x31
 80063ae:	f805 3b01 	strb.w	r3, [r5], #1
 80063b2:	f10b 0b01 	add.w	fp, fp, #1
 80063b6:	e241      	b.n	800683c <_dtoa_r+0x95c>
 80063b8:	07f2      	lsls	r2, r6, #31
 80063ba:	d505      	bpl.n	80063c8 <_dtoa_r+0x4e8>
 80063bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063c0:	f7fa f93a 	bl	8000638 <__aeabi_dmul>
 80063c4:	3501      	adds	r5, #1
 80063c6:	2301      	movs	r3, #1
 80063c8:	1076      	asrs	r6, r6, #1
 80063ca:	3708      	adds	r7, #8
 80063cc:	e773      	b.n	80062b6 <_dtoa_r+0x3d6>
 80063ce:	2502      	movs	r5, #2
 80063d0:	e775      	b.n	80062be <_dtoa_r+0x3de>
 80063d2:	9e04      	ldr	r6, [sp, #16]
 80063d4:	465f      	mov	r7, fp
 80063d6:	e792      	b.n	80062fe <_dtoa_r+0x41e>
 80063d8:	9900      	ldr	r1, [sp, #0]
 80063da:	4b50      	ldr	r3, [pc, #320]	; (800651c <_dtoa_r+0x63c>)
 80063dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063e0:	4431      	add	r1, r6
 80063e2:	9102      	str	r1, [sp, #8]
 80063e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063e6:	eeb0 9a47 	vmov.f32	s18, s14
 80063ea:	eef0 9a67 	vmov.f32	s19, s15
 80063ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d044      	beq.n	8006484 <_dtoa_r+0x5a4>
 80063fa:	494e      	ldr	r1, [pc, #312]	; (8006534 <_dtoa_r+0x654>)
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7fa fa45 	bl	800088c <__aeabi_ddiv>
 8006402:	ec53 2b19 	vmov	r2, r3, d9
 8006406:	f7f9 ff5f 	bl	80002c8 <__aeabi_dsub>
 800640a:	9d00      	ldr	r5, [sp, #0]
 800640c:	ec41 0b19 	vmov	d9, r0, r1
 8006410:	4649      	mov	r1, r9
 8006412:	4640      	mov	r0, r8
 8006414:	f7fa fbc0 	bl	8000b98 <__aeabi_d2iz>
 8006418:	4606      	mov	r6, r0
 800641a:	f7fa f8a3 	bl	8000564 <__aeabi_i2d>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4640      	mov	r0, r8
 8006424:	4649      	mov	r1, r9
 8006426:	f7f9 ff4f 	bl	80002c8 <__aeabi_dsub>
 800642a:	3630      	adds	r6, #48	; 0x30
 800642c:	f805 6b01 	strb.w	r6, [r5], #1
 8006430:	ec53 2b19 	vmov	r2, r3, d9
 8006434:	4680      	mov	r8, r0
 8006436:	4689      	mov	r9, r1
 8006438:	f7fa fb70 	bl	8000b1c <__aeabi_dcmplt>
 800643c:	2800      	cmp	r0, #0
 800643e:	d164      	bne.n	800650a <_dtoa_r+0x62a>
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	4937      	ldr	r1, [pc, #220]	; (8006524 <_dtoa_r+0x644>)
 8006446:	2000      	movs	r0, #0
 8006448:	f7f9 ff3e 	bl	80002c8 <__aeabi_dsub>
 800644c:	ec53 2b19 	vmov	r2, r3, d9
 8006450:	f7fa fb64 	bl	8000b1c <__aeabi_dcmplt>
 8006454:	2800      	cmp	r0, #0
 8006456:	f040 80b6 	bne.w	80065c6 <_dtoa_r+0x6e6>
 800645a:	9b02      	ldr	r3, [sp, #8]
 800645c:	429d      	cmp	r5, r3
 800645e:	f43f af7c 	beq.w	800635a <_dtoa_r+0x47a>
 8006462:	4b31      	ldr	r3, [pc, #196]	; (8006528 <_dtoa_r+0x648>)
 8006464:	ec51 0b19 	vmov	r0, r1, d9
 8006468:	2200      	movs	r2, #0
 800646a:	f7fa f8e5 	bl	8000638 <__aeabi_dmul>
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <_dtoa_r+0x648>)
 8006470:	ec41 0b19 	vmov	d9, r0, r1
 8006474:	2200      	movs	r2, #0
 8006476:	4640      	mov	r0, r8
 8006478:	4649      	mov	r1, r9
 800647a:	f7fa f8dd 	bl	8000638 <__aeabi_dmul>
 800647e:	4680      	mov	r8, r0
 8006480:	4689      	mov	r9, r1
 8006482:	e7c5      	b.n	8006410 <_dtoa_r+0x530>
 8006484:	ec51 0b17 	vmov	r0, r1, d7
 8006488:	f7fa f8d6 	bl	8000638 <__aeabi_dmul>
 800648c:	9b02      	ldr	r3, [sp, #8]
 800648e:	9d00      	ldr	r5, [sp, #0]
 8006490:	930f      	str	r3, [sp, #60]	; 0x3c
 8006492:	ec41 0b19 	vmov	d9, r0, r1
 8006496:	4649      	mov	r1, r9
 8006498:	4640      	mov	r0, r8
 800649a:	f7fa fb7d 	bl	8000b98 <__aeabi_d2iz>
 800649e:	4606      	mov	r6, r0
 80064a0:	f7fa f860 	bl	8000564 <__aeabi_i2d>
 80064a4:	3630      	adds	r6, #48	; 0x30
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4640      	mov	r0, r8
 80064ac:	4649      	mov	r1, r9
 80064ae:	f7f9 ff0b 	bl	80002c8 <__aeabi_dsub>
 80064b2:	f805 6b01 	strb.w	r6, [r5], #1
 80064b6:	9b02      	ldr	r3, [sp, #8]
 80064b8:	429d      	cmp	r5, r3
 80064ba:	4680      	mov	r8, r0
 80064bc:	4689      	mov	r9, r1
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	d124      	bne.n	800650e <_dtoa_r+0x62e>
 80064c4:	4b1b      	ldr	r3, [pc, #108]	; (8006534 <_dtoa_r+0x654>)
 80064c6:	ec51 0b19 	vmov	r0, r1, d9
 80064ca:	f7f9 feff 	bl	80002cc <__adddf3>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7fa fb3f 	bl	8000b58 <__aeabi_dcmpgt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d173      	bne.n	80065c6 <_dtoa_r+0x6e6>
 80064de:	ec53 2b19 	vmov	r2, r3, d9
 80064e2:	4914      	ldr	r1, [pc, #80]	; (8006534 <_dtoa_r+0x654>)
 80064e4:	2000      	movs	r0, #0
 80064e6:	f7f9 feef 	bl	80002c8 <__aeabi_dsub>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4640      	mov	r0, r8
 80064f0:	4649      	mov	r1, r9
 80064f2:	f7fa fb13 	bl	8000b1c <__aeabi_dcmplt>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f43f af2f 	beq.w	800635a <_dtoa_r+0x47a>
 80064fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064fe:	1e6b      	subs	r3, r5, #1
 8006500:	930f      	str	r3, [sp, #60]	; 0x3c
 8006502:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006506:	2b30      	cmp	r3, #48	; 0x30
 8006508:	d0f8      	beq.n	80064fc <_dtoa_r+0x61c>
 800650a:	46bb      	mov	fp, r7
 800650c:	e04a      	b.n	80065a4 <_dtoa_r+0x6c4>
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <_dtoa_r+0x648>)
 8006510:	f7fa f892 	bl	8000638 <__aeabi_dmul>
 8006514:	4680      	mov	r8, r0
 8006516:	4689      	mov	r9, r1
 8006518:	e7bd      	b.n	8006496 <_dtoa_r+0x5b6>
 800651a:	bf00      	nop
 800651c:	08008da8 	.word	0x08008da8
 8006520:	08008d80 	.word	0x08008d80
 8006524:	3ff00000 	.word	0x3ff00000
 8006528:	40240000 	.word	0x40240000
 800652c:	401c0000 	.word	0x401c0000
 8006530:	40140000 	.word	0x40140000
 8006534:	3fe00000 	.word	0x3fe00000
 8006538:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800653c:	9d00      	ldr	r5, [sp, #0]
 800653e:	4642      	mov	r2, r8
 8006540:	464b      	mov	r3, r9
 8006542:	4630      	mov	r0, r6
 8006544:	4639      	mov	r1, r7
 8006546:	f7fa f9a1 	bl	800088c <__aeabi_ddiv>
 800654a:	f7fa fb25 	bl	8000b98 <__aeabi_d2iz>
 800654e:	9001      	str	r0, [sp, #4]
 8006550:	f7fa f808 	bl	8000564 <__aeabi_i2d>
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	f7fa f86e 	bl	8000638 <__aeabi_dmul>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7f9 feb0 	bl	80002c8 <__aeabi_dsub>
 8006568:	9e01      	ldr	r6, [sp, #4]
 800656a:	9f04      	ldr	r7, [sp, #16]
 800656c:	3630      	adds	r6, #48	; 0x30
 800656e:	f805 6b01 	strb.w	r6, [r5], #1
 8006572:	9e00      	ldr	r6, [sp, #0]
 8006574:	1bae      	subs	r6, r5, r6
 8006576:	42b7      	cmp	r7, r6
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	d134      	bne.n	80065e8 <_dtoa_r+0x708>
 800657e:	f7f9 fea5 	bl	80002cc <__adddf3>
 8006582:	4642      	mov	r2, r8
 8006584:	464b      	mov	r3, r9
 8006586:	4606      	mov	r6, r0
 8006588:	460f      	mov	r7, r1
 800658a:	f7fa fae5 	bl	8000b58 <__aeabi_dcmpgt>
 800658e:	b9c8      	cbnz	r0, 80065c4 <_dtoa_r+0x6e4>
 8006590:	4642      	mov	r2, r8
 8006592:	464b      	mov	r3, r9
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7fa fab6 	bl	8000b08 <__aeabi_dcmpeq>
 800659c:	b110      	cbz	r0, 80065a4 <_dtoa_r+0x6c4>
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	07db      	lsls	r3, r3, #31
 80065a2:	d40f      	bmi.n	80065c4 <_dtoa_r+0x6e4>
 80065a4:	4651      	mov	r1, sl
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fbcc 	bl	8006d44 <_Bfree>
 80065ac:	2300      	movs	r3, #0
 80065ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065b0:	702b      	strb	r3, [r5, #0]
 80065b2:	f10b 0301 	add.w	r3, fp, #1
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f43f ace2 	beq.w	8005f84 <_dtoa_r+0xa4>
 80065c0:	601d      	str	r5, [r3, #0]
 80065c2:	e4df      	b.n	8005f84 <_dtoa_r+0xa4>
 80065c4:	465f      	mov	r7, fp
 80065c6:	462b      	mov	r3, r5
 80065c8:	461d      	mov	r5, r3
 80065ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ce:	2a39      	cmp	r2, #57	; 0x39
 80065d0:	d106      	bne.n	80065e0 <_dtoa_r+0x700>
 80065d2:	9a00      	ldr	r2, [sp, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d1f7      	bne.n	80065c8 <_dtoa_r+0x6e8>
 80065d8:	9900      	ldr	r1, [sp, #0]
 80065da:	2230      	movs	r2, #48	; 0x30
 80065dc:	3701      	adds	r7, #1
 80065de:	700a      	strb	r2, [r1, #0]
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	3201      	adds	r2, #1
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e790      	b.n	800650a <_dtoa_r+0x62a>
 80065e8:	4ba3      	ldr	r3, [pc, #652]	; (8006878 <_dtoa_r+0x998>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	f7fa f824 	bl	8000638 <__aeabi_dmul>
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4606      	mov	r6, r0
 80065f6:	460f      	mov	r7, r1
 80065f8:	f7fa fa86 	bl	8000b08 <__aeabi_dcmpeq>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d09e      	beq.n	800653e <_dtoa_r+0x65e>
 8006600:	e7d0      	b.n	80065a4 <_dtoa_r+0x6c4>
 8006602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006604:	2a00      	cmp	r2, #0
 8006606:	f000 80ca 	beq.w	800679e <_dtoa_r+0x8be>
 800660a:	9a07      	ldr	r2, [sp, #28]
 800660c:	2a01      	cmp	r2, #1
 800660e:	f300 80ad 	bgt.w	800676c <_dtoa_r+0x88c>
 8006612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006614:	2a00      	cmp	r2, #0
 8006616:	f000 80a5 	beq.w	8006764 <_dtoa_r+0x884>
 800661a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800661e:	9e08      	ldr	r6, [sp, #32]
 8006620:	9d05      	ldr	r5, [sp, #20]
 8006622:	9a05      	ldr	r2, [sp, #20]
 8006624:	441a      	add	r2, r3
 8006626:	9205      	str	r2, [sp, #20]
 8006628:	9a06      	ldr	r2, [sp, #24]
 800662a:	2101      	movs	r1, #1
 800662c:	441a      	add	r2, r3
 800662e:	4620      	mov	r0, r4
 8006630:	9206      	str	r2, [sp, #24]
 8006632:	f000 fc3d 	bl	8006eb0 <__i2b>
 8006636:	4607      	mov	r7, r0
 8006638:	b165      	cbz	r5, 8006654 <_dtoa_r+0x774>
 800663a:	9b06      	ldr	r3, [sp, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	dd09      	ble.n	8006654 <_dtoa_r+0x774>
 8006640:	42ab      	cmp	r3, r5
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	bfa8      	it	ge
 8006646:	462b      	movge	r3, r5
 8006648:	1ad2      	subs	r2, r2, r3
 800664a:	9205      	str	r2, [sp, #20]
 800664c:	9a06      	ldr	r2, [sp, #24]
 800664e:	1aed      	subs	r5, r5, r3
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	9306      	str	r3, [sp, #24]
 8006654:	9b08      	ldr	r3, [sp, #32]
 8006656:	b1f3      	cbz	r3, 8006696 <_dtoa_r+0x7b6>
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80a3 	beq.w	80067a6 <_dtoa_r+0x8c6>
 8006660:	2e00      	cmp	r6, #0
 8006662:	dd10      	ble.n	8006686 <_dtoa_r+0x7a6>
 8006664:	4639      	mov	r1, r7
 8006666:	4632      	mov	r2, r6
 8006668:	4620      	mov	r0, r4
 800666a:	f000 fce1 	bl	8007030 <__pow5mult>
 800666e:	4652      	mov	r2, sl
 8006670:	4601      	mov	r1, r0
 8006672:	4607      	mov	r7, r0
 8006674:	4620      	mov	r0, r4
 8006676:	f000 fc31 	bl	8006edc <__multiply>
 800667a:	4651      	mov	r1, sl
 800667c:	4680      	mov	r8, r0
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fb60 	bl	8006d44 <_Bfree>
 8006684:	46c2      	mov	sl, r8
 8006686:	9b08      	ldr	r3, [sp, #32]
 8006688:	1b9a      	subs	r2, r3, r6
 800668a:	d004      	beq.n	8006696 <_dtoa_r+0x7b6>
 800668c:	4651      	mov	r1, sl
 800668e:	4620      	mov	r0, r4
 8006690:	f000 fcce 	bl	8007030 <__pow5mult>
 8006694:	4682      	mov	sl, r0
 8006696:	2101      	movs	r1, #1
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fc09 	bl	8006eb0 <__i2b>
 800669e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	4606      	mov	r6, r0
 80066a4:	f340 8081 	ble.w	80067aa <_dtoa_r+0x8ca>
 80066a8:	461a      	mov	r2, r3
 80066aa:	4601      	mov	r1, r0
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 fcbf 	bl	8007030 <__pow5mult>
 80066b2:	9b07      	ldr	r3, [sp, #28]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	4606      	mov	r6, r0
 80066b8:	dd7a      	ble.n	80067b0 <_dtoa_r+0x8d0>
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	6933      	ldr	r3, [r6, #16]
 80066c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066c4:	6918      	ldr	r0, [r3, #16]
 80066c6:	f000 fba5 	bl	8006e14 <__hi0bits>
 80066ca:	f1c0 0020 	rsb	r0, r0, #32
 80066ce:	9b06      	ldr	r3, [sp, #24]
 80066d0:	4418      	add	r0, r3
 80066d2:	f010 001f 	ands.w	r0, r0, #31
 80066d6:	f000 8094 	beq.w	8006802 <_dtoa_r+0x922>
 80066da:	f1c0 0320 	rsb	r3, r0, #32
 80066de:	2b04      	cmp	r3, #4
 80066e0:	f340 8085 	ble.w	80067ee <_dtoa_r+0x90e>
 80066e4:	9b05      	ldr	r3, [sp, #20]
 80066e6:	f1c0 001c 	rsb	r0, r0, #28
 80066ea:	4403      	add	r3, r0
 80066ec:	9305      	str	r3, [sp, #20]
 80066ee:	9b06      	ldr	r3, [sp, #24]
 80066f0:	4403      	add	r3, r0
 80066f2:	4405      	add	r5, r0
 80066f4:	9306      	str	r3, [sp, #24]
 80066f6:	9b05      	ldr	r3, [sp, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dd05      	ble.n	8006708 <_dtoa_r+0x828>
 80066fc:	4651      	mov	r1, sl
 80066fe:	461a      	mov	r2, r3
 8006700:	4620      	mov	r0, r4
 8006702:	f000 fcef 	bl	80070e4 <__lshift>
 8006706:	4682      	mov	sl, r0
 8006708:	9b06      	ldr	r3, [sp, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	dd05      	ble.n	800671a <_dtoa_r+0x83a>
 800670e:	4631      	mov	r1, r6
 8006710:	461a      	mov	r2, r3
 8006712:	4620      	mov	r0, r4
 8006714:	f000 fce6 	bl	80070e4 <__lshift>
 8006718:	4606      	mov	r6, r0
 800671a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800671c:	2b00      	cmp	r3, #0
 800671e:	d072      	beq.n	8006806 <_dtoa_r+0x926>
 8006720:	4631      	mov	r1, r6
 8006722:	4650      	mov	r0, sl
 8006724:	f000 fd4a 	bl	80071bc <__mcmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	da6c      	bge.n	8006806 <_dtoa_r+0x926>
 800672c:	2300      	movs	r3, #0
 800672e:	4651      	mov	r1, sl
 8006730:	220a      	movs	r2, #10
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fb28 	bl	8006d88 <__multadd>
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800673e:	4682      	mov	sl, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 81b0 	beq.w	8006aa6 <_dtoa_r+0xbc6>
 8006746:	2300      	movs	r3, #0
 8006748:	4639      	mov	r1, r7
 800674a:	220a      	movs	r2, #10
 800674c:	4620      	mov	r0, r4
 800674e:	f000 fb1b 	bl	8006d88 <__multadd>
 8006752:	9b01      	ldr	r3, [sp, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	4607      	mov	r7, r0
 8006758:	f300 8096 	bgt.w	8006888 <_dtoa_r+0x9a8>
 800675c:	9b07      	ldr	r3, [sp, #28]
 800675e:	2b02      	cmp	r3, #2
 8006760:	dc59      	bgt.n	8006816 <_dtoa_r+0x936>
 8006762:	e091      	b.n	8006888 <_dtoa_r+0x9a8>
 8006764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006766:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800676a:	e758      	b.n	800661e <_dtoa_r+0x73e>
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	1e5e      	subs	r6, r3, #1
 8006770:	9b08      	ldr	r3, [sp, #32]
 8006772:	42b3      	cmp	r3, r6
 8006774:	bfbf      	itttt	lt
 8006776:	9b08      	ldrlt	r3, [sp, #32]
 8006778:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800677a:	9608      	strlt	r6, [sp, #32]
 800677c:	1af3      	sublt	r3, r6, r3
 800677e:	bfb4      	ite	lt
 8006780:	18d2      	addlt	r2, r2, r3
 8006782:	1b9e      	subge	r6, r3, r6
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	bfbc      	itt	lt
 8006788:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800678a:	2600      	movlt	r6, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	bfb7      	itett	lt
 8006790:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006794:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006798:	1a9d      	sublt	r5, r3, r2
 800679a:	2300      	movlt	r3, #0
 800679c:	e741      	b.n	8006622 <_dtoa_r+0x742>
 800679e:	9e08      	ldr	r6, [sp, #32]
 80067a0:	9d05      	ldr	r5, [sp, #20]
 80067a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067a4:	e748      	b.n	8006638 <_dtoa_r+0x758>
 80067a6:	9a08      	ldr	r2, [sp, #32]
 80067a8:	e770      	b.n	800668c <_dtoa_r+0x7ac>
 80067aa:	9b07      	ldr	r3, [sp, #28]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	dc19      	bgt.n	80067e4 <_dtoa_r+0x904>
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	b9bb      	cbnz	r3, 80067e4 <_dtoa_r+0x904>
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067ba:	b99b      	cbnz	r3, 80067e4 <_dtoa_r+0x904>
 80067bc:	9b03      	ldr	r3, [sp, #12]
 80067be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067c2:	0d1b      	lsrs	r3, r3, #20
 80067c4:	051b      	lsls	r3, r3, #20
 80067c6:	b183      	cbz	r3, 80067ea <_dtoa_r+0x90a>
 80067c8:	9b05      	ldr	r3, [sp, #20]
 80067ca:	3301      	adds	r3, #1
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	9b06      	ldr	r3, [sp, #24]
 80067d0:	3301      	adds	r3, #1
 80067d2:	9306      	str	r3, [sp, #24]
 80067d4:	f04f 0801 	mov.w	r8, #1
 80067d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f47f af6f 	bne.w	80066be <_dtoa_r+0x7de>
 80067e0:	2001      	movs	r0, #1
 80067e2:	e774      	b.n	80066ce <_dtoa_r+0x7ee>
 80067e4:	f04f 0800 	mov.w	r8, #0
 80067e8:	e7f6      	b.n	80067d8 <_dtoa_r+0x8f8>
 80067ea:	4698      	mov	r8, r3
 80067ec:	e7f4      	b.n	80067d8 <_dtoa_r+0x8f8>
 80067ee:	d082      	beq.n	80066f6 <_dtoa_r+0x816>
 80067f0:	9a05      	ldr	r2, [sp, #20]
 80067f2:	331c      	adds	r3, #28
 80067f4:	441a      	add	r2, r3
 80067f6:	9205      	str	r2, [sp, #20]
 80067f8:	9a06      	ldr	r2, [sp, #24]
 80067fa:	441a      	add	r2, r3
 80067fc:	441d      	add	r5, r3
 80067fe:	9206      	str	r2, [sp, #24]
 8006800:	e779      	b.n	80066f6 <_dtoa_r+0x816>
 8006802:	4603      	mov	r3, r0
 8006804:	e7f4      	b.n	80067f0 <_dtoa_r+0x910>
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	dc37      	bgt.n	800687c <_dtoa_r+0x99c>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	2b02      	cmp	r3, #2
 8006810:	dd34      	ble.n	800687c <_dtoa_r+0x99c>
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	9b01      	ldr	r3, [sp, #4]
 8006818:	b963      	cbnz	r3, 8006834 <_dtoa_r+0x954>
 800681a:	4631      	mov	r1, r6
 800681c:	2205      	movs	r2, #5
 800681e:	4620      	mov	r0, r4
 8006820:	f000 fab2 	bl	8006d88 <__multadd>
 8006824:	4601      	mov	r1, r0
 8006826:	4606      	mov	r6, r0
 8006828:	4650      	mov	r0, sl
 800682a:	f000 fcc7 	bl	80071bc <__mcmp>
 800682e:	2800      	cmp	r0, #0
 8006830:	f73f adbb 	bgt.w	80063aa <_dtoa_r+0x4ca>
 8006834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006836:	9d00      	ldr	r5, [sp, #0]
 8006838:	ea6f 0b03 	mvn.w	fp, r3
 800683c:	f04f 0800 	mov.w	r8, #0
 8006840:	4631      	mov	r1, r6
 8006842:	4620      	mov	r0, r4
 8006844:	f000 fa7e 	bl	8006d44 <_Bfree>
 8006848:	2f00      	cmp	r7, #0
 800684a:	f43f aeab 	beq.w	80065a4 <_dtoa_r+0x6c4>
 800684e:	f1b8 0f00 	cmp.w	r8, #0
 8006852:	d005      	beq.n	8006860 <_dtoa_r+0x980>
 8006854:	45b8      	cmp	r8, r7
 8006856:	d003      	beq.n	8006860 <_dtoa_r+0x980>
 8006858:	4641      	mov	r1, r8
 800685a:	4620      	mov	r0, r4
 800685c:	f000 fa72 	bl	8006d44 <_Bfree>
 8006860:	4639      	mov	r1, r7
 8006862:	4620      	mov	r0, r4
 8006864:	f000 fa6e 	bl	8006d44 <_Bfree>
 8006868:	e69c      	b.n	80065a4 <_dtoa_r+0x6c4>
 800686a:	2600      	movs	r6, #0
 800686c:	4637      	mov	r7, r6
 800686e:	e7e1      	b.n	8006834 <_dtoa_r+0x954>
 8006870:	46bb      	mov	fp, r7
 8006872:	4637      	mov	r7, r6
 8006874:	e599      	b.n	80063aa <_dtoa_r+0x4ca>
 8006876:	bf00      	nop
 8006878:	40240000 	.word	0x40240000
 800687c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80c8 	beq.w	8006a14 <_dtoa_r+0xb34>
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	2d00      	cmp	r5, #0
 800688a:	dd05      	ble.n	8006898 <_dtoa_r+0x9b8>
 800688c:	4639      	mov	r1, r7
 800688e:	462a      	mov	r2, r5
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fc27 	bl	80070e4 <__lshift>
 8006896:	4607      	mov	r7, r0
 8006898:	f1b8 0f00 	cmp.w	r8, #0
 800689c:	d05b      	beq.n	8006956 <_dtoa_r+0xa76>
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fa0f 	bl	8006cc4 <_Balloc>
 80068a6:	4605      	mov	r5, r0
 80068a8:	b928      	cbnz	r0, 80068b6 <_dtoa_r+0x9d6>
 80068aa:	4b83      	ldr	r3, [pc, #524]	; (8006ab8 <_dtoa_r+0xbd8>)
 80068ac:	4602      	mov	r2, r0
 80068ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80068b2:	f7ff bb2e 	b.w	8005f12 <_dtoa_r+0x32>
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	3202      	adds	r2, #2
 80068ba:	0092      	lsls	r2, r2, #2
 80068bc:	f107 010c 	add.w	r1, r7, #12
 80068c0:	300c      	adds	r0, #12
 80068c2:	f000 ffab 	bl	800781c <memcpy>
 80068c6:	2201      	movs	r2, #1
 80068c8:	4629      	mov	r1, r5
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fc0a 	bl	80070e4 <__lshift>
 80068d0:	9b00      	ldr	r3, [sp, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068da:	4413      	add	r3, r2
 80068dc:	9308      	str	r3, [sp, #32]
 80068de:	9b02      	ldr	r3, [sp, #8]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	46b8      	mov	r8, r7
 80068e6:	9306      	str	r3, [sp, #24]
 80068e8:	4607      	mov	r7, r0
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	4631      	mov	r1, r6
 80068ee:	3b01      	subs	r3, #1
 80068f0:	4650      	mov	r0, sl
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	f7ff fa69 	bl	8005dca <quorem>
 80068f8:	4641      	mov	r1, r8
 80068fa:	9002      	str	r0, [sp, #8]
 80068fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006900:	4650      	mov	r0, sl
 8006902:	f000 fc5b 	bl	80071bc <__mcmp>
 8006906:	463a      	mov	r2, r7
 8006908:	9005      	str	r0, [sp, #20]
 800690a:	4631      	mov	r1, r6
 800690c:	4620      	mov	r0, r4
 800690e:	f000 fc71 	bl	80071f4 <__mdiff>
 8006912:	68c2      	ldr	r2, [r0, #12]
 8006914:	4605      	mov	r5, r0
 8006916:	bb02      	cbnz	r2, 800695a <_dtoa_r+0xa7a>
 8006918:	4601      	mov	r1, r0
 800691a:	4650      	mov	r0, sl
 800691c:	f000 fc4e 	bl	80071bc <__mcmp>
 8006920:	4602      	mov	r2, r0
 8006922:	4629      	mov	r1, r5
 8006924:	4620      	mov	r0, r4
 8006926:	9209      	str	r2, [sp, #36]	; 0x24
 8006928:	f000 fa0c 	bl	8006d44 <_Bfree>
 800692c:	9b07      	ldr	r3, [sp, #28]
 800692e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006930:	9d04      	ldr	r5, [sp, #16]
 8006932:	ea43 0102 	orr.w	r1, r3, r2
 8006936:	9b06      	ldr	r3, [sp, #24]
 8006938:	4319      	orrs	r1, r3
 800693a:	d110      	bne.n	800695e <_dtoa_r+0xa7e>
 800693c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006940:	d029      	beq.n	8006996 <_dtoa_r+0xab6>
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd02      	ble.n	800694e <_dtoa_r+0xa6e>
 8006948:	9b02      	ldr	r3, [sp, #8]
 800694a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800694e:	9b01      	ldr	r3, [sp, #4]
 8006950:	f883 9000 	strb.w	r9, [r3]
 8006954:	e774      	b.n	8006840 <_dtoa_r+0x960>
 8006956:	4638      	mov	r0, r7
 8006958:	e7ba      	b.n	80068d0 <_dtoa_r+0x9f0>
 800695a:	2201      	movs	r2, #1
 800695c:	e7e1      	b.n	8006922 <_dtoa_r+0xa42>
 800695e:	9b05      	ldr	r3, [sp, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	db04      	blt.n	800696e <_dtoa_r+0xa8e>
 8006964:	9907      	ldr	r1, [sp, #28]
 8006966:	430b      	orrs	r3, r1
 8006968:	9906      	ldr	r1, [sp, #24]
 800696a:	430b      	orrs	r3, r1
 800696c:	d120      	bne.n	80069b0 <_dtoa_r+0xad0>
 800696e:	2a00      	cmp	r2, #0
 8006970:	dded      	ble.n	800694e <_dtoa_r+0xa6e>
 8006972:	4651      	mov	r1, sl
 8006974:	2201      	movs	r2, #1
 8006976:	4620      	mov	r0, r4
 8006978:	f000 fbb4 	bl	80070e4 <__lshift>
 800697c:	4631      	mov	r1, r6
 800697e:	4682      	mov	sl, r0
 8006980:	f000 fc1c 	bl	80071bc <__mcmp>
 8006984:	2800      	cmp	r0, #0
 8006986:	dc03      	bgt.n	8006990 <_dtoa_r+0xab0>
 8006988:	d1e1      	bne.n	800694e <_dtoa_r+0xa6e>
 800698a:	f019 0f01 	tst.w	r9, #1
 800698e:	d0de      	beq.n	800694e <_dtoa_r+0xa6e>
 8006990:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006994:	d1d8      	bne.n	8006948 <_dtoa_r+0xa68>
 8006996:	9a01      	ldr	r2, [sp, #4]
 8006998:	2339      	movs	r3, #57	; 0x39
 800699a:	7013      	strb	r3, [r2, #0]
 800699c:	462b      	mov	r3, r5
 800699e:	461d      	mov	r5, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069a6:	2a39      	cmp	r2, #57	; 0x39
 80069a8:	d06c      	beq.n	8006a84 <_dtoa_r+0xba4>
 80069aa:	3201      	adds	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	e747      	b.n	8006840 <_dtoa_r+0x960>
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	dd07      	ble.n	80069c4 <_dtoa_r+0xae4>
 80069b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80069b8:	d0ed      	beq.n	8006996 <_dtoa_r+0xab6>
 80069ba:	9a01      	ldr	r2, [sp, #4]
 80069bc:	f109 0301 	add.w	r3, r9, #1
 80069c0:	7013      	strb	r3, [r2, #0]
 80069c2:	e73d      	b.n	8006840 <_dtoa_r+0x960>
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	9a08      	ldr	r2, [sp, #32]
 80069c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d043      	beq.n	8006a58 <_dtoa_r+0xb78>
 80069d0:	4651      	mov	r1, sl
 80069d2:	2300      	movs	r3, #0
 80069d4:	220a      	movs	r2, #10
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 f9d6 	bl	8006d88 <__multadd>
 80069dc:	45b8      	cmp	r8, r7
 80069de:	4682      	mov	sl, r0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	f04f 020a 	mov.w	r2, #10
 80069e8:	4641      	mov	r1, r8
 80069ea:	4620      	mov	r0, r4
 80069ec:	d107      	bne.n	80069fe <_dtoa_r+0xb1e>
 80069ee:	f000 f9cb 	bl	8006d88 <__multadd>
 80069f2:	4680      	mov	r8, r0
 80069f4:	4607      	mov	r7, r0
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	3301      	adds	r3, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	e775      	b.n	80068ea <_dtoa_r+0xa0a>
 80069fe:	f000 f9c3 	bl	8006d88 <__multadd>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4680      	mov	r8, r0
 8006a06:	2300      	movs	r3, #0
 8006a08:	220a      	movs	r2, #10
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f9bc 	bl	8006d88 <__multadd>
 8006a10:	4607      	mov	r7, r0
 8006a12:	e7f0      	b.n	80069f6 <_dtoa_r+0xb16>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	9d00      	ldr	r5, [sp, #0]
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	f7ff f9d4 	bl	8005dca <quorem>
 8006a22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006a26:	9b00      	ldr	r3, [sp, #0]
 8006a28:	f805 9b01 	strb.w	r9, [r5], #1
 8006a2c:	1aea      	subs	r2, r5, r3
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	4293      	cmp	r3, r2
 8006a32:	dd07      	ble.n	8006a44 <_dtoa_r+0xb64>
 8006a34:	4651      	mov	r1, sl
 8006a36:	2300      	movs	r3, #0
 8006a38:	220a      	movs	r2, #10
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 f9a4 	bl	8006d88 <__multadd>
 8006a40:	4682      	mov	sl, r0
 8006a42:	e7ea      	b.n	8006a1a <_dtoa_r+0xb3a>
 8006a44:	9b01      	ldr	r3, [sp, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bfc8      	it	gt
 8006a4a:	461d      	movgt	r5, r3
 8006a4c:	9b00      	ldr	r3, [sp, #0]
 8006a4e:	bfd8      	it	le
 8006a50:	2501      	movle	r5, #1
 8006a52:	441d      	add	r5, r3
 8006a54:	f04f 0800 	mov.w	r8, #0
 8006a58:	4651      	mov	r1, sl
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fb41 	bl	80070e4 <__lshift>
 8006a62:	4631      	mov	r1, r6
 8006a64:	4682      	mov	sl, r0
 8006a66:	f000 fba9 	bl	80071bc <__mcmp>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	dc96      	bgt.n	800699c <_dtoa_r+0xabc>
 8006a6e:	d102      	bne.n	8006a76 <_dtoa_r+0xb96>
 8006a70:	f019 0f01 	tst.w	r9, #1
 8006a74:	d192      	bne.n	800699c <_dtoa_r+0xabc>
 8006a76:	462b      	mov	r3, r5
 8006a78:	461d      	mov	r5, r3
 8006a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a7e:	2a30      	cmp	r2, #48	; 0x30
 8006a80:	d0fa      	beq.n	8006a78 <_dtoa_r+0xb98>
 8006a82:	e6dd      	b.n	8006840 <_dtoa_r+0x960>
 8006a84:	9a00      	ldr	r2, [sp, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d189      	bne.n	800699e <_dtoa_r+0xabe>
 8006a8a:	f10b 0b01 	add.w	fp, fp, #1
 8006a8e:	2331      	movs	r3, #49	; 0x31
 8006a90:	e796      	b.n	80069c0 <_dtoa_r+0xae0>
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <_dtoa_r+0xbdc>)
 8006a94:	f7ff ba99 	b.w	8005fca <_dtoa_r+0xea>
 8006a98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f47f aa6d 	bne.w	8005f7a <_dtoa_r+0x9a>
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <_dtoa_r+0xbe0>)
 8006aa2:	f7ff ba92 	b.w	8005fca <_dtoa_r+0xea>
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	dcb5      	bgt.n	8006a18 <_dtoa_r+0xb38>
 8006aac:	9b07      	ldr	r3, [sp, #28]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	f73f aeb1 	bgt.w	8006816 <_dtoa_r+0x936>
 8006ab4:	e7b0      	b.n	8006a18 <_dtoa_r+0xb38>
 8006ab6:	bf00      	nop
 8006ab8:	08008d10 	.word	0x08008d10
 8006abc:	08008c70 	.word	0x08008c70
 8006ac0:	08008c94 	.word	0x08008c94

08006ac4 <_free_r>:
 8006ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ac6:	2900      	cmp	r1, #0
 8006ac8:	d044      	beq.n	8006b54 <_free_r+0x90>
 8006aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ace:	9001      	str	r0, [sp, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ad6:	bfb8      	it	lt
 8006ad8:	18e4      	addlt	r4, r4, r3
 8006ada:	f000 f8e7 	bl	8006cac <__malloc_lock>
 8006ade:	4a1e      	ldr	r2, [pc, #120]	; (8006b58 <_free_r+0x94>)
 8006ae0:	9801      	ldr	r0, [sp, #4]
 8006ae2:	6813      	ldr	r3, [r2, #0]
 8006ae4:	b933      	cbnz	r3, 8006af4 <_free_r+0x30>
 8006ae6:	6063      	str	r3, [r4, #4]
 8006ae8:	6014      	str	r4, [r2, #0]
 8006aea:	b003      	add	sp, #12
 8006aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006af0:	f000 b8e2 	b.w	8006cb8 <__malloc_unlock>
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	d908      	bls.n	8006b0a <_free_r+0x46>
 8006af8:	6825      	ldr	r5, [r4, #0]
 8006afa:	1961      	adds	r1, r4, r5
 8006afc:	428b      	cmp	r3, r1
 8006afe:	bf01      	itttt	eq
 8006b00:	6819      	ldreq	r1, [r3, #0]
 8006b02:	685b      	ldreq	r3, [r3, #4]
 8006b04:	1949      	addeq	r1, r1, r5
 8006b06:	6021      	streq	r1, [r4, #0]
 8006b08:	e7ed      	b.n	8006ae6 <_free_r+0x22>
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b10b      	cbz	r3, 8006b14 <_free_r+0x50>
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d9fa      	bls.n	8006b0a <_free_r+0x46>
 8006b14:	6811      	ldr	r1, [r2, #0]
 8006b16:	1855      	adds	r5, r2, r1
 8006b18:	42a5      	cmp	r5, r4
 8006b1a:	d10b      	bne.n	8006b34 <_free_r+0x70>
 8006b1c:	6824      	ldr	r4, [r4, #0]
 8006b1e:	4421      	add	r1, r4
 8006b20:	1854      	adds	r4, r2, r1
 8006b22:	42a3      	cmp	r3, r4
 8006b24:	6011      	str	r1, [r2, #0]
 8006b26:	d1e0      	bne.n	8006aea <_free_r+0x26>
 8006b28:	681c      	ldr	r4, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	6053      	str	r3, [r2, #4]
 8006b2e:	440c      	add	r4, r1
 8006b30:	6014      	str	r4, [r2, #0]
 8006b32:	e7da      	b.n	8006aea <_free_r+0x26>
 8006b34:	d902      	bls.n	8006b3c <_free_r+0x78>
 8006b36:	230c      	movs	r3, #12
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	e7d6      	b.n	8006aea <_free_r+0x26>
 8006b3c:	6825      	ldr	r5, [r4, #0]
 8006b3e:	1961      	adds	r1, r4, r5
 8006b40:	428b      	cmp	r3, r1
 8006b42:	bf04      	itt	eq
 8006b44:	6819      	ldreq	r1, [r3, #0]
 8006b46:	685b      	ldreq	r3, [r3, #4]
 8006b48:	6063      	str	r3, [r4, #4]
 8006b4a:	bf04      	itt	eq
 8006b4c:	1949      	addeq	r1, r1, r5
 8006b4e:	6021      	streq	r1, [r4, #0]
 8006b50:	6054      	str	r4, [r2, #4]
 8006b52:	e7ca      	b.n	8006aea <_free_r+0x26>
 8006b54:	b003      	add	sp, #12
 8006b56:	bd30      	pop	{r4, r5, pc}
 8006b58:	20000880 	.word	0x20000880

08006b5c <malloc>:
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <malloc+0xc>)
 8006b5e:	4601      	mov	r1, r0
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	f000 b823 	b.w	8006bac <_malloc_r>
 8006b66:	bf00      	nop
 8006b68:	2000006c 	.word	0x2000006c

08006b6c <sbrk_aligned>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	4e0e      	ldr	r6, [pc, #56]	; (8006ba8 <sbrk_aligned+0x3c>)
 8006b70:	460c      	mov	r4, r1
 8006b72:	6831      	ldr	r1, [r6, #0]
 8006b74:	4605      	mov	r5, r0
 8006b76:	b911      	cbnz	r1, 8006b7e <sbrk_aligned+0x12>
 8006b78:	f000 fe40 	bl	80077fc <_sbrk_r>
 8006b7c:	6030      	str	r0, [r6, #0]
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 fe3b 	bl	80077fc <_sbrk_r>
 8006b86:	1c43      	adds	r3, r0, #1
 8006b88:	d00a      	beq.n	8006ba0 <sbrk_aligned+0x34>
 8006b8a:	1cc4      	adds	r4, r0, #3
 8006b8c:	f024 0403 	bic.w	r4, r4, #3
 8006b90:	42a0      	cmp	r0, r4
 8006b92:	d007      	beq.n	8006ba4 <sbrk_aligned+0x38>
 8006b94:	1a21      	subs	r1, r4, r0
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fe30 	bl	80077fc <_sbrk_r>
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d101      	bne.n	8006ba4 <sbrk_aligned+0x38>
 8006ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	20000884 	.word	0x20000884

08006bac <_malloc_r>:
 8006bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb0:	1ccd      	adds	r5, r1, #3
 8006bb2:	f025 0503 	bic.w	r5, r5, #3
 8006bb6:	3508      	adds	r5, #8
 8006bb8:	2d0c      	cmp	r5, #12
 8006bba:	bf38      	it	cc
 8006bbc:	250c      	movcc	r5, #12
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	db01      	blt.n	8006bc8 <_malloc_r+0x1c>
 8006bc4:	42a9      	cmp	r1, r5
 8006bc6:	d905      	bls.n	8006bd4 <_malloc_r+0x28>
 8006bc8:	230c      	movs	r3, #12
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	2600      	movs	r6, #0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ca8 <_malloc_r+0xfc>
 8006bd8:	f000 f868 	bl	8006cac <__malloc_lock>
 8006bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8006be0:	461c      	mov	r4, r3
 8006be2:	bb5c      	cbnz	r4, 8006c3c <_malloc_r+0x90>
 8006be4:	4629      	mov	r1, r5
 8006be6:	4638      	mov	r0, r7
 8006be8:	f7ff ffc0 	bl	8006b6c <sbrk_aligned>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	4604      	mov	r4, r0
 8006bf0:	d155      	bne.n	8006c9e <_malloc_r+0xf2>
 8006bf2:	f8d8 4000 	ldr.w	r4, [r8]
 8006bf6:	4626      	mov	r6, r4
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	d145      	bne.n	8006c88 <_malloc_r+0xdc>
 8006bfc:	2c00      	cmp	r4, #0
 8006bfe:	d048      	beq.n	8006c92 <_malloc_r+0xe6>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	4631      	mov	r1, r6
 8006c04:	4638      	mov	r0, r7
 8006c06:	eb04 0903 	add.w	r9, r4, r3
 8006c0a:	f000 fdf7 	bl	80077fc <_sbrk_r>
 8006c0e:	4581      	cmp	r9, r0
 8006c10:	d13f      	bne.n	8006c92 <_malloc_r+0xe6>
 8006c12:	6821      	ldr	r1, [r4, #0]
 8006c14:	1a6d      	subs	r5, r5, r1
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ffa7 	bl	8006b6c <sbrk_aligned>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	d037      	beq.n	8006c92 <_malloc_r+0xe6>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	442b      	add	r3, r5
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d038      	beq.n	8006ca2 <_malloc_r+0xf6>
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	42a2      	cmp	r2, r4
 8006c34:	d12b      	bne.n	8006c8e <_malloc_r+0xe2>
 8006c36:	2200      	movs	r2, #0
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	e00f      	b.n	8006c5c <_malloc_r+0xb0>
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	1b52      	subs	r2, r2, r5
 8006c40:	d41f      	bmi.n	8006c82 <_malloc_r+0xd6>
 8006c42:	2a0b      	cmp	r2, #11
 8006c44:	d917      	bls.n	8006c76 <_malloc_r+0xca>
 8006c46:	1961      	adds	r1, r4, r5
 8006c48:	42a3      	cmp	r3, r4
 8006c4a:	6025      	str	r5, [r4, #0]
 8006c4c:	bf18      	it	ne
 8006c4e:	6059      	strne	r1, [r3, #4]
 8006c50:	6863      	ldr	r3, [r4, #4]
 8006c52:	bf08      	it	eq
 8006c54:	f8c8 1000 	streq.w	r1, [r8]
 8006c58:	5162      	str	r2, [r4, r5]
 8006c5a:	604b      	str	r3, [r1, #4]
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	f104 060b 	add.w	r6, r4, #11
 8006c62:	f000 f829 	bl	8006cb8 <__malloc_unlock>
 8006c66:	f026 0607 	bic.w	r6, r6, #7
 8006c6a:	1d23      	adds	r3, r4, #4
 8006c6c:	1af2      	subs	r2, r6, r3
 8006c6e:	d0ae      	beq.n	8006bce <_malloc_r+0x22>
 8006c70:	1b9b      	subs	r3, r3, r6
 8006c72:	50a3      	str	r3, [r4, r2]
 8006c74:	e7ab      	b.n	8006bce <_malloc_r+0x22>
 8006c76:	42a3      	cmp	r3, r4
 8006c78:	6862      	ldr	r2, [r4, #4]
 8006c7a:	d1dd      	bne.n	8006c38 <_malloc_r+0x8c>
 8006c7c:	f8c8 2000 	str.w	r2, [r8]
 8006c80:	e7ec      	b.n	8006c5c <_malloc_r+0xb0>
 8006c82:	4623      	mov	r3, r4
 8006c84:	6864      	ldr	r4, [r4, #4]
 8006c86:	e7ac      	b.n	8006be2 <_malloc_r+0x36>
 8006c88:	4634      	mov	r4, r6
 8006c8a:	6876      	ldr	r6, [r6, #4]
 8006c8c:	e7b4      	b.n	8006bf8 <_malloc_r+0x4c>
 8006c8e:	4613      	mov	r3, r2
 8006c90:	e7cc      	b.n	8006c2c <_malloc_r+0x80>
 8006c92:	230c      	movs	r3, #12
 8006c94:	603b      	str	r3, [r7, #0]
 8006c96:	4638      	mov	r0, r7
 8006c98:	f000 f80e 	bl	8006cb8 <__malloc_unlock>
 8006c9c:	e797      	b.n	8006bce <_malloc_r+0x22>
 8006c9e:	6025      	str	r5, [r4, #0]
 8006ca0:	e7dc      	b.n	8006c5c <_malloc_r+0xb0>
 8006ca2:	605b      	str	r3, [r3, #4]
 8006ca4:	deff      	udf	#255	; 0xff
 8006ca6:	bf00      	nop
 8006ca8:	20000880 	.word	0x20000880

08006cac <__malloc_lock>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__malloc_lock+0x8>)
 8006cae:	f7ff b88a 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	2000087c 	.word	0x2000087c

08006cb8 <__malloc_unlock>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	; (8006cc0 <__malloc_unlock+0x8>)
 8006cba:	f7ff b885 	b.w	8005dc8 <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	2000087c 	.word	0x2000087c

08006cc4 <_Balloc>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	69c6      	ldr	r6, [r0, #28]
 8006cc8:	4604      	mov	r4, r0
 8006cca:	460d      	mov	r5, r1
 8006ccc:	b976      	cbnz	r6, 8006cec <_Balloc+0x28>
 8006cce:	2010      	movs	r0, #16
 8006cd0:	f7ff ff44 	bl	8006b5c <malloc>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	61e0      	str	r0, [r4, #28]
 8006cd8:	b920      	cbnz	r0, 8006ce4 <_Balloc+0x20>
 8006cda:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <_Balloc+0x78>)
 8006cdc:	4818      	ldr	r0, [pc, #96]	; (8006d40 <_Balloc+0x7c>)
 8006cde:	216b      	movs	r1, #107	; 0x6b
 8006ce0:	f000 fdaa 	bl	8007838 <__assert_func>
 8006ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ce8:	6006      	str	r6, [r0, #0]
 8006cea:	60c6      	str	r6, [r0, #12]
 8006cec:	69e6      	ldr	r6, [r4, #28]
 8006cee:	68f3      	ldr	r3, [r6, #12]
 8006cf0:	b183      	cbz	r3, 8006d14 <_Balloc+0x50>
 8006cf2:	69e3      	ldr	r3, [r4, #28]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006cfa:	b9b8      	cbnz	r0, 8006d2c <_Balloc+0x68>
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8006d02:	1d72      	adds	r2, r6, #5
 8006d04:	0092      	lsls	r2, r2, #2
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fdb4 	bl	8007874 <_calloc_r>
 8006d0c:	b160      	cbz	r0, 8006d28 <_Balloc+0x64>
 8006d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d12:	e00e      	b.n	8006d32 <_Balloc+0x6e>
 8006d14:	2221      	movs	r2, #33	; 0x21
 8006d16:	2104      	movs	r1, #4
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fdab 	bl	8007874 <_calloc_r>
 8006d1e:	69e3      	ldr	r3, [r4, #28]
 8006d20:	60f0      	str	r0, [r6, #12]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e4      	bne.n	8006cf2 <_Balloc+0x2e>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	6802      	ldr	r2, [r0, #0]
 8006d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d32:	2300      	movs	r3, #0
 8006d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d38:	e7f7      	b.n	8006d2a <_Balloc+0x66>
 8006d3a:	bf00      	nop
 8006d3c:	08008ca1 	.word	0x08008ca1
 8006d40:	08008d21 	.word	0x08008d21

08006d44 <_Bfree>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	69c6      	ldr	r6, [r0, #28]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b976      	cbnz	r6, 8006d6c <_Bfree+0x28>
 8006d4e:	2010      	movs	r0, #16
 8006d50:	f7ff ff04 	bl	8006b5c <malloc>
 8006d54:	4602      	mov	r2, r0
 8006d56:	61e8      	str	r0, [r5, #28]
 8006d58:	b920      	cbnz	r0, 8006d64 <_Bfree+0x20>
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <_Bfree+0x3c>)
 8006d5c:	4809      	ldr	r0, [pc, #36]	; (8006d84 <_Bfree+0x40>)
 8006d5e:	218f      	movs	r1, #143	; 0x8f
 8006d60:	f000 fd6a 	bl	8007838 <__assert_func>
 8006d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d68:	6006      	str	r6, [r0, #0]
 8006d6a:	60c6      	str	r6, [r0, #12]
 8006d6c:	b13c      	cbz	r4, 8006d7e <_Bfree+0x3a>
 8006d6e:	69eb      	ldr	r3, [r5, #28]
 8006d70:	6862      	ldr	r2, [r4, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d78:	6021      	str	r1, [r4, #0]
 8006d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	08008ca1 	.word	0x08008ca1
 8006d84:	08008d21 	.word	0x08008d21

08006d88 <__multadd>:
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8c:	690d      	ldr	r5, [r1, #16]
 8006d8e:	4607      	mov	r7, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	461e      	mov	r6, r3
 8006d94:	f101 0c14 	add.w	ip, r1, #20
 8006d98:	2000      	movs	r0, #0
 8006d9a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d9e:	b299      	uxth	r1, r3
 8006da0:	fb02 6101 	mla	r1, r2, r1, r6
 8006da4:	0c1e      	lsrs	r6, r3, #16
 8006da6:	0c0b      	lsrs	r3, r1, #16
 8006da8:	fb02 3306 	mla	r3, r2, r6, r3
 8006dac:	b289      	uxth	r1, r1
 8006dae:	3001      	adds	r0, #1
 8006db0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006db4:	4285      	cmp	r5, r0
 8006db6:	f84c 1b04 	str.w	r1, [ip], #4
 8006dba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dbe:	dcec      	bgt.n	8006d9a <__multadd+0x12>
 8006dc0:	b30e      	cbz	r6, 8006e06 <__multadd+0x7e>
 8006dc2:	68a3      	ldr	r3, [r4, #8]
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dc19      	bgt.n	8006dfc <__multadd+0x74>
 8006dc8:	6861      	ldr	r1, [r4, #4]
 8006dca:	4638      	mov	r0, r7
 8006dcc:	3101      	adds	r1, #1
 8006dce:	f7ff ff79 	bl	8006cc4 <_Balloc>
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	b928      	cbnz	r0, 8006de2 <__multadd+0x5a>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <__multadd+0x84>)
 8006dda:	480d      	ldr	r0, [pc, #52]	; (8006e10 <__multadd+0x88>)
 8006ddc:	21ba      	movs	r1, #186	; 0xba
 8006dde:	f000 fd2b 	bl	8007838 <__assert_func>
 8006de2:	6922      	ldr	r2, [r4, #16]
 8006de4:	3202      	adds	r2, #2
 8006de6:	f104 010c 	add.w	r1, r4, #12
 8006dea:	0092      	lsls	r2, r2, #2
 8006dec:	300c      	adds	r0, #12
 8006dee:	f000 fd15 	bl	800781c <memcpy>
 8006df2:	4621      	mov	r1, r4
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff ffa5 	bl	8006d44 <_Bfree>
 8006dfa:	4644      	mov	r4, r8
 8006dfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e00:	3501      	adds	r5, #1
 8006e02:	615e      	str	r6, [r3, #20]
 8006e04:	6125      	str	r5, [r4, #16]
 8006e06:	4620      	mov	r0, r4
 8006e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0c:	08008d10 	.word	0x08008d10
 8006e10:	08008d21 	.word	0x08008d21

08006e14 <__hi0bits>:
 8006e14:	0c03      	lsrs	r3, r0, #16
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	b9d3      	cbnz	r3, 8006e50 <__hi0bits+0x3c>
 8006e1a:	0400      	lsls	r0, r0, #16
 8006e1c:	2310      	movs	r3, #16
 8006e1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e22:	bf04      	itt	eq
 8006e24:	0200      	lsleq	r0, r0, #8
 8006e26:	3308      	addeq	r3, #8
 8006e28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e2c:	bf04      	itt	eq
 8006e2e:	0100      	lsleq	r0, r0, #4
 8006e30:	3304      	addeq	r3, #4
 8006e32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e36:	bf04      	itt	eq
 8006e38:	0080      	lsleq	r0, r0, #2
 8006e3a:	3302      	addeq	r3, #2
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	db05      	blt.n	8006e4c <__hi0bits+0x38>
 8006e40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e44:	f103 0301 	add.w	r3, r3, #1
 8006e48:	bf08      	it	eq
 8006e4a:	2320      	moveq	r3, #32
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	4770      	bx	lr
 8006e50:	2300      	movs	r3, #0
 8006e52:	e7e4      	b.n	8006e1e <__hi0bits+0xa>

08006e54 <__lo0bits>:
 8006e54:	6803      	ldr	r3, [r0, #0]
 8006e56:	f013 0207 	ands.w	r2, r3, #7
 8006e5a:	d00c      	beq.n	8006e76 <__lo0bits+0x22>
 8006e5c:	07d9      	lsls	r1, r3, #31
 8006e5e:	d422      	bmi.n	8006ea6 <__lo0bits+0x52>
 8006e60:	079a      	lsls	r2, r3, #30
 8006e62:	bf49      	itett	mi
 8006e64:	085b      	lsrmi	r3, r3, #1
 8006e66:	089b      	lsrpl	r3, r3, #2
 8006e68:	6003      	strmi	r3, [r0, #0]
 8006e6a:	2201      	movmi	r2, #1
 8006e6c:	bf5c      	itt	pl
 8006e6e:	6003      	strpl	r3, [r0, #0]
 8006e70:	2202      	movpl	r2, #2
 8006e72:	4610      	mov	r0, r2
 8006e74:	4770      	bx	lr
 8006e76:	b299      	uxth	r1, r3
 8006e78:	b909      	cbnz	r1, 8006e7e <__lo0bits+0x2a>
 8006e7a:	0c1b      	lsrs	r3, r3, #16
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	b2d9      	uxtb	r1, r3
 8006e80:	b909      	cbnz	r1, 8006e86 <__lo0bits+0x32>
 8006e82:	3208      	adds	r2, #8
 8006e84:	0a1b      	lsrs	r3, r3, #8
 8006e86:	0719      	lsls	r1, r3, #28
 8006e88:	bf04      	itt	eq
 8006e8a:	091b      	lsreq	r3, r3, #4
 8006e8c:	3204      	addeq	r2, #4
 8006e8e:	0799      	lsls	r1, r3, #30
 8006e90:	bf04      	itt	eq
 8006e92:	089b      	lsreq	r3, r3, #2
 8006e94:	3202      	addeq	r2, #2
 8006e96:	07d9      	lsls	r1, r3, #31
 8006e98:	d403      	bmi.n	8006ea2 <__lo0bits+0x4e>
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	f102 0201 	add.w	r2, r2, #1
 8006ea0:	d003      	beq.n	8006eaa <__lo0bits+0x56>
 8006ea2:	6003      	str	r3, [r0, #0]
 8006ea4:	e7e5      	b.n	8006e72 <__lo0bits+0x1e>
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	e7e3      	b.n	8006e72 <__lo0bits+0x1e>
 8006eaa:	2220      	movs	r2, #32
 8006eac:	e7e1      	b.n	8006e72 <__lo0bits+0x1e>
	...

08006eb0 <__i2b>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	f7ff ff05 	bl	8006cc4 <_Balloc>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	b928      	cbnz	r0, 8006eca <__i2b+0x1a>
 8006ebe:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <__i2b+0x24>)
 8006ec0:	4805      	ldr	r0, [pc, #20]	; (8006ed8 <__i2b+0x28>)
 8006ec2:	f240 1145 	movw	r1, #325	; 0x145
 8006ec6:	f000 fcb7 	bl	8007838 <__assert_func>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	6144      	str	r4, [r0, #20]
 8006ece:	6103      	str	r3, [r0, #16]
 8006ed0:	bd10      	pop	{r4, pc}
 8006ed2:	bf00      	nop
 8006ed4:	08008d10 	.word	0x08008d10
 8006ed8:	08008d21 	.word	0x08008d21

08006edc <__multiply>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	4691      	mov	r9, r2
 8006ee2:	690a      	ldr	r2, [r1, #16]
 8006ee4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	bfb8      	it	lt
 8006eec:	460b      	movlt	r3, r1
 8006eee:	460c      	mov	r4, r1
 8006ef0:	bfbc      	itt	lt
 8006ef2:	464c      	movlt	r4, r9
 8006ef4:	4699      	movlt	r9, r3
 8006ef6:	6927      	ldr	r7, [r4, #16]
 8006ef8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006efc:	68a3      	ldr	r3, [r4, #8]
 8006efe:	6861      	ldr	r1, [r4, #4]
 8006f00:	eb07 060a 	add.w	r6, r7, sl
 8006f04:	42b3      	cmp	r3, r6
 8006f06:	b085      	sub	sp, #20
 8006f08:	bfb8      	it	lt
 8006f0a:	3101      	addlt	r1, #1
 8006f0c:	f7ff feda 	bl	8006cc4 <_Balloc>
 8006f10:	b930      	cbnz	r0, 8006f20 <__multiply+0x44>
 8006f12:	4602      	mov	r2, r0
 8006f14:	4b44      	ldr	r3, [pc, #272]	; (8007028 <__multiply+0x14c>)
 8006f16:	4845      	ldr	r0, [pc, #276]	; (800702c <__multiply+0x150>)
 8006f18:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006f1c:	f000 fc8c 	bl	8007838 <__assert_func>
 8006f20:	f100 0514 	add.w	r5, r0, #20
 8006f24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f28:	462b      	mov	r3, r5
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4543      	cmp	r3, r8
 8006f2e:	d321      	bcc.n	8006f74 <__multiply+0x98>
 8006f30:	f104 0314 	add.w	r3, r4, #20
 8006f34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f38:	f109 0314 	add.w	r3, r9, #20
 8006f3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006f40:	9202      	str	r2, [sp, #8]
 8006f42:	1b3a      	subs	r2, r7, r4
 8006f44:	3a15      	subs	r2, #21
 8006f46:	f022 0203 	bic.w	r2, r2, #3
 8006f4a:	3204      	adds	r2, #4
 8006f4c:	f104 0115 	add.w	r1, r4, #21
 8006f50:	428f      	cmp	r7, r1
 8006f52:	bf38      	it	cc
 8006f54:	2204      	movcc	r2, #4
 8006f56:	9201      	str	r2, [sp, #4]
 8006f58:	9a02      	ldr	r2, [sp, #8]
 8006f5a:	9303      	str	r3, [sp, #12]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d80c      	bhi.n	8006f7a <__multiply+0x9e>
 8006f60:	2e00      	cmp	r6, #0
 8006f62:	dd03      	ble.n	8006f6c <__multiply+0x90>
 8006f64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d05b      	beq.n	8007024 <__multiply+0x148>
 8006f6c:	6106      	str	r6, [r0, #16]
 8006f6e:	b005      	add	sp, #20
 8006f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f74:	f843 2b04 	str.w	r2, [r3], #4
 8006f78:	e7d8      	b.n	8006f2c <__multiply+0x50>
 8006f7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f7e:	f1ba 0f00 	cmp.w	sl, #0
 8006f82:	d024      	beq.n	8006fce <__multiply+0xf2>
 8006f84:	f104 0e14 	add.w	lr, r4, #20
 8006f88:	46a9      	mov	r9, r5
 8006f8a:	f04f 0c00 	mov.w	ip, #0
 8006f8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f92:	f8d9 1000 	ldr.w	r1, [r9]
 8006f96:	fa1f fb82 	uxth.w	fp, r2
 8006f9a:	b289      	uxth	r1, r1
 8006f9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006fa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006fa4:	f8d9 2000 	ldr.w	r2, [r9]
 8006fa8:	4461      	add	r1, ip
 8006faa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fae:	fb0a c20b 	mla	r2, sl, fp, ip
 8006fb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006fb6:	b289      	uxth	r1, r1
 8006fb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fbc:	4577      	cmp	r7, lr
 8006fbe:	f849 1b04 	str.w	r1, [r9], #4
 8006fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006fc6:	d8e2      	bhi.n	8006f8e <__multiply+0xb2>
 8006fc8:	9a01      	ldr	r2, [sp, #4]
 8006fca:	f845 c002 	str.w	ip, [r5, r2]
 8006fce:	9a03      	ldr	r2, [sp, #12]
 8006fd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	d021      	beq.n	8007020 <__multiply+0x144>
 8006fdc:	6829      	ldr	r1, [r5, #0]
 8006fde:	f104 0c14 	add.w	ip, r4, #20
 8006fe2:	46ae      	mov	lr, r5
 8006fe4:	f04f 0a00 	mov.w	sl, #0
 8006fe8:	f8bc b000 	ldrh.w	fp, [ip]
 8006fec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ff0:	fb09 220b 	mla	r2, r9, fp, r2
 8006ff4:	4452      	add	r2, sl
 8006ff6:	b289      	uxth	r1, r1
 8006ff8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ffc:	f84e 1b04 	str.w	r1, [lr], #4
 8007000:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007004:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007008:	f8be 1000 	ldrh.w	r1, [lr]
 800700c:	fb09 110a 	mla	r1, r9, sl, r1
 8007010:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007014:	4567      	cmp	r7, ip
 8007016:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800701a:	d8e5      	bhi.n	8006fe8 <__multiply+0x10c>
 800701c:	9a01      	ldr	r2, [sp, #4]
 800701e:	50a9      	str	r1, [r5, r2]
 8007020:	3504      	adds	r5, #4
 8007022:	e799      	b.n	8006f58 <__multiply+0x7c>
 8007024:	3e01      	subs	r6, #1
 8007026:	e79b      	b.n	8006f60 <__multiply+0x84>
 8007028:	08008d10 	.word	0x08008d10
 800702c:	08008d21 	.word	0x08008d21

08007030 <__pow5mult>:
 8007030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007034:	4615      	mov	r5, r2
 8007036:	f012 0203 	ands.w	r2, r2, #3
 800703a:	4606      	mov	r6, r0
 800703c:	460f      	mov	r7, r1
 800703e:	d007      	beq.n	8007050 <__pow5mult+0x20>
 8007040:	4c25      	ldr	r4, [pc, #148]	; (80070d8 <__pow5mult+0xa8>)
 8007042:	3a01      	subs	r2, #1
 8007044:	2300      	movs	r3, #0
 8007046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800704a:	f7ff fe9d 	bl	8006d88 <__multadd>
 800704e:	4607      	mov	r7, r0
 8007050:	10ad      	asrs	r5, r5, #2
 8007052:	d03d      	beq.n	80070d0 <__pow5mult+0xa0>
 8007054:	69f4      	ldr	r4, [r6, #28]
 8007056:	b97c      	cbnz	r4, 8007078 <__pow5mult+0x48>
 8007058:	2010      	movs	r0, #16
 800705a:	f7ff fd7f 	bl	8006b5c <malloc>
 800705e:	4602      	mov	r2, r0
 8007060:	61f0      	str	r0, [r6, #28]
 8007062:	b928      	cbnz	r0, 8007070 <__pow5mult+0x40>
 8007064:	4b1d      	ldr	r3, [pc, #116]	; (80070dc <__pow5mult+0xac>)
 8007066:	481e      	ldr	r0, [pc, #120]	; (80070e0 <__pow5mult+0xb0>)
 8007068:	f240 11b3 	movw	r1, #435	; 0x1b3
 800706c:	f000 fbe4 	bl	8007838 <__assert_func>
 8007070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007074:	6004      	str	r4, [r0, #0]
 8007076:	60c4      	str	r4, [r0, #12]
 8007078:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800707c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007080:	b94c      	cbnz	r4, 8007096 <__pow5mult+0x66>
 8007082:	f240 2171 	movw	r1, #625	; 0x271
 8007086:	4630      	mov	r0, r6
 8007088:	f7ff ff12 	bl	8006eb0 <__i2b>
 800708c:	2300      	movs	r3, #0
 800708e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007092:	4604      	mov	r4, r0
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	f04f 0900 	mov.w	r9, #0
 800709a:	07eb      	lsls	r3, r5, #31
 800709c:	d50a      	bpl.n	80070b4 <__pow5mult+0x84>
 800709e:	4639      	mov	r1, r7
 80070a0:	4622      	mov	r2, r4
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ff1a 	bl	8006edc <__multiply>
 80070a8:	4639      	mov	r1, r7
 80070aa:	4680      	mov	r8, r0
 80070ac:	4630      	mov	r0, r6
 80070ae:	f7ff fe49 	bl	8006d44 <_Bfree>
 80070b2:	4647      	mov	r7, r8
 80070b4:	106d      	asrs	r5, r5, #1
 80070b6:	d00b      	beq.n	80070d0 <__pow5mult+0xa0>
 80070b8:	6820      	ldr	r0, [r4, #0]
 80070ba:	b938      	cbnz	r0, 80070cc <__pow5mult+0x9c>
 80070bc:	4622      	mov	r2, r4
 80070be:	4621      	mov	r1, r4
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff ff0b 	bl	8006edc <__multiply>
 80070c6:	6020      	str	r0, [r4, #0]
 80070c8:	f8c0 9000 	str.w	r9, [r0]
 80070cc:	4604      	mov	r4, r0
 80070ce:	e7e4      	b.n	800709a <__pow5mult+0x6a>
 80070d0:	4638      	mov	r0, r7
 80070d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d6:	bf00      	nop
 80070d8:	08008e70 	.word	0x08008e70
 80070dc:	08008ca1 	.word	0x08008ca1
 80070e0:	08008d21 	.word	0x08008d21

080070e4 <__lshift>:
 80070e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	460c      	mov	r4, r1
 80070ea:	6849      	ldr	r1, [r1, #4]
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070f2:	68a3      	ldr	r3, [r4, #8]
 80070f4:	4607      	mov	r7, r0
 80070f6:	4691      	mov	r9, r2
 80070f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070fc:	f108 0601 	add.w	r6, r8, #1
 8007100:	42b3      	cmp	r3, r6
 8007102:	db0b      	blt.n	800711c <__lshift+0x38>
 8007104:	4638      	mov	r0, r7
 8007106:	f7ff fddd 	bl	8006cc4 <_Balloc>
 800710a:	4605      	mov	r5, r0
 800710c:	b948      	cbnz	r0, 8007122 <__lshift+0x3e>
 800710e:	4602      	mov	r2, r0
 8007110:	4b28      	ldr	r3, [pc, #160]	; (80071b4 <__lshift+0xd0>)
 8007112:	4829      	ldr	r0, [pc, #164]	; (80071b8 <__lshift+0xd4>)
 8007114:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007118:	f000 fb8e 	bl	8007838 <__assert_func>
 800711c:	3101      	adds	r1, #1
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	e7ee      	b.n	8007100 <__lshift+0x1c>
 8007122:	2300      	movs	r3, #0
 8007124:	f100 0114 	add.w	r1, r0, #20
 8007128:	f100 0210 	add.w	r2, r0, #16
 800712c:	4618      	mov	r0, r3
 800712e:	4553      	cmp	r3, sl
 8007130:	db33      	blt.n	800719a <__lshift+0xb6>
 8007132:	6920      	ldr	r0, [r4, #16]
 8007134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007138:	f104 0314 	add.w	r3, r4, #20
 800713c:	f019 091f 	ands.w	r9, r9, #31
 8007140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007144:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007148:	d02b      	beq.n	80071a2 <__lshift+0xbe>
 800714a:	f1c9 0e20 	rsb	lr, r9, #32
 800714e:	468a      	mov	sl, r1
 8007150:	2200      	movs	r2, #0
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	fa00 f009 	lsl.w	r0, r0, r9
 8007158:	4310      	orrs	r0, r2
 800715a:	f84a 0b04 	str.w	r0, [sl], #4
 800715e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007162:	459c      	cmp	ip, r3
 8007164:	fa22 f20e 	lsr.w	r2, r2, lr
 8007168:	d8f3      	bhi.n	8007152 <__lshift+0x6e>
 800716a:	ebac 0304 	sub.w	r3, ip, r4
 800716e:	3b15      	subs	r3, #21
 8007170:	f023 0303 	bic.w	r3, r3, #3
 8007174:	3304      	adds	r3, #4
 8007176:	f104 0015 	add.w	r0, r4, #21
 800717a:	4584      	cmp	ip, r0
 800717c:	bf38      	it	cc
 800717e:	2304      	movcc	r3, #4
 8007180:	50ca      	str	r2, [r1, r3]
 8007182:	b10a      	cbz	r2, 8007188 <__lshift+0xa4>
 8007184:	f108 0602 	add.w	r6, r8, #2
 8007188:	3e01      	subs	r6, #1
 800718a:	4638      	mov	r0, r7
 800718c:	612e      	str	r6, [r5, #16]
 800718e:	4621      	mov	r1, r4
 8007190:	f7ff fdd8 	bl	8006d44 <_Bfree>
 8007194:	4628      	mov	r0, r5
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	f842 0f04 	str.w	r0, [r2, #4]!
 800719e:	3301      	adds	r3, #1
 80071a0:	e7c5      	b.n	800712e <__lshift+0x4a>
 80071a2:	3904      	subs	r1, #4
 80071a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071ac:	459c      	cmp	ip, r3
 80071ae:	d8f9      	bhi.n	80071a4 <__lshift+0xc0>
 80071b0:	e7ea      	b.n	8007188 <__lshift+0xa4>
 80071b2:	bf00      	nop
 80071b4:	08008d10 	.word	0x08008d10
 80071b8:	08008d21 	.word	0x08008d21

080071bc <__mcmp>:
 80071bc:	b530      	push	{r4, r5, lr}
 80071be:	6902      	ldr	r2, [r0, #16]
 80071c0:	690c      	ldr	r4, [r1, #16]
 80071c2:	1b12      	subs	r2, r2, r4
 80071c4:	d10e      	bne.n	80071e4 <__mcmp+0x28>
 80071c6:	f100 0314 	add.w	r3, r0, #20
 80071ca:	3114      	adds	r1, #20
 80071cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80071d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80071d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80071dc:	42a5      	cmp	r5, r4
 80071de:	d003      	beq.n	80071e8 <__mcmp+0x2c>
 80071e0:	d305      	bcc.n	80071ee <__mcmp+0x32>
 80071e2:	2201      	movs	r2, #1
 80071e4:	4610      	mov	r0, r2
 80071e6:	bd30      	pop	{r4, r5, pc}
 80071e8:	4283      	cmp	r3, r0
 80071ea:	d3f3      	bcc.n	80071d4 <__mcmp+0x18>
 80071ec:	e7fa      	b.n	80071e4 <__mcmp+0x28>
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295
 80071f2:	e7f7      	b.n	80071e4 <__mcmp+0x28>

080071f4 <__mdiff>:
 80071f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	460c      	mov	r4, r1
 80071fa:	4606      	mov	r6, r0
 80071fc:	4611      	mov	r1, r2
 80071fe:	4620      	mov	r0, r4
 8007200:	4690      	mov	r8, r2
 8007202:	f7ff ffdb 	bl	80071bc <__mcmp>
 8007206:	1e05      	subs	r5, r0, #0
 8007208:	d110      	bne.n	800722c <__mdiff+0x38>
 800720a:	4629      	mov	r1, r5
 800720c:	4630      	mov	r0, r6
 800720e:	f7ff fd59 	bl	8006cc4 <_Balloc>
 8007212:	b930      	cbnz	r0, 8007222 <__mdiff+0x2e>
 8007214:	4b3a      	ldr	r3, [pc, #232]	; (8007300 <__mdiff+0x10c>)
 8007216:	4602      	mov	r2, r0
 8007218:	f240 2137 	movw	r1, #567	; 0x237
 800721c:	4839      	ldr	r0, [pc, #228]	; (8007304 <__mdiff+0x110>)
 800721e:	f000 fb0b 	bl	8007838 <__assert_func>
 8007222:	2301      	movs	r3, #1
 8007224:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722c:	bfa4      	itt	ge
 800722e:	4643      	movge	r3, r8
 8007230:	46a0      	movge	r8, r4
 8007232:	4630      	mov	r0, r6
 8007234:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007238:	bfa6      	itte	ge
 800723a:	461c      	movge	r4, r3
 800723c:	2500      	movge	r5, #0
 800723e:	2501      	movlt	r5, #1
 8007240:	f7ff fd40 	bl	8006cc4 <_Balloc>
 8007244:	b920      	cbnz	r0, 8007250 <__mdiff+0x5c>
 8007246:	4b2e      	ldr	r3, [pc, #184]	; (8007300 <__mdiff+0x10c>)
 8007248:	4602      	mov	r2, r0
 800724a:	f240 2145 	movw	r1, #581	; 0x245
 800724e:	e7e5      	b.n	800721c <__mdiff+0x28>
 8007250:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007254:	6926      	ldr	r6, [r4, #16]
 8007256:	60c5      	str	r5, [r0, #12]
 8007258:	f104 0914 	add.w	r9, r4, #20
 800725c:	f108 0514 	add.w	r5, r8, #20
 8007260:	f100 0e14 	add.w	lr, r0, #20
 8007264:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007268:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800726c:	f108 0210 	add.w	r2, r8, #16
 8007270:	46f2      	mov	sl, lr
 8007272:	2100      	movs	r1, #0
 8007274:	f859 3b04 	ldr.w	r3, [r9], #4
 8007278:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800727c:	fa11 f88b 	uxtah	r8, r1, fp
 8007280:	b299      	uxth	r1, r3
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	eba8 0801 	sub.w	r8, r8, r1
 8007288:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800728c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007290:	fa1f f888 	uxth.w	r8, r8
 8007294:	1419      	asrs	r1, r3, #16
 8007296:	454e      	cmp	r6, r9
 8007298:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800729c:	f84a 3b04 	str.w	r3, [sl], #4
 80072a0:	d8e8      	bhi.n	8007274 <__mdiff+0x80>
 80072a2:	1b33      	subs	r3, r6, r4
 80072a4:	3b15      	subs	r3, #21
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	3304      	adds	r3, #4
 80072ac:	3415      	adds	r4, #21
 80072ae:	42a6      	cmp	r6, r4
 80072b0:	bf38      	it	cc
 80072b2:	2304      	movcc	r3, #4
 80072b4:	441d      	add	r5, r3
 80072b6:	4473      	add	r3, lr
 80072b8:	469e      	mov	lr, r3
 80072ba:	462e      	mov	r6, r5
 80072bc:	4566      	cmp	r6, ip
 80072be:	d30e      	bcc.n	80072de <__mdiff+0xea>
 80072c0:	f10c 0203 	add.w	r2, ip, #3
 80072c4:	1b52      	subs	r2, r2, r5
 80072c6:	f022 0203 	bic.w	r2, r2, #3
 80072ca:	3d03      	subs	r5, #3
 80072cc:	45ac      	cmp	ip, r5
 80072ce:	bf38      	it	cc
 80072d0:	2200      	movcc	r2, #0
 80072d2:	4413      	add	r3, r2
 80072d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80072d8:	b17a      	cbz	r2, 80072fa <__mdiff+0x106>
 80072da:	6107      	str	r7, [r0, #16]
 80072dc:	e7a4      	b.n	8007228 <__mdiff+0x34>
 80072de:	f856 8b04 	ldr.w	r8, [r6], #4
 80072e2:	fa11 f288 	uxtah	r2, r1, r8
 80072e6:	1414      	asrs	r4, r2, #16
 80072e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072ec:	b292      	uxth	r2, r2
 80072ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072f2:	f84e 2b04 	str.w	r2, [lr], #4
 80072f6:	1421      	asrs	r1, r4, #16
 80072f8:	e7e0      	b.n	80072bc <__mdiff+0xc8>
 80072fa:	3f01      	subs	r7, #1
 80072fc:	e7ea      	b.n	80072d4 <__mdiff+0xe0>
 80072fe:	bf00      	nop
 8007300:	08008d10 	.word	0x08008d10
 8007304:	08008d21 	.word	0x08008d21

08007308 <__d2b>:
 8007308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800730c:	460f      	mov	r7, r1
 800730e:	2101      	movs	r1, #1
 8007310:	ec59 8b10 	vmov	r8, r9, d0
 8007314:	4616      	mov	r6, r2
 8007316:	f7ff fcd5 	bl	8006cc4 <_Balloc>
 800731a:	4604      	mov	r4, r0
 800731c:	b930      	cbnz	r0, 800732c <__d2b+0x24>
 800731e:	4602      	mov	r2, r0
 8007320:	4b24      	ldr	r3, [pc, #144]	; (80073b4 <__d2b+0xac>)
 8007322:	4825      	ldr	r0, [pc, #148]	; (80073b8 <__d2b+0xb0>)
 8007324:	f240 310f 	movw	r1, #783	; 0x30f
 8007328:	f000 fa86 	bl	8007838 <__assert_func>
 800732c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007334:	bb2d      	cbnz	r5, 8007382 <__d2b+0x7a>
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	f1b8 0300 	subs.w	r3, r8, #0
 800733c:	d026      	beq.n	800738c <__d2b+0x84>
 800733e:	4668      	mov	r0, sp
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	f7ff fd87 	bl	8006e54 <__lo0bits>
 8007346:	e9dd 1200 	ldrd	r1, r2, [sp]
 800734a:	b1e8      	cbz	r0, 8007388 <__d2b+0x80>
 800734c:	f1c0 0320 	rsb	r3, r0, #32
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	430b      	orrs	r3, r1
 8007356:	40c2      	lsrs	r2, r0
 8007358:	6163      	str	r3, [r4, #20]
 800735a:	9201      	str	r2, [sp, #4]
 800735c:	9b01      	ldr	r3, [sp, #4]
 800735e:	61a3      	str	r3, [r4, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	bf14      	ite	ne
 8007364:	2202      	movne	r2, #2
 8007366:	2201      	moveq	r2, #1
 8007368:	6122      	str	r2, [r4, #16]
 800736a:	b1bd      	cbz	r5, 800739c <__d2b+0x94>
 800736c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007370:	4405      	add	r5, r0
 8007372:	603d      	str	r5, [r7, #0]
 8007374:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007378:	6030      	str	r0, [r6, #0]
 800737a:	4620      	mov	r0, r4
 800737c:	b003      	add	sp, #12
 800737e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007386:	e7d6      	b.n	8007336 <__d2b+0x2e>
 8007388:	6161      	str	r1, [r4, #20]
 800738a:	e7e7      	b.n	800735c <__d2b+0x54>
 800738c:	a801      	add	r0, sp, #4
 800738e:	f7ff fd61 	bl	8006e54 <__lo0bits>
 8007392:	9b01      	ldr	r3, [sp, #4]
 8007394:	6163      	str	r3, [r4, #20]
 8007396:	3020      	adds	r0, #32
 8007398:	2201      	movs	r2, #1
 800739a:	e7e5      	b.n	8007368 <__d2b+0x60>
 800739c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80073a4:	6038      	str	r0, [r7, #0]
 80073a6:	6918      	ldr	r0, [r3, #16]
 80073a8:	f7ff fd34 	bl	8006e14 <__hi0bits>
 80073ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073b0:	e7e2      	b.n	8007378 <__d2b+0x70>
 80073b2:	bf00      	nop
 80073b4:	08008d10 	.word	0x08008d10
 80073b8:	08008d21 	.word	0x08008d21

080073bc <__ssputs_r>:
 80073bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c0:	688e      	ldr	r6, [r1, #8]
 80073c2:	461f      	mov	r7, r3
 80073c4:	42be      	cmp	r6, r7
 80073c6:	680b      	ldr	r3, [r1, #0]
 80073c8:	4682      	mov	sl, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	4690      	mov	r8, r2
 80073ce:	d82c      	bhi.n	800742a <__ssputs_r+0x6e>
 80073d0:	898a      	ldrh	r2, [r1, #12]
 80073d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073d6:	d026      	beq.n	8007426 <__ssputs_r+0x6a>
 80073d8:	6965      	ldr	r5, [r4, #20]
 80073da:	6909      	ldr	r1, [r1, #16]
 80073dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073e0:	eba3 0901 	sub.w	r9, r3, r1
 80073e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073e8:	1c7b      	adds	r3, r7, #1
 80073ea:	444b      	add	r3, r9
 80073ec:	106d      	asrs	r5, r5, #1
 80073ee:	429d      	cmp	r5, r3
 80073f0:	bf38      	it	cc
 80073f2:	461d      	movcc	r5, r3
 80073f4:	0553      	lsls	r3, r2, #21
 80073f6:	d527      	bpl.n	8007448 <__ssputs_r+0x8c>
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7ff fbd7 	bl	8006bac <_malloc_r>
 80073fe:	4606      	mov	r6, r0
 8007400:	b360      	cbz	r0, 800745c <__ssputs_r+0xa0>
 8007402:	6921      	ldr	r1, [r4, #16]
 8007404:	464a      	mov	r2, r9
 8007406:	f000 fa09 	bl	800781c <memcpy>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007414:	81a3      	strh	r3, [r4, #12]
 8007416:	6126      	str	r6, [r4, #16]
 8007418:	6165      	str	r5, [r4, #20]
 800741a:	444e      	add	r6, r9
 800741c:	eba5 0509 	sub.w	r5, r5, r9
 8007420:	6026      	str	r6, [r4, #0]
 8007422:	60a5      	str	r5, [r4, #8]
 8007424:	463e      	mov	r6, r7
 8007426:	42be      	cmp	r6, r7
 8007428:	d900      	bls.n	800742c <__ssputs_r+0x70>
 800742a:	463e      	mov	r6, r7
 800742c:	6820      	ldr	r0, [r4, #0]
 800742e:	4632      	mov	r2, r6
 8007430:	4641      	mov	r1, r8
 8007432:	f000 f9c9 	bl	80077c8 <memmove>
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	1b9b      	subs	r3, r3, r6
 800743a:	60a3      	str	r3, [r4, #8]
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	4433      	add	r3, r6
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	2000      	movs	r0, #0
 8007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007448:	462a      	mov	r2, r5
 800744a:	f000 fa3b 	bl	80078c4 <_realloc_r>
 800744e:	4606      	mov	r6, r0
 8007450:	2800      	cmp	r0, #0
 8007452:	d1e0      	bne.n	8007416 <__ssputs_r+0x5a>
 8007454:	6921      	ldr	r1, [r4, #16]
 8007456:	4650      	mov	r0, sl
 8007458:	f7ff fb34 	bl	8006ac4 <_free_r>
 800745c:	230c      	movs	r3, #12
 800745e:	f8ca 3000 	str.w	r3, [sl]
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	f04f 30ff 	mov.w	r0, #4294967295
 800746e:	e7e9      	b.n	8007444 <__ssputs_r+0x88>

08007470 <_svfiprintf_r>:
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	4698      	mov	r8, r3
 8007476:	898b      	ldrh	r3, [r1, #12]
 8007478:	061b      	lsls	r3, r3, #24
 800747a:	b09d      	sub	sp, #116	; 0x74
 800747c:	4607      	mov	r7, r0
 800747e:	460d      	mov	r5, r1
 8007480:	4614      	mov	r4, r2
 8007482:	d50e      	bpl.n	80074a2 <_svfiprintf_r+0x32>
 8007484:	690b      	ldr	r3, [r1, #16]
 8007486:	b963      	cbnz	r3, 80074a2 <_svfiprintf_r+0x32>
 8007488:	2140      	movs	r1, #64	; 0x40
 800748a:	f7ff fb8f 	bl	8006bac <_malloc_r>
 800748e:	6028      	str	r0, [r5, #0]
 8007490:	6128      	str	r0, [r5, #16]
 8007492:	b920      	cbnz	r0, 800749e <_svfiprintf_r+0x2e>
 8007494:	230c      	movs	r3, #12
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	f04f 30ff 	mov.w	r0, #4294967295
 800749c:	e0d0      	b.n	8007640 <_svfiprintf_r+0x1d0>
 800749e:	2340      	movs	r3, #64	; 0x40
 80074a0:	616b      	str	r3, [r5, #20]
 80074a2:	2300      	movs	r3, #0
 80074a4:	9309      	str	r3, [sp, #36]	; 0x24
 80074a6:	2320      	movs	r3, #32
 80074a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b0:	2330      	movs	r3, #48	; 0x30
 80074b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007658 <_svfiprintf_r+0x1e8>
 80074b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ba:	f04f 0901 	mov.w	r9, #1
 80074be:	4623      	mov	r3, r4
 80074c0:	469a      	mov	sl, r3
 80074c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c6:	b10a      	cbz	r2, 80074cc <_svfiprintf_r+0x5c>
 80074c8:	2a25      	cmp	r2, #37	; 0x25
 80074ca:	d1f9      	bne.n	80074c0 <_svfiprintf_r+0x50>
 80074cc:	ebba 0b04 	subs.w	fp, sl, r4
 80074d0:	d00b      	beq.n	80074ea <_svfiprintf_r+0x7a>
 80074d2:	465b      	mov	r3, fp
 80074d4:	4622      	mov	r2, r4
 80074d6:	4629      	mov	r1, r5
 80074d8:	4638      	mov	r0, r7
 80074da:	f7ff ff6f 	bl	80073bc <__ssputs_r>
 80074de:	3001      	adds	r0, #1
 80074e0:	f000 80a9 	beq.w	8007636 <_svfiprintf_r+0x1c6>
 80074e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074e6:	445a      	add	r2, fp
 80074e8:	9209      	str	r2, [sp, #36]	; 0x24
 80074ea:	f89a 3000 	ldrb.w	r3, [sl]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80a1 	beq.w	8007636 <_svfiprintf_r+0x1c6>
 80074f4:	2300      	movs	r3, #0
 80074f6:	f04f 32ff 	mov.w	r2, #4294967295
 80074fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074fe:	f10a 0a01 	add.w	sl, sl, #1
 8007502:	9304      	str	r3, [sp, #16]
 8007504:	9307      	str	r3, [sp, #28]
 8007506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800750a:	931a      	str	r3, [sp, #104]	; 0x68
 800750c:	4654      	mov	r4, sl
 800750e:	2205      	movs	r2, #5
 8007510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007514:	4850      	ldr	r0, [pc, #320]	; (8007658 <_svfiprintf_r+0x1e8>)
 8007516:	f7f8 fe7b 	bl	8000210 <memchr>
 800751a:	9a04      	ldr	r2, [sp, #16]
 800751c:	b9d8      	cbnz	r0, 8007556 <_svfiprintf_r+0xe6>
 800751e:	06d0      	lsls	r0, r2, #27
 8007520:	bf44      	itt	mi
 8007522:	2320      	movmi	r3, #32
 8007524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007528:	0711      	lsls	r1, r2, #28
 800752a:	bf44      	itt	mi
 800752c:	232b      	movmi	r3, #43	; 0x2b
 800752e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007532:	f89a 3000 	ldrb.w	r3, [sl]
 8007536:	2b2a      	cmp	r3, #42	; 0x2a
 8007538:	d015      	beq.n	8007566 <_svfiprintf_r+0xf6>
 800753a:	9a07      	ldr	r2, [sp, #28]
 800753c:	4654      	mov	r4, sl
 800753e:	2000      	movs	r0, #0
 8007540:	f04f 0c0a 	mov.w	ip, #10
 8007544:	4621      	mov	r1, r4
 8007546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754a:	3b30      	subs	r3, #48	; 0x30
 800754c:	2b09      	cmp	r3, #9
 800754e:	d94d      	bls.n	80075ec <_svfiprintf_r+0x17c>
 8007550:	b1b0      	cbz	r0, 8007580 <_svfiprintf_r+0x110>
 8007552:	9207      	str	r2, [sp, #28]
 8007554:	e014      	b.n	8007580 <_svfiprintf_r+0x110>
 8007556:	eba0 0308 	sub.w	r3, r0, r8
 800755a:	fa09 f303 	lsl.w	r3, r9, r3
 800755e:	4313      	orrs	r3, r2
 8007560:	9304      	str	r3, [sp, #16]
 8007562:	46a2      	mov	sl, r4
 8007564:	e7d2      	b.n	800750c <_svfiprintf_r+0x9c>
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	1d19      	adds	r1, r3, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	9103      	str	r1, [sp, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfbb      	ittet	lt
 8007572:	425b      	neglt	r3, r3
 8007574:	f042 0202 	orrlt.w	r2, r2, #2
 8007578:	9307      	strge	r3, [sp, #28]
 800757a:	9307      	strlt	r3, [sp, #28]
 800757c:	bfb8      	it	lt
 800757e:	9204      	strlt	r2, [sp, #16]
 8007580:	7823      	ldrb	r3, [r4, #0]
 8007582:	2b2e      	cmp	r3, #46	; 0x2e
 8007584:	d10c      	bne.n	80075a0 <_svfiprintf_r+0x130>
 8007586:	7863      	ldrb	r3, [r4, #1]
 8007588:	2b2a      	cmp	r3, #42	; 0x2a
 800758a:	d134      	bne.n	80075f6 <_svfiprintf_r+0x186>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	1d1a      	adds	r2, r3, #4
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	9203      	str	r2, [sp, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	bfb8      	it	lt
 8007598:	f04f 33ff 	movlt.w	r3, #4294967295
 800759c:	3402      	adds	r4, #2
 800759e:	9305      	str	r3, [sp, #20]
 80075a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007668 <_svfiprintf_r+0x1f8>
 80075a4:	7821      	ldrb	r1, [r4, #0]
 80075a6:	2203      	movs	r2, #3
 80075a8:	4650      	mov	r0, sl
 80075aa:	f7f8 fe31 	bl	8000210 <memchr>
 80075ae:	b138      	cbz	r0, 80075c0 <_svfiprintf_r+0x150>
 80075b0:	9b04      	ldr	r3, [sp, #16]
 80075b2:	eba0 000a 	sub.w	r0, r0, sl
 80075b6:	2240      	movs	r2, #64	; 0x40
 80075b8:	4082      	lsls	r2, r0
 80075ba:	4313      	orrs	r3, r2
 80075bc:	3401      	adds	r4, #1
 80075be:	9304      	str	r3, [sp, #16]
 80075c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c4:	4825      	ldr	r0, [pc, #148]	; (800765c <_svfiprintf_r+0x1ec>)
 80075c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075ca:	2206      	movs	r2, #6
 80075cc:	f7f8 fe20 	bl	8000210 <memchr>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d038      	beq.n	8007646 <_svfiprintf_r+0x1d6>
 80075d4:	4b22      	ldr	r3, [pc, #136]	; (8007660 <_svfiprintf_r+0x1f0>)
 80075d6:	bb1b      	cbnz	r3, 8007620 <_svfiprintf_r+0x1b0>
 80075d8:	9b03      	ldr	r3, [sp, #12]
 80075da:	3307      	adds	r3, #7
 80075dc:	f023 0307 	bic.w	r3, r3, #7
 80075e0:	3308      	adds	r3, #8
 80075e2:	9303      	str	r3, [sp, #12]
 80075e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e6:	4433      	add	r3, r6
 80075e8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ea:	e768      	b.n	80074be <_svfiprintf_r+0x4e>
 80075ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80075f0:	460c      	mov	r4, r1
 80075f2:	2001      	movs	r0, #1
 80075f4:	e7a6      	b.n	8007544 <_svfiprintf_r+0xd4>
 80075f6:	2300      	movs	r3, #0
 80075f8:	3401      	adds	r4, #1
 80075fa:	9305      	str	r3, [sp, #20]
 80075fc:	4619      	mov	r1, r3
 80075fe:	f04f 0c0a 	mov.w	ip, #10
 8007602:	4620      	mov	r0, r4
 8007604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007608:	3a30      	subs	r2, #48	; 0x30
 800760a:	2a09      	cmp	r2, #9
 800760c:	d903      	bls.n	8007616 <_svfiprintf_r+0x1a6>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0c6      	beq.n	80075a0 <_svfiprintf_r+0x130>
 8007612:	9105      	str	r1, [sp, #20]
 8007614:	e7c4      	b.n	80075a0 <_svfiprintf_r+0x130>
 8007616:	fb0c 2101 	mla	r1, ip, r1, r2
 800761a:	4604      	mov	r4, r0
 800761c:	2301      	movs	r3, #1
 800761e:	e7f0      	b.n	8007602 <_svfiprintf_r+0x192>
 8007620:	ab03      	add	r3, sp, #12
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	462a      	mov	r2, r5
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <_svfiprintf_r+0x1f4>)
 8007628:	a904      	add	r1, sp, #16
 800762a:	4638      	mov	r0, r7
 800762c:	f7fd fe62 	bl	80052f4 <_printf_float>
 8007630:	1c42      	adds	r2, r0, #1
 8007632:	4606      	mov	r6, r0
 8007634:	d1d6      	bne.n	80075e4 <_svfiprintf_r+0x174>
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	065b      	lsls	r3, r3, #25
 800763a:	f53f af2d 	bmi.w	8007498 <_svfiprintf_r+0x28>
 800763e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007640:	b01d      	add	sp, #116	; 0x74
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	ab03      	add	r3, sp, #12
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	462a      	mov	r2, r5
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <_svfiprintf_r+0x1f4>)
 800764e:	a904      	add	r1, sp, #16
 8007650:	4638      	mov	r0, r7
 8007652:	f7fe f8f3 	bl	800583c <_printf_i>
 8007656:	e7eb      	b.n	8007630 <_svfiprintf_r+0x1c0>
 8007658:	08008e7c 	.word	0x08008e7c
 800765c:	08008e86 	.word	0x08008e86
 8007660:	080052f5 	.word	0x080052f5
 8007664:	080073bd 	.word	0x080073bd
 8007668:	08008e82 	.word	0x08008e82

0800766c <__sflush_r>:
 800766c:	898a      	ldrh	r2, [r1, #12]
 800766e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007672:	4605      	mov	r5, r0
 8007674:	0710      	lsls	r0, r2, #28
 8007676:	460c      	mov	r4, r1
 8007678:	d458      	bmi.n	800772c <__sflush_r+0xc0>
 800767a:	684b      	ldr	r3, [r1, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	dc05      	bgt.n	800768c <__sflush_r+0x20>
 8007680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	dc02      	bgt.n	800768c <__sflush_r+0x20>
 8007686:	2000      	movs	r0, #0
 8007688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800768c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800768e:	2e00      	cmp	r6, #0
 8007690:	d0f9      	beq.n	8007686 <__sflush_r+0x1a>
 8007692:	2300      	movs	r3, #0
 8007694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007698:	682f      	ldr	r7, [r5, #0]
 800769a:	6a21      	ldr	r1, [r4, #32]
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	d032      	beq.n	8007706 <__sflush_r+0x9a>
 80076a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	075a      	lsls	r2, r3, #29
 80076a6:	d505      	bpl.n	80076b4 <__sflush_r+0x48>
 80076a8:	6863      	ldr	r3, [r4, #4]
 80076aa:	1ac0      	subs	r0, r0, r3
 80076ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076ae:	b10b      	cbz	r3, 80076b4 <__sflush_r+0x48>
 80076b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076b2:	1ac0      	subs	r0, r0, r3
 80076b4:	2300      	movs	r3, #0
 80076b6:	4602      	mov	r2, r0
 80076b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ba:	6a21      	ldr	r1, [r4, #32]
 80076bc:	4628      	mov	r0, r5
 80076be:	47b0      	blx	r6
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	d106      	bne.n	80076d4 <__sflush_r+0x68>
 80076c6:	6829      	ldr	r1, [r5, #0]
 80076c8:	291d      	cmp	r1, #29
 80076ca:	d82b      	bhi.n	8007724 <__sflush_r+0xb8>
 80076cc:	4a29      	ldr	r2, [pc, #164]	; (8007774 <__sflush_r+0x108>)
 80076ce:	410a      	asrs	r2, r1
 80076d0:	07d6      	lsls	r6, r2, #31
 80076d2:	d427      	bmi.n	8007724 <__sflush_r+0xb8>
 80076d4:	2200      	movs	r2, #0
 80076d6:	6062      	str	r2, [r4, #4]
 80076d8:	04d9      	lsls	r1, r3, #19
 80076da:	6922      	ldr	r2, [r4, #16]
 80076dc:	6022      	str	r2, [r4, #0]
 80076de:	d504      	bpl.n	80076ea <__sflush_r+0x7e>
 80076e0:	1c42      	adds	r2, r0, #1
 80076e2:	d101      	bne.n	80076e8 <__sflush_r+0x7c>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b903      	cbnz	r3, 80076ea <__sflush_r+0x7e>
 80076e8:	6560      	str	r0, [r4, #84]	; 0x54
 80076ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ec:	602f      	str	r7, [r5, #0]
 80076ee:	2900      	cmp	r1, #0
 80076f0:	d0c9      	beq.n	8007686 <__sflush_r+0x1a>
 80076f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076f6:	4299      	cmp	r1, r3
 80076f8:	d002      	beq.n	8007700 <__sflush_r+0x94>
 80076fa:	4628      	mov	r0, r5
 80076fc:	f7ff f9e2 	bl	8006ac4 <_free_r>
 8007700:	2000      	movs	r0, #0
 8007702:	6360      	str	r0, [r4, #52]	; 0x34
 8007704:	e7c0      	b.n	8007688 <__sflush_r+0x1c>
 8007706:	2301      	movs	r3, #1
 8007708:	4628      	mov	r0, r5
 800770a:	47b0      	blx	r6
 800770c:	1c41      	adds	r1, r0, #1
 800770e:	d1c8      	bne.n	80076a2 <__sflush_r+0x36>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0c5      	beq.n	80076a2 <__sflush_r+0x36>
 8007716:	2b1d      	cmp	r3, #29
 8007718:	d001      	beq.n	800771e <__sflush_r+0xb2>
 800771a:	2b16      	cmp	r3, #22
 800771c:	d101      	bne.n	8007722 <__sflush_r+0xb6>
 800771e:	602f      	str	r7, [r5, #0]
 8007720:	e7b1      	b.n	8007686 <__sflush_r+0x1a>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007728:	81a3      	strh	r3, [r4, #12]
 800772a:	e7ad      	b.n	8007688 <__sflush_r+0x1c>
 800772c:	690f      	ldr	r7, [r1, #16]
 800772e:	2f00      	cmp	r7, #0
 8007730:	d0a9      	beq.n	8007686 <__sflush_r+0x1a>
 8007732:	0793      	lsls	r3, r2, #30
 8007734:	680e      	ldr	r6, [r1, #0]
 8007736:	bf08      	it	eq
 8007738:	694b      	ldreq	r3, [r1, #20]
 800773a:	600f      	str	r7, [r1, #0]
 800773c:	bf18      	it	ne
 800773e:	2300      	movne	r3, #0
 8007740:	eba6 0807 	sub.w	r8, r6, r7
 8007744:	608b      	str	r3, [r1, #8]
 8007746:	f1b8 0f00 	cmp.w	r8, #0
 800774a:	dd9c      	ble.n	8007686 <__sflush_r+0x1a>
 800774c:	6a21      	ldr	r1, [r4, #32]
 800774e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007750:	4643      	mov	r3, r8
 8007752:	463a      	mov	r2, r7
 8007754:	4628      	mov	r0, r5
 8007756:	47b0      	blx	r6
 8007758:	2800      	cmp	r0, #0
 800775a:	dc06      	bgt.n	800776a <__sflush_r+0xfe>
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007762:	81a3      	strh	r3, [r4, #12]
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	e78e      	b.n	8007688 <__sflush_r+0x1c>
 800776a:	4407      	add	r7, r0
 800776c:	eba8 0800 	sub.w	r8, r8, r0
 8007770:	e7e9      	b.n	8007746 <__sflush_r+0xda>
 8007772:	bf00      	nop
 8007774:	dfbffffe 	.word	0xdfbffffe

08007778 <_fflush_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	690b      	ldr	r3, [r1, #16]
 800777c:	4605      	mov	r5, r0
 800777e:	460c      	mov	r4, r1
 8007780:	b913      	cbnz	r3, 8007788 <_fflush_r+0x10>
 8007782:	2500      	movs	r5, #0
 8007784:	4628      	mov	r0, r5
 8007786:	bd38      	pop	{r3, r4, r5, pc}
 8007788:	b118      	cbz	r0, 8007792 <_fflush_r+0x1a>
 800778a:	6a03      	ldr	r3, [r0, #32]
 800778c:	b90b      	cbnz	r3, 8007792 <_fflush_r+0x1a>
 800778e:	f7fe fa03 	bl	8005b98 <__sinit>
 8007792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f3      	beq.n	8007782 <_fflush_r+0xa>
 800779a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800779c:	07d0      	lsls	r0, r2, #31
 800779e:	d404      	bmi.n	80077aa <_fflush_r+0x32>
 80077a0:	0599      	lsls	r1, r3, #22
 80077a2:	d402      	bmi.n	80077aa <_fflush_r+0x32>
 80077a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077a6:	f7fe fb0e 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 80077aa:	4628      	mov	r0, r5
 80077ac:	4621      	mov	r1, r4
 80077ae:	f7ff ff5d 	bl	800766c <__sflush_r>
 80077b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077b4:	07da      	lsls	r2, r3, #31
 80077b6:	4605      	mov	r5, r0
 80077b8:	d4e4      	bmi.n	8007784 <_fflush_r+0xc>
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	059b      	lsls	r3, r3, #22
 80077be:	d4e1      	bmi.n	8007784 <_fflush_r+0xc>
 80077c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077c2:	f7fe fb01 	bl	8005dc8 <__retarget_lock_release_recursive>
 80077c6:	e7dd      	b.n	8007784 <_fflush_r+0xc>

080077c8 <memmove>:
 80077c8:	4288      	cmp	r0, r1
 80077ca:	b510      	push	{r4, lr}
 80077cc:	eb01 0402 	add.w	r4, r1, r2
 80077d0:	d902      	bls.n	80077d8 <memmove+0x10>
 80077d2:	4284      	cmp	r4, r0
 80077d4:	4623      	mov	r3, r4
 80077d6:	d807      	bhi.n	80077e8 <memmove+0x20>
 80077d8:	1e43      	subs	r3, r0, #1
 80077da:	42a1      	cmp	r1, r4
 80077dc:	d008      	beq.n	80077f0 <memmove+0x28>
 80077de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077e6:	e7f8      	b.n	80077da <memmove+0x12>
 80077e8:	4402      	add	r2, r0
 80077ea:	4601      	mov	r1, r0
 80077ec:	428a      	cmp	r2, r1
 80077ee:	d100      	bne.n	80077f2 <memmove+0x2a>
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077fa:	e7f7      	b.n	80077ec <memmove+0x24>

080077fc <_sbrk_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d06      	ldr	r5, [pc, #24]	; (8007818 <_sbrk_r+0x1c>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7fa fafc 	bl	8001e04 <_sbrk>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_sbrk_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_sbrk_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20000878 	.word	0x20000878

0800781c <memcpy>:
 800781c:	440a      	add	r2, r1
 800781e:	4291      	cmp	r1, r2
 8007820:	f100 33ff 	add.w	r3, r0, #4294967295
 8007824:	d100      	bne.n	8007828 <memcpy+0xc>
 8007826:	4770      	bx	lr
 8007828:	b510      	push	{r4, lr}
 800782a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800782e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007832:	4291      	cmp	r1, r2
 8007834:	d1f9      	bne.n	800782a <memcpy+0xe>
 8007836:	bd10      	pop	{r4, pc}

08007838 <__assert_func>:
 8007838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800783a:	4614      	mov	r4, r2
 800783c:	461a      	mov	r2, r3
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <__assert_func+0x2c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4605      	mov	r5, r0
 8007844:	68d8      	ldr	r0, [r3, #12]
 8007846:	b14c      	cbz	r4, 800785c <__assert_func+0x24>
 8007848:	4b07      	ldr	r3, [pc, #28]	; (8007868 <__assert_func+0x30>)
 800784a:	9100      	str	r1, [sp, #0]
 800784c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007850:	4906      	ldr	r1, [pc, #24]	; (800786c <__assert_func+0x34>)
 8007852:	462b      	mov	r3, r5
 8007854:	f000 f872 	bl	800793c <fiprintf>
 8007858:	f000 f882 	bl	8007960 <abort>
 800785c:	4b04      	ldr	r3, [pc, #16]	; (8007870 <__assert_func+0x38>)
 800785e:	461c      	mov	r4, r3
 8007860:	e7f3      	b.n	800784a <__assert_func+0x12>
 8007862:	bf00      	nop
 8007864:	2000006c 	.word	0x2000006c
 8007868:	08008e97 	.word	0x08008e97
 800786c:	08008ea4 	.word	0x08008ea4
 8007870:	08008ed2 	.word	0x08008ed2

08007874 <_calloc_r>:
 8007874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007876:	fba1 2402 	umull	r2, r4, r1, r2
 800787a:	b94c      	cbnz	r4, 8007890 <_calloc_r+0x1c>
 800787c:	4611      	mov	r1, r2
 800787e:	9201      	str	r2, [sp, #4]
 8007880:	f7ff f994 	bl	8006bac <_malloc_r>
 8007884:	9a01      	ldr	r2, [sp, #4]
 8007886:	4605      	mov	r5, r0
 8007888:	b930      	cbnz	r0, 8007898 <_calloc_r+0x24>
 800788a:	4628      	mov	r0, r5
 800788c:	b003      	add	sp, #12
 800788e:	bd30      	pop	{r4, r5, pc}
 8007890:	220c      	movs	r2, #12
 8007892:	6002      	str	r2, [r0, #0]
 8007894:	2500      	movs	r5, #0
 8007896:	e7f8      	b.n	800788a <_calloc_r+0x16>
 8007898:	4621      	mov	r1, r4
 800789a:	f7fe fa16 	bl	8005cca <memset>
 800789e:	e7f4      	b.n	800788a <_calloc_r+0x16>

080078a0 <__ascii_mbtowc>:
 80078a0:	b082      	sub	sp, #8
 80078a2:	b901      	cbnz	r1, 80078a6 <__ascii_mbtowc+0x6>
 80078a4:	a901      	add	r1, sp, #4
 80078a6:	b142      	cbz	r2, 80078ba <__ascii_mbtowc+0x1a>
 80078a8:	b14b      	cbz	r3, 80078be <__ascii_mbtowc+0x1e>
 80078aa:	7813      	ldrb	r3, [r2, #0]
 80078ac:	600b      	str	r3, [r1, #0]
 80078ae:	7812      	ldrb	r2, [r2, #0]
 80078b0:	1e10      	subs	r0, r2, #0
 80078b2:	bf18      	it	ne
 80078b4:	2001      	movne	r0, #1
 80078b6:	b002      	add	sp, #8
 80078b8:	4770      	bx	lr
 80078ba:	4610      	mov	r0, r2
 80078bc:	e7fb      	b.n	80078b6 <__ascii_mbtowc+0x16>
 80078be:	f06f 0001 	mvn.w	r0, #1
 80078c2:	e7f8      	b.n	80078b6 <__ascii_mbtowc+0x16>

080078c4 <_realloc_r>:
 80078c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c8:	4680      	mov	r8, r0
 80078ca:	4614      	mov	r4, r2
 80078cc:	460e      	mov	r6, r1
 80078ce:	b921      	cbnz	r1, 80078da <_realloc_r+0x16>
 80078d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078d4:	4611      	mov	r1, r2
 80078d6:	f7ff b969 	b.w	8006bac <_malloc_r>
 80078da:	b92a      	cbnz	r2, 80078e8 <_realloc_r+0x24>
 80078dc:	f7ff f8f2 	bl	8006ac4 <_free_r>
 80078e0:	4625      	mov	r5, r4
 80078e2:	4628      	mov	r0, r5
 80078e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e8:	f000 f841 	bl	800796e <_malloc_usable_size_r>
 80078ec:	4284      	cmp	r4, r0
 80078ee:	4607      	mov	r7, r0
 80078f0:	d802      	bhi.n	80078f8 <_realloc_r+0x34>
 80078f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078f6:	d812      	bhi.n	800791e <_realloc_r+0x5a>
 80078f8:	4621      	mov	r1, r4
 80078fa:	4640      	mov	r0, r8
 80078fc:	f7ff f956 	bl	8006bac <_malloc_r>
 8007900:	4605      	mov	r5, r0
 8007902:	2800      	cmp	r0, #0
 8007904:	d0ed      	beq.n	80078e2 <_realloc_r+0x1e>
 8007906:	42bc      	cmp	r4, r7
 8007908:	4622      	mov	r2, r4
 800790a:	4631      	mov	r1, r6
 800790c:	bf28      	it	cs
 800790e:	463a      	movcs	r2, r7
 8007910:	f7ff ff84 	bl	800781c <memcpy>
 8007914:	4631      	mov	r1, r6
 8007916:	4640      	mov	r0, r8
 8007918:	f7ff f8d4 	bl	8006ac4 <_free_r>
 800791c:	e7e1      	b.n	80078e2 <_realloc_r+0x1e>
 800791e:	4635      	mov	r5, r6
 8007920:	e7df      	b.n	80078e2 <_realloc_r+0x1e>

08007922 <__ascii_wctomb>:
 8007922:	b149      	cbz	r1, 8007938 <__ascii_wctomb+0x16>
 8007924:	2aff      	cmp	r2, #255	; 0xff
 8007926:	bf85      	ittet	hi
 8007928:	238a      	movhi	r3, #138	; 0x8a
 800792a:	6003      	strhi	r3, [r0, #0]
 800792c:	700a      	strbls	r2, [r1, #0]
 800792e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007932:	bf98      	it	ls
 8007934:	2001      	movls	r0, #1
 8007936:	4770      	bx	lr
 8007938:	4608      	mov	r0, r1
 800793a:	4770      	bx	lr

0800793c <fiprintf>:
 800793c:	b40e      	push	{r1, r2, r3}
 800793e:	b503      	push	{r0, r1, lr}
 8007940:	4601      	mov	r1, r0
 8007942:	ab03      	add	r3, sp, #12
 8007944:	4805      	ldr	r0, [pc, #20]	; (800795c <fiprintf+0x20>)
 8007946:	f853 2b04 	ldr.w	r2, [r3], #4
 800794a:	6800      	ldr	r0, [r0, #0]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	f000 f83f 	bl	80079d0 <_vfiprintf_r>
 8007952:	b002      	add	sp, #8
 8007954:	f85d eb04 	ldr.w	lr, [sp], #4
 8007958:	b003      	add	sp, #12
 800795a:	4770      	bx	lr
 800795c:	2000006c 	.word	0x2000006c

08007960 <abort>:
 8007960:	b508      	push	{r3, lr}
 8007962:	2006      	movs	r0, #6
 8007964:	f000 fa0c 	bl	8007d80 <raise>
 8007968:	2001      	movs	r0, #1
 800796a:	f7fa f9d3 	bl	8001d14 <_exit>

0800796e <_malloc_usable_size_r>:
 800796e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007972:	1f18      	subs	r0, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	bfbc      	itt	lt
 8007978:	580b      	ldrlt	r3, [r1, r0]
 800797a:	18c0      	addlt	r0, r0, r3
 800797c:	4770      	bx	lr

0800797e <__sfputc_r>:
 800797e:	6893      	ldr	r3, [r2, #8]
 8007980:	3b01      	subs	r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	b410      	push	{r4}
 8007986:	6093      	str	r3, [r2, #8]
 8007988:	da08      	bge.n	800799c <__sfputc_r+0x1e>
 800798a:	6994      	ldr	r4, [r2, #24]
 800798c:	42a3      	cmp	r3, r4
 800798e:	db01      	blt.n	8007994 <__sfputc_r+0x16>
 8007990:	290a      	cmp	r1, #10
 8007992:	d103      	bne.n	800799c <__sfputc_r+0x1e>
 8007994:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007998:	f000 b934 	b.w	8007c04 <__swbuf_r>
 800799c:	6813      	ldr	r3, [r2, #0]
 800799e:	1c58      	adds	r0, r3, #1
 80079a0:	6010      	str	r0, [r2, #0]
 80079a2:	7019      	strb	r1, [r3, #0]
 80079a4:	4608      	mov	r0, r1
 80079a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <__sfputs_r>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	4606      	mov	r6, r0
 80079b0:	460f      	mov	r7, r1
 80079b2:	4614      	mov	r4, r2
 80079b4:	18d5      	adds	r5, r2, r3
 80079b6:	42ac      	cmp	r4, r5
 80079b8:	d101      	bne.n	80079be <__sfputs_r+0x12>
 80079ba:	2000      	movs	r0, #0
 80079bc:	e007      	b.n	80079ce <__sfputs_r+0x22>
 80079be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c2:	463a      	mov	r2, r7
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7ff ffda 	bl	800797e <__sfputc_r>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	d1f3      	bne.n	80079b6 <__sfputs_r+0xa>
 80079ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079d0 <_vfiprintf_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	460d      	mov	r5, r1
 80079d6:	b09d      	sub	sp, #116	; 0x74
 80079d8:	4614      	mov	r4, r2
 80079da:	4698      	mov	r8, r3
 80079dc:	4606      	mov	r6, r0
 80079de:	b118      	cbz	r0, 80079e8 <_vfiprintf_r+0x18>
 80079e0:	6a03      	ldr	r3, [r0, #32]
 80079e2:	b90b      	cbnz	r3, 80079e8 <_vfiprintf_r+0x18>
 80079e4:	f7fe f8d8 	bl	8005b98 <__sinit>
 80079e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ea:	07d9      	lsls	r1, r3, #31
 80079ec:	d405      	bmi.n	80079fa <_vfiprintf_r+0x2a>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	059a      	lsls	r2, r3, #22
 80079f2:	d402      	bmi.n	80079fa <_vfiprintf_r+0x2a>
 80079f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079f6:	f7fe f9e6 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 80079fa:	89ab      	ldrh	r3, [r5, #12]
 80079fc:	071b      	lsls	r3, r3, #28
 80079fe:	d501      	bpl.n	8007a04 <_vfiprintf_r+0x34>
 8007a00:	692b      	ldr	r3, [r5, #16]
 8007a02:	b99b      	cbnz	r3, 8007a2c <_vfiprintf_r+0x5c>
 8007a04:	4629      	mov	r1, r5
 8007a06:	4630      	mov	r0, r6
 8007a08:	f000 f93a 	bl	8007c80 <__swsetup_r>
 8007a0c:	b170      	cbz	r0, 8007a2c <_vfiprintf_r+0x5c>
 8007a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a10:	07dc      	lsls	r4, r3, #31
 8007a12:	d504      	bpl.n	8007a1e <_vfiprintf_r+0x4e>
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	b01d      	add	sp, #116	; 0x74
 8007a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1e:	89ab      	ldrh	r3, [r5, #12]
 8007a20:	0598      	lsls	r0, r3, #22
 8007a22:	d4f7      	bmi.n	8007a14 <_vfiprintf_r+0x44>
 8007a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a26:	f7fe f9cf 	bl	8005dc8 <__retarget_lock_release_recursive>
 8007a2a:	e7f3      	b.n	8007a14 <_vfiprintf_r+0x44>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a30:	2320      	movs	r3, #32
 8007a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a3a:	2330      	movs	r3, #48	; 0x30
 8007a3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007bf0 <_vfiprintf_r+0x220>
 8007a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a44:	f04f 0901 	mov.w	r9, #1
 8007a48:	4623      	mov	r3, r4
 8007a4a:	469a      	mov	sl, r3
 8007a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a50:	b10a      	cbz	r2, 8007a56 <_vfiprintf_r+0x86>
 8007a52:	2a25      	cmp	r2, #37	; 0x25
 8007a54:	d1f9      	bne.n	8007a4a <_vfiprintf_r+0x7a>
 8007a56:	ebba 0b04 	subs.w	fp, sl, r4
 8007a5a:	d00b      	beq.n	8007a74 <_vfiprintf_r+0xa4>
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7ff ffa2 	bl	80079ac <__sfputs_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f000 80a9 	beq.w	8007bc0 <_vfiprintf_r+0x1f0>
 8007a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a70:	445a      	add	r2, fp
 8007a72:	9209      	str	r2, [sp, #36]	; 0x24
 8007a74:	f89a 3000 	ldrb.w	r3, [sl]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80a1 	beq.w	8007bc0 <_vfiprintf_r+0x1f0>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f04f 32ff 	mov.w	r2, #4294967295
 8007a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a88:	f10a 0a01 	add.w	sl, sl, #1
 8007a8c:	9304      	str	r3, [sp, #16]
 8007a8e:	9307      	str	r3, [sp, #28]
 8007a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a94:	931a      	str	r3, [sp, #104]	; 0x68
 8007a96:	4654      	mov	r4, sl
 8007a98:	2205      	movs	r2, #5
 8007a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9e:	4854      	ldr	r0, [pc, #336]	; (8007bf0 <_vfiprintf_r+0x220>)
 8007aa0:	f7f8 fbb6 	bl	8000210 <memchr>
 8007aa4:	9a04      	ldr	r2, [sp, #16]
 8007aa6:	b9d8      	cbnz	r0, 8007ae0 <_vfiprintf_r+0x110>
 8007aa8:	06d1      	lsls	r1, r2, #27
 8007aaa:	bf44      	itt	mi
 8007aac:	2320      	movmi	r3, #32
 8007aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab2:	0713      	lsls	r3, r2, #28
 8007ab4:	bf44      	itt	mi
 8007ab6:	232b      	movmi	r3, #43	; 0x2b
 8007ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007abc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac2:	d015      	beq.n	8007af0 <_vfiprintf_r+0x120>
 8007ac4:	9a07      	ldr	r2, [sp, #28]
 8007ac6:	4654      	mov	r4, sl
 8007ac8:	2000      	movs	r0, #0
 8007aca:	f04f 0c0a 	mov.w	ip, #10
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ad4:	3b30      	subs	r3, #48	; 0x30
 8007ad6:	2b09      	cmp	r3, #9
 8007ad8:	d94d      	bls.n	8007b76 <_vfiprintf_r+0x1a6>
 8007ada:	b1b0      	cbz	r0, 8007b0a <_vfiprintf_r+0x13a>
 8007adc:	9207      	str	r2, [sp, #28]
 8007ade:	e014      	b.n	8007b0a <_vfiprintf_r+0x13a>
 8007ae0:	eba0 0308 	sub.w	r3, r0, r8
 8007ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	46a2      	mov	sl, r4
 8007aee:	e7d2      	b.n	8007a96 <_vfiprintf_r+0xc6>
 8007af0:	9b03      	ldr	r3, [sp, #12]
 8007af2:	1d19      	adds	r1, r3, #4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	9103      	str	r1, [sp, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bfbb      	ittet	lt
 8007afc:	425b      	neglt	r3, r3
 8007afe:	f042 0202 	orrlt.w	r2, r2, #2
 8007b02:	9307      	strge	r3, [sp, #28]
 8007b04:	9307      	strlt	r3, [sp, #28]
 8007b06:	bfb8      	it	lt
 8007b08:	9204      	strlt	r2, [sp, #16]
 8007b0a:	7823      	ldrb	r3, [r4, #0]
 8007b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b0e:	d10c      	bne.n	8007b2a <_vfiprintf_r+0x15a>
 8007b10:	7863      	ldrb	r3, [r4, #1]
 8007b12:	2b2a      	cmp	r3, #42	; 0x2a
 8007b14:	d134      	bne.n	8007b80 <_vfiprintf_r+0x1b0>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	9203      	str	r2, [sp, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bfb8      	it	lt
 8007b22:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b26:	3402      	adds	r4, #2
 8007b28:	9305      	str	r3, [sp, #20]
 8007b2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c00 <_vfiprintf_r+0x230>
 8007b2e:	7821      	ldrb	r1, [r4, #0]
 8007b30:	2203      	movs	r2, #3
 8007b32:	4650      	mov	r0, sl
 8007b34:	f7f8 fb6c 	bl	8000210 <memchr>
 8007b38:	b138      	cbz	r0, 8007b4a <_vfiprintf_r+0x17a>
 8007b3a:	9b04      	ldr	r3, [sp, #16]
 8007b3c:	eba0 000a 	sub.w	r0, r0, sl
 8007b40:	2240      	movs	r2, #64	; 0x40
 8007b42:	4082      	lsls	r2, r0
 8007b44:	4313      	orrs	r3, r2
 8007b46:	3401      	adds	r4, #1
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4e:	4829      	ldr	r0, [pc, #164]	; (8007bf4 <_vfiprintf_r+0x224>)
 8007b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b54:	2206      	movs	r2, #6
 8007b56:	f7f8 fb5b 	bl	8000210 <memchr>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d03f      	beq.n	8007bde <_vfiprintf_r+0x20e>
 8007b5e:	4b26      	ldr	r3, [pc, #152]	; (8007bf8 <_vfiprintf_r+0x228>)
 8007b60:	bb1b      	cbnz	r3, 8007baa <_vfiprintf_r+0x1da>
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	3307      	adds	r3, #7
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	9303      	str	r3, [sp, #12]
 8007b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b70:	443b      	add	r3, r7
 8007b72:	9309      	str	r3, [sp, #36]	; 0x24
 8007b74:	e768      	b.n	8007a48 <_vfiprintf_r+0x78>
 8007b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	2001      	movs	r0, #1
 8007b7e:	e7a6      	b.n	8007ace <_vfiprintf_r+0xfe>
 8007b80:	2300      	movs	r3, #0
 8007b82:	3401      	adds	r4, #1
 8007b84:	9305      	str	r3, [sp, #20]
 8007b86:	4619      	mov	r1, r3
 8007b88:	f04f 0c0a 	mov.w	ip, #10
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b92:	3a30      	subs	r2, #48	; 0x30
 8007b94:	2a09      	cmp	r2, #9
 8007b96:	d903      	bls.n	8007ba0 <_vfiprintf_r+0x1d0>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0c6      	beq.n	8007b2a <_vfiprintf_r+0x15a>
 8007b9c:	9105      	str	r1, [sp, #20]
 8007b9e:	e7c4      	b.n	8007b2a <_vfiprintf_r+0x15a>
 8007ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e7f0      	b.n	8007b8c <_vfiprintf_r+0x1bc>
 8007baa:	ab03      	add	r3, sp, #12
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <_vfiprintf_r+0x22c>)
 8007bb2:	a904      	add	r1, sp, #16
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7fd fb9d 	bl	80052f4 <_printf_float>
 8007bba:	4607      	mov	r7, r0
 8007bbc:	1c78      	adds	r0, r7, #1
 8007bbe:	d1d6      	bne.n	8007b6e <_vfiprintf_r+0x19e>
 8007bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bc2:	07d9      	lsls	r1, r3, #31
 8007bc4:	d405      	bmi.n	8007bd2 <_vfiprintf_r+0x202>
 8007bc6:	89ab      	ldrh	r3, [r5, #12]
 8007bc8:	059a      	lsls	r2, r3, #22
 8007bca:	d402      	bmi.n	8007bd2 <_vfiprintf_r+0x202>
 8007bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bce:	f7fe f8fb 	bl	8005dc8 <__retarget_lock_release_recursive>
 8007bd2:	89ab      	ldrh	r3, [r5, #12]
 8007bd4:	065b      	lsls	r3, r3, #25
 8007bd6:	f53f af1d 	bmi.w	8007a14 <_vfiprintf_r+0x44>
 8007bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bdc:	e71c      	b.n	8007a18 <_vfiprintf_r+0x48>
 8007bde:	ab03      	add	r3, sp, #12
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	462a      	mov	r2, r5
 8007be4:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <_vfiprintf_r+0x22c>)
 8007be6:	a904      	add	r1, sp, #16
 8007be8:	4630      	mov	r0, r6
 8007bea:	f7fd fe27 	bl	800583c <_printf_i>
 8007bee:	e7e4      	b.n	8007bba <_vfiprintf_r+0x1ea>
 8007bf0:	08008e7c 	.word	0x08008e7c
 8007bf4:	08008e86 	.word	0x08008e86
 8007bf8:	080052f5 	.word	0x080052f5
 8007bfc:	080079ad 	.word	0x080079ad
 8007c00:	08008e82 	.word	0x08008e82

08007c04 <__swbuf_r>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	460e      	mov	r6, r1
 8007c08:	4614      	mov	r4, r2
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	b118      	cbz	r0, 8007c16 <__swbuf_r+0x12>
 8007c0e:	6a03      	ldr	r3, [r0, #32]
 8007c10:	b90b      	cbnz	r3, 8007c16 <__swbuf_r+0x12>
 8007c12:	f7fd ffc1 	bl	8005b98 <__sinit>
 8007c16:	69a3      	ldr	r3, [r4, #24]
 8007c18:	60a3      	str	r3, [r4, #8]
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	071a      	lsls	r2, r3, #28
 8007c1e:	d525      	bpl.n	8007c6c <__swbuf_r+0x68>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	b31b      	cbz	r3, 8007c6c <__swbuf_r+0x68>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	6922      	ldr	r2, [r4, #16]
 8007c28:	1a98      	subs	r0, r3, r2
 8007c2a:	6963      	ldr	r3, [r4, #20]
 8007c2c:	b2f6      	uxtb	r6, r6
 8007c2e:	4283      	cmp	r3, r0
 8007c30:	4637      	mov	r7, r6
 8007c32:	dc04      	bgt.n	8007c3e <__swbuf_r+0x3a>
 8007c34:	4621      	mov	r1, r4
 8007c36:	4628      	mov	r0, r5
 8007c38:	f7ff fd9e 	bl	8007778 <_fflush_r>
 8007c3c:	b9e0      	cbnz	r0, 8007c78 <__swbuf_r+0x74>
 8007c3e:	68a3      	ldr	r3, [r4, #8]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	60a3      	str	r3, [r4, #8]
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	6022      	str	r2, [r4, #0]
 8007c4a:	701e      	strb	r6, [r3, #0]
 8007c4c:	6962      	ldr	r2, [r4, #20]
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d004      	beq.n	8007c5e <__swbuf_r+0x5a>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	07db      	lsls	r3, r3, #31
 8007c58:	d506      	bpl.n	8007c68 <__swbuf_r+0x64>
 8007c5a:	2e0a      	cmp	r6, #10
 8007c5c:	d104      	bne.n	8007c68 <__swbuf_r+0x64>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7ff fd89 	bl	8007778 <_fflush_r>
 8007c66:	b938      	cbnz	r0, 8007c78 <__swbuf_r+0x74>
 8007c68:	4638      	mov	r0, r7
 8007c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 f806 	bl	8007c80 <__swsetup_r>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d0d5      	beq.n	8007c24 <__swbuf_r+0x20>
 8007c78:	f04f 37ff 	mov.w	r7, #4294967295
 8007c7c:	e7f4      	b.n	8007c68 <__swbuf_r+0x64>
	...

08007c80 <__swsetup_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <__swsetup_r+0xac>)
 8007c84:	4605      	mov	r5, r0
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	460c      	mov	r4, r1
 8007c8a:	b118      	cbz	r0, 8007c94 <__swsetup_r+0x14>
 8007c8c:	6a03      	ldr	r3, [r0, #32]
 8007c8e:	b90b      	cbnz	r3, 8007c94 <__swsetup_r+0x14>
 8007c90:	f7fd ff82 	bl	8005b98 <__sinit>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c9a:	0718      	lsls	r0, r3, #28
 8007c9c:	d422      	bmi.n	8007ce4 <__swsetup_r+0x64>
 8007c9e:	06d9      	lsls	r1, r3, #27
 8007ca0:	d407      	bmi.n	8007cb2 <__swsetup_r+0x32>
 8007ca2:	2309      	movs	r3, #9
 8007ca4:	602b      	str	r3, [r5, #0]
 8007ca6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	e034      	b.n	8007d1c <__swsetup_r+0x9c>
 8007cb2:	0758      	lsls	r0, r3, #29
 8007cb4:	d512      	bpl.n	8007cdc <__swsetup_r+0x5c>
 8007cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cb8:	b141      	cbz	r1, 8007ccc <__swsetup_r+0x4c>
 8007cba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cbe:	4299      	cmp	r1, r3
 8007cc0:	d002      	beq.n	8007cc8 <__swsetup_r+0x48>
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f7fe fefe 	bl	8006ac4 <_free_r>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	6363      	str	r3, [r4, #52]	; 0x34
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	6063      	str	r3, [r4, #4]
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	6023      	str	r3, [r4, #0]
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f043 0308 	orr.w	r3, r3, #8
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	b94b      	cbnz	r3, 8007cfc <__swsetup_r+0x7c>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf2:	d003      	beq.n	8007cfc <__swsetup_r+0x7c>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 f884 	bl	8007e04 <__smakebuf_r>
 8007cfc:	89a0      	ldrh	r0, [r4, #12]
 8007cfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d02:	f010 0301 	ands.w	r3, r0, #1
 8007d06:	d00a      	beq.n	8007d1e <__swsetup_r+0x9e>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60a3      	str	r3, [r4, #8]
 8007d0c:	6963      	ldr	r3, [r4, #20]
 8007d0e:	425b      	negs	r3, r3
 8007d10:	61a3      	str	r3, [r4, #24]
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	b943      	cbnz	r3, 8007d28 <__swsetup_r+0xa8>
 8007d16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d1a:	d1c4      	bne.n	8007ca6 <__swsetup_r+0x26>
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
 8007d1e:	0781      	lsls	r1, r0, #30
 8007d20:	bf58      	it	pl
 8007d22:	6963      	ldrpl	r3, [r4, #20]
 8007d24:	60a3      	str	r3, [r4, #8]
 8007d26:	e7f4      	b.n	8007d12 <__swsetup_r+0x92>
 8007d28:	2000      	movs	r0, #0
 8007d2a:	e7f7      	b.n	8007d1c <__swsetup_r+0x9c>
 8007d2c:	2000006c 	.word	0x2000006c

08007d30 <_raise_r>:
 8007d30:	291f      	cmp	r1, #31
 8007d32:	b538      	push	{r3, r4, r5, lr}
 8007d34:	4604      	mov	r4, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	d904      	bls.n	8007d44 <_raise_r+0x14>
 8007d3a:	2316      	movs	r3, #22
 8007d3c:	6003      	str	r3, [r0, #0]
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d46:	b112      	cbz	r2, 8007d4e <_raise_r+0x1e>
 8007d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d4c:	b94b      	cbnz	r3, 8007d62 <_raise_r+0x32>
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 f830 	bl	8007db4 <_getpid_r>
 8007d54:	462a      	mov	r2, r5
 8007d56:	4601      	mov	r1, r0
 8007d58:	4620      	mov	r0, r4
 8007d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d5e:	f000 b817 	b.w	8007d90 <_kill_r>
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d00a      	beq.n	8007d7c <_raise_r+0x4c>
 8007d66:	1c59      	adds	r1, r3, #1
 8007d68:	d103      	bne.n	8007d72 <_raise_r+0x42>
 8007d6a:	2316      	movs	r3, #22
 8007d6c:	6003      	str	r3, [r0, #0]
 8007d6e:	2001      	movs	r0, #1
 8007d70:	e7e7      	b.n	8007d42 <_raise_r+0x12>
 8007d72:	2400      	movs	r4, #0
 8007d74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d78:	4628      	mov	r0, r5
 8007d7a:	4798      	blx	r3
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e7e0      	b.n	8007d42 <_raise_r+0x12>

08007d80 <raise>:
 8007d80:	4b02      	ldr	r3, [pc, #8]	; (8007d8c <raise+0xc>)
 8007d82:	4601      	mov	r1, r0
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	f7ff bfd3 	b.w	8007d30 <_raise_r>
 8007d8a:	bf00      	nop
 8007d8c:	2000006c 	.word	0x2000006c

08007d90 <_kill_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d07      	ldr	r5, [pc, #28]	; (8007db0 <_kill_r+0x20>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	602b      	str	r3, [r5, #0]
 8007d9e:	f7f9 ffa9 	bl	8001cf4 <_kill>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d102      	bne.n	8007dac <_kill_r+0x1c>
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	b103      	cbz	r3, 8007dac <_kill_r+0x1c>
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	bf00      	nop
 8007db0:	20000878 	.word	0x20000878

08007db4 <_getpid_r>:
 8007db4:	f7f9 bf96 	b.w	8001ce4 <_getpid>

08007db8 <__swhatbuf_r>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	460c      	mov	r4, r1
 8007dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	b096      	sub	sp, #88	; 0x58
 8007dc4:	4615      	mov	r5, r2
 8007dc6:	461e      	mov	r6, r3
 8007dc8:	da0d      	bge.n	8007de6 <__swhatbuf_r+0x2e>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007dd0:	f04f 0100 	mov.w	r1, #0
 8007dd4:	bf0c      	ite	eq
 8007dd6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007dda:	2340      	movne	r3, #64	; 0x40
 8007ddc:	2000      	movs	r0, #0
 8007dde:	6031      	str	r1, [r6, #0]
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	b016      	add	sp, #88	; 0x58
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	466a      	mov	r2, sp
 8007de8:	f000 f848 	bl	8007e7c <_fstat_r>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	dbec      	blt.n	8007dca <__swhatbuf_r+0x12>
 8007df0:	9901      	ldr	r1, [sp, #4]
 8007df2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007df6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007dfa:	4259      	negs	r1, r3
 8007dfc:	4159      	adcs	r1, r3
 8007dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e02:	e7eb      	b.n	8007ddc <__swhatbuf_r+0x24>

08007e04 <__smakebuf_r>:
 8007e04:	898b      	ldrh	r3, [r1, #12]
 8007e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e08:	079d      	lsls	r5, r3, #30
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	d507      	bpl.n	8007e20 <__smakebuf_r+0x1c>
 8007e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	6123      	str	r3, [r4, #16]
 8007e18:	2301      	movs	r3, #1
 8007e1a:	6163      	str	r3, [r4, #20]
 8007e1c:	b002      	add	sp, #8
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	ab01      	add	r3, sp, #4
 8007e22:	466a      	mov	r2, sp
 8007e24:	f7ff ffc8 	bl	8007db8 <__swhatbuf_r>
 8007e28:	9900      	ldr	r1, [sp, #0]
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7fe febd 	bl	8006bac <_malloc_r>
 8007e32:	b948      	cbnz	r0, 8007e48 <__smakebuf_r+0x44>
 8007e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e38:	059a      	lsls	r2, r3, #22
 8007e3a:	d4ef      	bmi.n	8007e1c <__smakebuf_r+0x18>
 8007e3c:	f023 0303 	bic.w	r3, r3, #3
 8007e40:	f043 0302 	orr.w	r3, r3, #2
 8007e44:	81a3      	strh	r3, [r4, #12]
 8007e46:	e7e3      	b.n	8007e10 <__smakebuf_r+0xc>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	6020      	str	r0, [r4, #0]
 8007e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	6163      	str	r3, [r4, #20]
 8007e56:	9b01      	ldr	r3, [sp, #4]
 8007e58:	6120      	str	r0, [r4, #16]
 8007e5a:	b15b      	cbz	r3, 8007e74 <__smakebuf_r+0x70>
 8007e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e60:	4630      	mov	r0, r6
 8007e62:	f000 f81d 	bl	8007ea0 <_isatty_r>
 8007e66:	b128      	cbz	r0, 8007e74 <__smakebuf_r+0x70>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	f023 0303 	bic.w	r3, r3, #3
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	431d      	orrs	r5, r3
 8007e78:	81a5      	strh	r5, [r4, #12]
 8007e7a:	e7cf      	b.n	8007e1c <__smakebuf_r+0x18>

08007e7c <_fstat_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d07      	ldr	r5, [pc, #28]	; (8007e9c <_fstat_r+0x20>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	4611      	mov	r1, r2
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	f7f9 ff92 	bl	8001db2 <_fstat>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	d102      	bne.n	8007e98 <_fstat_r+0x1c>
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	b103      	cbz	r3, 8007e98 <_fstat_r+0x1c>
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	bd38      	pop	{r3, r4, r5, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000878 	.word	0x20000878

08007ea0 <_isatty_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d06      	ldr	r5, [pc, #24]	; (8007ebc <_isatty_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	f7f9 ff91 	bl	8001dd2 <_isatty>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_isatty_r+0x1a>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_isatty_r+0x1a>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	20000878 	.word	0x20000878

08007ec0 <_init>:
 8007ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec2:	bf00      	nop
 8007ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec6:	bc08      	pop	{r3}
 8007ec8:	469e      	mov	lr, r3
 8007eca:	4770      	bx	lr

08007ecc <_fini>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	bf00      	nop
 8007ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed2:	bc08      	pop	{r3}
 8007ed4:	469e      	mov	lr, r3
 8007ed6:	4770      	bx	lr
